#+TITLE: Javascript

* Table of Contents :TOC_3_gh:
- [[#syntax][Syntax]]
- [[#reference][Reference]]
  - [[#global-functions][Global functions]]
    - [[#encodeuri][encodeURI]]
    - [[#encodeuricomponent][encodeURIComponent]]
    - [[#decodeuri][decodeURI]]
    - [[#decodeuricomponent][decodeURIComponent]]
  - [[#string][String]]
  - [[#string-literals][String Literals]]
- [[#topics][Topics]]
  - [[#use-strict]['use strict';]]
  - [[#let-const-var][let, const, var]]
  - [[#type-conversions][Type Conversions]]
  - [[#comparisons][Comparisons]]
- [[#how-to][How-to]]
  - [[#parse-uri][Parse URI]]
  - [[#put-script][Put <script>]]
- [[#links][Links]]

* Syntax
* Reference
** Global functions
*** encodeURI
*** encodeURIComponent
*** decodeURI
*** decodeURIComponent
- https://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent
- ~escape~, ~unescape~ are deprecated
- The difference between ~-URI~ and ~-URIComponent~ is following:
[[file:_img/screenshot_2017-06-03_21-15-23.png]]

** String
- https://www.w3schools.com/jsref/jsref_obj_string.asp

** String Literals
- https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript 
- Single and double quotes are literally same (except escaping)
- It seems that *single quotes are preferred* in the most famous libraries.
- Backticks are used for string interpolation.

#+BEGIN_SRC javascript
  let name = "John";

  // embed a variable
  alert( `Hello, ${name}!` ); // Hello, John!

  // embed an expression
  alert( `the result is ${1 + 2}` ); // the result is 3
#+END_SRC

* Topics
** 'use strict';
- https://javascript.info/strict-mode

Strict mode is declared by adding ~'use strict';~ to the beginning of a script or a function.
Always use it. It's a kind of *modern mode*

** let, const, var
- https://javascript.info/var

- ~let~ and ~const~ behave exactly the same way in terms of Lexical Environments.

- ~var~ has no block scope ::
#+BEGIN_SRC javascript
  if (true) {
    var test = true; // use "var" instead of "let"
  }

  alert(test); // true, the variable lives after if
#+END_SRC

- ~var~ are processed at the function start ::
#+BEGIN_SRC javascript
  function sayHi() {
    phrase = "Hello";

    alert(phrase);

    var phrase;
  }
#+END_SRC

** Type Conversions
- https://javascript.info/type-conversions

#+BEGIN_SRC javascript
  alert( Number("   123   ") ); // 123
  alert( Number("123z") );      // NaN (error reading a number at "z")
  alert( Number(true) );        // 1
  alert( Number(false) );       // 0
  alert( Boolean(1) );          // true
  alert( Boolean(0) );          // false
  alert( Boolean("hello") );    // true
  alert( Boolean("") );         // false
  alert( 1 + '2' );             // '12' (string to the right)
  alert( '1' + 2 );             // '12' (string to the left)
#+END_SRC

** Comparisons
#+BEGIN_SRC javascript
  alert( '2' > 1 );            // true, string '2' becomes a number 2
  alert( '01' == 1 );          // true, string '01' becomes a number 1
  alert( true == 1 );          // true
  alert( false == 0 );         // true
  alert( '' == false );        // true

  alert( 0 == false );         // true
  alert( 0 === false );        // false, because the types are different

  alert( null > 0 );           // false
  alert( null == 0 );          // false, null special rule applied
  alert( null >= 0 );          // true,  null is converted to 0

  alert( null == undefined );  // true
  alert( null === undefined ); // false
#+END_SRC

- Use ~===~ much more often than ~==~.
- ~null~ and ~undefined~ equal ~==~ each other and do not equal any other value.
- Donâ€™t use comparisons ~>=~ ~>~ ~<~ ~<=~ with a variable which may be ~null~ / ~undefined~

* How-to
** Parse URI
- https://gist.github.com/jlong/2428561

#+BEGIN_SRC javascript
  var parser = document.createElement('a');
  parser.href = "http://example.com:3000/pathname/?search=test#hash";

  parser.protocol; // => "http:"
  parser.hostname; // => "example.com"
  parser.port;     // => "3000"
  parser.pathname; // => "/pathname/"
  parser.search;   // => "?search=test"
  parser.hash;     // => "#hash"
  parser.host;     // => "example.com:3000"
#+END_SRC

** Put <script>
- https://javascript.info/hello-world
- http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html


- As a rule, only the simplest scripts are put into HTML. 
- The benefit of a separate file is that the browser will download it and then store in its cache.
- If ~src~ is set, the script content is ignored.
- The ~type~ and ~language~ attributes are not required.

#+BEGIN_SRC html
  <script src="path/to/script.js"></script>
#+END_SRC


[[file:_img/screenshot_2018-03-02_03-27-42.png]]

- If the script is modular and does not rely on any scripts then use ~async~.
- If the script relies upon or is relied upon by another script then use ~defer~.
- If the script is small and is relied upon by an ~async~ script then use an ~inline script~ with no attributes placed above the ~async~ scripts.

* Links
- https://javascript.info/ 

