#+TITLE: C#

* Table of Contents :TOC_1_gh:
 - [[#c-concepts][C# Concepts]]
 - [[#references][References]]
 - [[#use-cases][Use Cases]]

* C# Concepts
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/concepts

* References
** const
- https://msdn.microsoft.com/en-us/library/e6w8fe1b.aspx
- The initializer of a constant local or a constant field must be
  a constant expression that can be implicitly converted to the target type
- A constant expression is an expression that *can be fully evaluated at compile time*

** Properties
- https://msdn.microsoft.com/en-us/library/w86s7x04.aspx

#+BEGIN_SRC csharp
  public class Date
  {
      private int month = 7;  // Backing store

      public int Month
      {
          get
          {
              return month;
          }
          set
          {
              if ((value > 0) && (value < 13))
              {
                  month = value;
              }
          }
      }
    }
#+END_SRC

** readonly
- https://msdn.microsoft.com/en-us/library/acdd6hb7.aspx
- A ~const~ field can only be initialized at the declaration of the field.
- A ~readonly~ field can be initialized either at the declaration or in a constructor

- readonly *only works on class level*
Also as a consequence of const requiring a literal,
it's inherently static while a readonly field can be either static or instance.

** ToString
- https://msdn.microsoft.com/en-us/library/dwhawy9k.aspx

#+BEGIN_SRC csharp
  float score = 100.12345;
  Debug.Log(score.ToString("F2"));  # Fixed point, prints "100.12"
#+END_SRC

* Use Cases
** Can I make local vairalbes constant?
- http://stackoverflow.com/questions/2054761/how-to-declare-a-local-constant-in-c
- 
In short, No. Because:

- ~const~ only for expressions can be evaluated at compile time
- ~readonly~ only works on class level
** Can I handle inputs in FixedUpdate?
- http://answers.unity3d.com/questions/620981/input-and-applying-physics-update-or-fixedupdate.html

*General Rule*:
- Input should be in ~Update~,
  so that there is no chance of having a frame in which you miss the player input
  (which could happen if you placed it in ~FixedUpdate~)
- Physics calculations should be in ~FixedUpdate~,
  so that they are consistent and synchronised with the global physics timestep of the game
  (by default 50 times per second)
- Camera movement should be in ~LateUpdate~,
  so that it reflects the positions of any objects that may have moved in the current frame

** Increment operator: Post vs Pre?
- http://stackoverflow.com/questions/467322/is-there-any-performance-difference-between-i-and-i-in-c
- The semantic is not different from C ++
- Thanks to the compiler, In short, *there will be no difference* in the runtime for control variables
