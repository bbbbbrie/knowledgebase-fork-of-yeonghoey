#+TITLE: Brief Reviews

* Table of Contents                                                :TOC_1_gh:
 - [[#why-we-use-terraform-and-not-chef-puppet-ansible-saltstack-or-cloudformation][Why we use Terraform and not Chef, Puppet, Ansible, SaltStack, or CloudFormation]]
 - [[#goto-2016--seven-secrets-of-maintainable-codebases--adam-tornhill][GOTO 2016 • Seven Secrets of Maintainable Codebases • Adam Tornhill]]
 - [[#scala-collections-why-not][Scala Collections: Why Not?]]
 - [[#goto-2016--the-error-of-our-ways--kevlin-henney][GOTO 2016 • The Error of Our Ways • Kevlin Henney]]
 - [[#is-jquery-still-relevant][Is jQuery Still Relevant?]]
 - [[#how-to-work-at-google--example-codingengineering-interview][How to: Work at Google — Example Coding/Engineering Interview]]
 - [[#goto-2016--the-future-of-software-engineering--mary-poppendieck][GOTO 2016 • The Future of Software Engineering • Mary Poppendieck]]

* Why we use Terraform and not Chef, Puppet, Ansible, SaltStack, or CloudFormation
- [2016-12-29 Thu]
- https://blog.gruntwork.io/why-we-use-terraform-and-not-chef-puppet-ansible-saltstack-or-cloudformation-7989dad2865c#.7fsvtvl2v

[[file:img/screenshot_2016-12-29_09-31-51.png]]

** Configuration Management, Orchestration, Mutable, Immutable
The main use case of *Orchestration*-typed tools is provisioning servers.
Even though some of tools categorized as *Configuration Management* can do provision servers,
their main feature is modifying existing servers.

This relates to mutability of servers.  Tools categorized immutable can't mutate servers once they provisioned.
If there is an update, they should build a new image and provision new servers with it and then destroy old servers.

This way feels more simpler and can prevent [[http://www.continuitysoftware.com/blog/what-is-configuration-drift/][Configuration Drift]] problem.

** Packer
I got to know [[https://www.packer.io/][Packer]] for building AMIs.

* GOTO 2016 • Seven Secrets of Maintainable Codebases • Adam Tornhill
- [2017-01-02 Mon]
- https://youtu.be/0oDporwhToQ

He emphasizes to find out hotspots of the codebase, and concentrate efforts to improve them.
He shows many ways to find out hotspots.

[[file:img/screenshot_2017-01-02_09-27-53.png]]

[[file:img/screenshot_2017-01-02_09-30-27.png]]

[[file:img/screenshot_2017-01-02_22-11-52.png]]

* Scala Collections: Why Not?
- [2017-01-02 Mon]
- https://youtu.be/uiJycy6dFSQ
- Presented by a ~scala~ core contributor, Paul Phillips

He quit ~scala~ because he figured out that he couldn't make ~scala~ a language he desired for.

In the presentation, He shows some ugly part of ~scala~.

[[file:img/screenshot_2017-01-02_09-25-16.png]]

* GOTO 2016 • The Error of Our Ways • Kevlin Henney
- [2017-01-02 Mon]
- https://youtu.be/IiGXq3yY70o

[[file:img/screenshot_2017-01-02_22-12-15.png]]

[[file:img/screenshot_2017-01-02_22-21-14.png]]

I like his design of slides.

[[file:img/screenshot_2017-01-02_22-22-14.png]]

I'd like to like that book, even though it's a book on architecture(building).

[[file:img/screenshot_2017-01-02_22-25-53.png]]

His test code looks great.

[[file:img/screenshot_2017-01-02_22-26-22.png]]

Great organization

* Is jQuery Still Relevant?
- [2017-01-05 Thu]
- http://developer.telerik.com/featured/is-jquery-still-relevant/

- Good for prototyping, education
- No so good for production in a performance perspective
- imperative, even though most of ui things are declarative

This current state is caused by the advance of standards and better frameworks such as angular and react.
* How to: Work at Google — Example Coding/Engineering Interview
- [2017-01-22 Sun]
- https://youtu.be/XKu_SEDAykw

[[file:img/screenshot_2017-01-22_09-47-51.png]]

1. Clarification
2. Think out loud
3. Talk before you write
4. Test your solution
* GOTO 2016 • The Future of Software Engineering • Mary Poppendieck
- [2017-01-22 Sun]
- https://youtu.be/6K4ljFZWgW8

[[file:img/screenshot_2017-01-22_09-53-26.png]]
