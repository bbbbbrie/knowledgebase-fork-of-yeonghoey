#+TITLE: Vue.js

* Table of Contents :TOC_3_gh:
- [[#overview][Overview]]
- [[#syntax][Syntax]]
- [[#lifecycle][Lifecycle]]
  - [[#mounted][mounted]]
- [[#api][API]]
  - [[#new-vueoptions][new Vue(options)]]
- [[#components][Components]]
  - [[#global-components][Global Components]]
  - [[#local-components][Local Components]]
  - [[#composing-components][Composing Components]]
  - [[#props][props]]
- [[#single-file-components-vue][Single File Components (.vue)]]
- [[#router][Router]]
  - [[#router-link][<router-link>]]
  - [[#router-view][<router-view>]]
  - [[#history-mode][history mode]]
  - [[#matching-priority][Matching Priority]]
  - [[#the-route-object][The Route object]]
  - [[#route-meta-fields][Route Meta Fields]]
  - [[#navigation-guards][Navigation Guards]]
  - [[#passing-props][Passing Props]]
  - [[#programmatic-navigation][Programmatic Navigation]]
- [[#how-to][How-to]]
  - [[#configure-different-environment-variables-by-stage][Configure different environment variables by stage]]
  - [[#use-axios-with-vuejs][Use axios with Vue.js]]
- [[#links][Links]]

* Overview
:REFERENCES:
- https://vuejs.org/v2/guide/installation.html#CLI
:END:

#+BEGIN_SRC shell
  # install vue-cli
  $ npm install --global vue-cli
  # create a new project using the "webpack" template
  $ vue init webpack my-project
  # install dependencies and go!
  $ cd my-project
  $ npm run dev
#+END_SRC

#+BEGIN_QUOTE
Vue instances expose a number of useful instance properties and methods.
These properties and methods are prefixed with ~$~ to differentiate from proxied data properties. For example:
#+END_QUOTE

#+BEGIN_SRC javascript
  var data = { a: 1 }
  var vm = new Vue({
    el: '#example',
    data: data
  })
  vm.$data === data // -> true
  vm.$el === document.getElementById('example') // -> true
  // $watch is an instance method
  vm.$watch('a', function (newVal, oldVal) {
    // this callback will be called when `vm.a` changes
  })
#+END_SRC

* Syntax
- https://vuejs.org/v2/guide/syntax.html

In templates, the context of ~this~, which is the corresponding ~Vue~ object can be referred without ~this~.
#+BEGIN_SRC html
  <!-- msg is data property of the Vue object-->
  <span>Message: {{ msg }}</span>
#+END_SRC

* Lifecycle
- https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram

[[file:_img/screenshot_2018-03-07_11-48-43.png]]
[[file:_img/screenshot_2018-03-07_11-04-42.png]]

** mounted
- https://vuejs.org/v2/api/#mounted

* API
** new Vue(options)
- https://vuejs.org/v2/api/#Options-Data
  
* Components
- https://vuejs.org/v2/guide/components.html

** Global Components
#+BEGIN_SRC html
  <div id="example">
    <my-component></my-component>
  </div>
#+END_SRC

#+BEGIN_SRC javascript
  // register
  Vue.component('my-component', {
    template: '<div>A custom component!</div>'
  })

  // create a root instance
  new Vue({
    el: '#example'
  })
#+END_SRC

** Local Components
:REFERENCES:
- https://v1.vuejs.org/guide/components.html#Component-Option-Caveats
:END:

- ~data~ and ~el~ should be functions, otherwise the state of components is all shared.

#+BEGIN_SRC javascript
  var Child = {
    template: '<div>A custom component!</div>'
  }

  new Vue({
    // ...
    components: {
      // <my-component> will only be available in parent's template
      'my-component': Child
    }
  })
#+END_SRC

** Composing Components
[[file:_img/screenshot_2018-03-07_14-04-10.png]]

The API for a Vue component comes in three parts - ~props~, ~events~, and ~slots~:
- Props allow the external environment to pass data into the component
- Events allow the component to trigger side effects in the external environment
- Slots allow the external environment to compose the component with extra content.

#+BEGIN_SRC html
  <my-component
    :foo="baz"
    :bar="qux"
    @event-a="doThis"
    @event-b="doThat"
  >
    <img slot="icon" src="...">
    <p slot="main-text">Hello!</p>
  </my-component>
#+END_SRC

** props
- https://vuejs.org/v2/guide/components.html#Props
- A ~prop~ is a field on a componentâ€™s ~data~ that is expected to be passed down from its parent component.
- So, a ~prop~ can be referenced as ~this.<prop>~ or ~{{ <prop> }}~

* Single File Components (.vue)
- https://vuejs.org/v2/guide/single-file-components.html
* Router
- https://router.vuejs.org/en/

** <router-link>
- https://router.vuejs.org/en/api/router-link.html

Is preferred over ~<a href="...">~

#+BEGIN_SRC html
    <!-- literal string -->
    <router-link to="home">Home</router-link>
    <!-- renders to -->
    <a href="home">Home</a>

    <!-- javascript expression using `v-bind` -->
    <router-link v-bind:to="'home'">Home</router-link>

    <!-- Omitting `v-bind` is fine, just as binding any other prop -->
    <router-link :to="'home'">Home</router-link>

    <!-- same as above -->
    <router-link :to="{ path: 'home' }">Home</router-link>

    <!-- named route -->
    <router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>

    <!-- with query, resulting in `/register?plan=private` -->
    <router-link :to="{ path: 'register', query: { plan: 'private' }}">Register</router-link>
#+END_SRC

** <router-view>
- https://router.vuejs.org/en/api/router-view.html
- A functional component that renders the matched component for the given path.
- Can use mutliple routes by [[https://router.vuejs.org/en/essentials/named-views.html][named-views]]

** history mode
- https://router.vuejs.org/en/essentials/history-mode.html

#+BEGIN_SRC javascript
  const router = new VueRouter({
    mode: 'history',
    routes: [...]
  })
#+END_SRC

#+BEGIN_QUOTE
Since our app is a single page client side app, without a proper server configuration,
the users will get a 404 error if they access http://oursite.com/user/id directly in their browser.
#+END_QUOTE

** Matching Priority
- https://router.vuejs.org/en/essentials/dynamic-matching.html#matching-priority

#+BEGIN_QUOTE
Sometimes the same URL may be matched by multiple routes.
In such a case the matching priority is determined by the order of route definition:
*the earlier a route is defined, the higher priority it gets.*
#+END_QUOTE

** The Route object
- https://router.vuejs.org/en/api/route-object.html

#+BEGIN_SRC javascript

  // For pattern '/:user', '/yeonghoey?test=no"
  $route.params.user === 'yeonghoey';
  $route.query.test === 'no';
#+END_SRC

** Route Meta Fields
- https://router.vuejs.org/en/advanced/meta.html

** Navigation Guards
- https://router.vuejs.org/en/advanced/navigation-guards.html

** Passing Props
- https://router.vuejs.org/en/essentials/passing-props.html

** Programmatic Navigation
- https://router.vuejs.org/en/essentials/navigation.html

* How-to
** Configure different environment variables by stage
:REFERENCES:
- https://vuejs.org/v2/guide/deployment.html
- https://vuejs-templates.github.io/webpack/env.html
:END:

- Use ~webpack.DefinePlugin~ to configure ~process.env~

If you use vue template is easier to configure:
#+BEGIN_SRC js
  // config/prod.env.js
  module.exports = {
    NODE_ENV: '"production"',
    DEBUG_MODE: false,
    API_KEY: '"..."' // this is shared between all environments
  }

  // config/dev.env.js
  module.exports = merge(prodEnv, {
    NODE_ENV: '"development"',
    DEBUG_MODE: true // this overrides the DEBUG_MODE value of prod.env
  })

  // config/test.env.js
  module.exports = merge(devEnv, {
    NODE_ENV: '"testing"'
  })
#+END_SRC

#+BEGIN_SRC js
  Vue.config.productionTip = process.env.NODE_ENV === 'production'
#+END_SRC

** Use axios with Vue.js
- http://vuejs.kr/update/2017/01/04/http-request-with-axios/

#+BEGIN_SRC javascript
  import Vue from 'vue'
  import App from './App'
  import axios from 'axios'

  // Use axios globally
  Vue.prototype.$http = axios

  // Or, just import axios in each component
#+END_SRC

* Links
- [[https://codesandbox.io/s/o29j95wx9][Simple Todo App]]
