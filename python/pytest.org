#+TITLE: pytest

* Table of Contents :TOC_2_gh:
- [[#overview][Overview]]
  - [[#commandline-usage][Commandline Usage]]
- [[#reference][Reference]]
  - [[#approx][approx]]
  - [[#fixture][fixture]]
  - [[#mark][mark]]
  - [[#monkeypatch][monkeypatch]]
  - [[#raises-and-fail][raises and fail]]
- [[#terminology][Terminology]]
- [[#topics][Topics]]
  - [[#test-layouts][Test Layouts]]
- [[#how-to][How-to]]
- [[#links][Links]]
- [[#staging][Staging]]

* Overview
** Commandline Usage
- http://doc.pytest.org/en/latest/usage.html

#+BEGIN_SRC shell
  pytest --version   # shows where pytest was imported from
  pytest --fixtures  # show available builtin function arguments
  pytest -h | --help # show help on command line and config file options
  pytest -x          # stop after first failure
  pytest --maxfail=2 # stop after two failures
  pyt
  est test_mod.py # run tests in module
  pytest somepath    # run all tests below somepath

  # only run tests with names that match the # "string expression".
  # e.g. "MyClass and not method" # will select
  # TestMyClass.test_something but not TestMyClass.test_method_simple
  pytest -k stringexpr

  # only run tests that match the "node ID",
  pytest test_mod.py::test_func
  pytest test_mod.py::TestClass::test_method

  pytest --pyargs pkg # run all tests found below directory of pkg
#+END_SRC

#+BEGIN_SRC shell
  pytest --showlocals    # show local variables in tracebacks
  pytest -l              # show local variables (shortcut)

  pytest --tb=auto       # (default) 'long' tracebacks for the first and last
                         # entry, but 'short' style for the other entries
  pytest --tb=long       # exhaustive, informative traceback formatting
  pytest --tb=short      # shorter traceback format
  pytest --tb=line       # only one line per failure
  pytest --tb=native     # Python standard library formatting
  pytest --tb=no         # no traceback at all

  pytest --pdb           # drop into the PDB prompt
  pytest --durations=10  # To get a list of the slowest 10 test durations
#+END_SRC

* Reference
** approx
- https://docs.pytest.org/en/latest/builtin.html#pytest.approx

#+BEGIN_SRC python
  >>> from pytest import approx
  >>> 0.1 + 0.2 == approx(0.3)
  True
  >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))
  True
#+END_SRC

** fixture
- https://docs.pytest.org/en/latest/fixture.html
- https://docs.pytest.org/en/latest/builtin.html#_pytest.fixtures.fixture
- https://docs.pytest.org/en/latest/builtin.html#builtin-fixtures-function-arguments

#+BEGIN_SRC python
  # content of ./test_smtpsimple.py
  import pytest

  @pytest.fixture
  def smtp():
      import smtplib
      return smtplib.SMTP("smtp.gmail.com")

  def test_ehlo(smtp):
      response, msg = smtp.ehlo()
      assert response == 250
      assert 0 # for demo purposes
#+END_SRC

#+BEGIN_SRC python
  @pytest.fixture(scope="module")  # only be invoked once per test module
  def smtp():
      smtp = smtplib.SMTP("smtp.gmail.com")
      yield smtp  # provide the fixture value
      print("teardown smtp")
      smtp.close()


  # request example
  @pytest.fixture(scope="module")
  def smtp(request):
      server = getattr(request.module, "smtpserver", "smtp.gmail.com")
      smtp = smtplib.SMTP(server)
      yield smtp
      print ("finalizing %s (%s)" % (smtp, server))
      smtp.close()


  # Each test case will be executed for
  # each fixture based on each element of params
  @pytest.fixture(scope="module",
                  params=["smtp.gmail.com", "mail.python.org"])
  def smtp(request):
      smtp = smtplib.SMTP(request.param)
      yield smtp
      print ("finalizing %s" % smtp)
      smtp.close()


  # Set ids to inhence the readability of tests
  @pytest.fixture(params=[0, 1], ids=["spam", "ham"])
  def a(request):
      return request.param

  def test_a(a):
      pass

  # pytest prints out like:
  #   <Function 'test_a[spam]'>
  #   <Function 'test_a[ham]'>
#+END_SRC

** mark
- https://docs.pytest.org/en/latest/mark.html#mark
- https://docs.pytest.org/en/latest/parametrize.html#parametrizemark

#+BEGIN_SRC python
  import pytest
  @pytest.mark.parametrize("test_input,expected", [
      ("3+5", 8),
      ("2+4", 6),
      ("6*9", 42),
  ])
  def test_eval(test_input, expected):
      assert eval(test_input) == expected
#+END_SRC

** monkeypatch
- https://docs.pytest.org/en/latest/monkeypatch.html

#+BEGIN_SRC python
  import module
  def test_monkeypatch(monkeypatch):
      monkeypatch.setattr(module, 'name', 'value')
      monkeypatch.setattr('module.name', 'value')  # same as above
      monkeypatch.delattr('module.name')

      d = {}
      monkeypatch.setitem(d, 'key', 'value')
      monkeypatch.delitem(d, 'key')

      # environment variable
      monkeypatch.setenv('FOO', 'VALUE')
      monkeypatch.delenv('FOO')

      monkeypatch.syspath_prepend('./bin')
      monkeypatch.chdir('../')

      monkeypatch.undo()  # undo all changes
#+END_SRC

** raises and fail
- http://doc.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions
- http://stackoverflow.com/questions/20274987/how-to-use-pytest-to-check-that-error-is-not-raised

#+BEGIN_SRC python
  import pytest

  def test_zero_division():
      with pytest.raises(ZeroDivisionError):
          1 / 0
#+END_SRC

#+BEGIN_SRC python
  def test_foo3():
      try:
          foo(7)
      except MyError:
          pytest.fail("Unexpected MyError ..")
#+END_SRC

* Terminology
* Topics
** Test Layouts
- http://doc.pytest.org/en/latest/goodpractices.html

-----

Useful if you have many functional tests or for other reasons want to keep tests separate from actual application code (often a good idea):
#+BEGIN_EXAMPLE
  setup.py   # your setuptools Python package metadata
  mypkg/
      __init__.py
      appmodule.py
  tests/
      test_app.py
      ...
#+END_EXAMPLE

-----

Useful if you have direct relation between (unit-)test and application modules and want to distribute your tests along with your application:
#+BEGIN_EXAMPLE
  setup.py   # your setuptools Python package metadata
  mypkg/
      __init__.py
      appmodule.py
      ...
      test/
          test_app.py
          ...
#+END_EXAMPLE

-----

#+BEGIN_SRC shell
  pytest tests/test_app.py       # for external test dirs
  pytest mypkg/test/test_app.py  # for inlined test dirs
  pytest mypkg                   # run tests in all below test directories
  pytest                         # run all tests below current dir
#+END_SRC

* How-to
* Links
* Staging
