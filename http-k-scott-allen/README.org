#+TITLE: HTTP: What Every Web Developer Should Know About the Hypertext Transfer Protocol

* Table of Contents :TOC_2_gh:
 - [[#about-the-book][About the Book]]
 - [[#url][URL]]
 - [[#resource][Resource]]
 - [[#request][Request]]
 - [[#response][Response]]
 - [[#caching][Caching]]
 - [[#cookies][Cookies]]
 - [[#persistent-connections][Persistent Connections]]
 - [[#when-to-use-http-status-codes][When to Use HTTP Status Codes]]
 - [[#postredirectget][POST/Redirect/GET]]

* About the Book
[[file:img/screenshot_2017-01-31_00-00-27.png]]

About 3 months ago, I felt that I needed a some kind of understanding of HTTP.
I found this little book, which got a lot of positive reviews, on the Kindle bookstore.
Because this book is quite cheap ($ 3.29), I bought this book without hesitation.

Mostly I read this book during my commutes.  I really enjoyed it.

* URL
#+BEGIN_EXAMPLE
  <scheme>://<host>:<port>/<path>?<query>#<fragment>
#+END_EXAMPLE

#+BEGIN_QUOTE
In fact, these days many web sites try to avoid having any sort of real file name in their URL.
#+END_QUOTE

#+BEGIN_QUOTE
The fragment is not processed by the server.  The fragment is only used on the client and it identifies a
particular section of a resource
#+END_QUOTE

#+BEGIN_QUOTE
The path of a URL is case sensitive (...)
However, many web sites will try to make URLs behave as if they are case insensitive.
#+END_QUOTE

#+BEGIN_QUOTE
- A URL cannot restrict a client or a server to a specific type of technology.
- A URL cannot specify the representation of a specific resource
- A URL cannot say what a user wants to do with a resource
#+END_QUOTE

* Resource
#+BEGIN_QUOTE
[[https://www.ietf.org/rfc/rfc3986.txt][RFC 3986]] defines the safe characters for URLs (...) alphanumeric in US-ASCII and some special characters like ':', '/'
(..) unsafe characters must be percent encoded. (%20 for a space character)
#+END_QUOTE

#+BEGIN_QUOTE
To specify content types, HTTP relies on the Multipurpose Internet Mail Extensions([[https://en.wikipedia.org/wiki/MIME][MIME]]) standards.
#+END_QUOTE

#+BEGIN_QUOTE
With "text/html", The 'text' part is the primary media type, the 'html' is the media subtype.
#+END_QUOTE

#+BEGIN_QUOTE
For most browsers the file extension is the last place it will go to determine the actual content type.
(...) If the host does not provide a MIME type, IE will then scan the first 200 bytes of the response
trying to guess the content type.  if IE doesn't find a type and can't guess the type,
it will fall back on the file extension used in the request for the resource.
#+END_QUOTE

#+BEGIN_QUOTE
When a client makes an HTTP request to a URL, the client can specify the media types it will accept.
#+END_QUOTE

#+BEGIN_QUOTE
(...) the more you can think of a virtual resource as a real resource,
the better your application architecture and design will adhere to the strengths of HTTP.
#+END_QUOTE

* Request
#+BEGIN_EXAMPLE
  [method] [URL] [version]
  [headers]

  [body]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
GET http://yeonghoey.com HTTP/1.1
Host: yeonghoey.com
Accetp-Language: ko-KR
#+END_EXAMPLE

#+BEGIN_QUOTE
Everything but the host header is optional,
but when a header does appear it must obey the standards.
For Date, (..) has to follow [[https://www.ietf.org/rfc/rfc0822.txt][RFC 822]] format. (like ~Mon, 30 Jan 2017 09:34:31 -0000~)
#+END_QUOTE

#+BEGIN_EXAMPLE
  GET / HTTP/1.1
  Host: google.com
  Connection: keep-alive
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36
  X-Client-Data: (...)
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Accept-Encoding: gzip, deflate, sdch
  Accept-Language: ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4
  Cookie: (...)
#+END_EXAMPLE

#+BEGIN_QUOTE
The q value is always a number between 0 and 1.
The q value represents the quality value or "relative degree of preference" for a particular value.
The default is 1.0
#+END_QUOTE

* Response
#+BEGIN_EXAMPLE
  [version][status][reason]
  [headers]

  [body]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  Server: GitHub.com
  Date: Sun, 26 Feb 2017 23:01:05 GMT
  Content-Type: text/html; charset=utf-8
  Content-Length: 12
  Last-Modified: Sun, 26 Feb 2017 15:24:34 GMT
  Access-Control-Allow-Origin: *
  Expires: Sun, 26 Feb 2017 23:11:05 GMT
  Cache-Control: max-age=600
  Accept-Ranges: bytes
  X-GitHub-Request-Id: C0EF:231BE:19DC523:22EC802:58B35E31

  Hello world
#+END_EXAMPLE

|   Range | Category      |
|---------+---------------|
| 100-199 | Informational |
| 200-299 | Successful    |
| 300-399 | Redirection   |
| 400-499 | Client Error  |
| 500-599 | Server Error  |


| Code | Reason                | Description                       |
|------+-----------------------+-----------------------------------|
|  200 | OK                    |                                   |
|  301 | Moved Permanently     |                                   |
|  302 | Moved Temporarily     | Used in PRG pattern               |
|  304 | Not Modified          | Resource requested hasn't changed |
|  400 | Bad Request           |                                   |
|  403 | Forbidden             |                                   |
|  404 | Not Found             |                                   |
|  500 | Internal Server Error |                                   |
|  503 | Service Unavailable   |                                   |

* Caching
There are two types of caching, ~public~ and ~private~.

*Public cache* is generally on a proxy server, and is shared among multiple users.
On the other hand, *private cahce* is performed by the web browser, and saved on
the user's local disk.
If you use *Goole Chrome*, type ~about:cache~ to see the current list of private cache.

Responses of ~200~ from ~GET~ request is cacheable by default.
And there is ~Cache-control~ header for controlling caching policies:
#+BEGIN_EXAMPLE
  Cache-control: no-cache
  Cache-control: public
  Cache-control: private
  Cache-Control: max-age=<seconds>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  ...
  Cache-Control: max-age=600,public
#+END_EXAMPLE

There are also ~Last-Modified~, ~ETag~ headers, which can be used as a validator:
#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  ...
  Last-Modified: Fri, 01 Mar 2017 ...
  ETag: "abcdef-012-ghijklmnop3456"
#+END_EXAMPLE

* Cookies
- Cookies are defined by ~RFC6265~.
- ~4KB~ size limitation
- ~HttpOnly~ flag for preventing XSS(Cross Site Scripting)

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  Content-Type: text/html; charset=utf-8
  Set-Cookie:name=Yeongho&email=yeonghoey@gmail.com; HttpOnly
  ...
#+END_EXAMPLE

- *Persistent cookies* outlive a single browsing session.
- They need an ~expires~ value.

#+BEGIN_EXAMPLE
  Set-Cookie: name=value; expires=Money, ...
#+END_EXAMPLE

You can change the scope of a cookie by ~domain~ value.
These cookies are called ~third party cookies~, and they were
mostly used by advertisers for tracking users.
But now, most browsers disable this feature by default.
#+BEGIN_EXAMPLE
  Set-Cookie: name=value; domain=.yeonghoey.com; path=/http
#+END_EXAMPLE

Cookies *interfere with caching* because they can't be cached.


* Persistent Connections
#+BEGIN_QUOTE
A persistent connection stays open after the completion of one request-response transaction.
#+END_QUOTE

#+BEGIN_EXAMPLE
  HTTP/1.1 200 OK
  Content-Type: text/html; charset=utf-8
  Connection: close
  Content-Length: 17149
#+END_EXAMPLE

#+BEGIN_QUOTE
The ~Connection: close~ header is a signal to the browser that the connection will not be
persistent and the browser should close the connection immediately.
#+END_QUOTE
* When to Use HTTP Status Codes
In web applications which serve HTML pages,
invalid requests must almost always be handled by 200 OK for the user experiences.

In web services which serve data like JSON or XML, on the other hand,
invalid requests must be handled by various HTTP Status Codes,
because the web services work as APIs through HTTP.

* POST/Redirect/GET
#+BEGIN_QUOTE
Many web applications always try to leave the client view the result of a GET request.
After a user clicks a button to POST information to a server, the server will process the information
and respond with an HTTP redirect,
#+END_QUOTE

The practice of redirecting after a POST is common web design pattern known as the
POST/Redirect/GET ([[https://en.wikipedia.org/wiki/Post/Redirect/Get][PRG]]) pattern.

[[file:img/screenshot_2017-01-30_18-12-14.png]]
-----
[[file:img/screenshot_2017-01-30_18-16-17.png]]
