#+TITLE: dot

* Table of Contents :TOC_3_gh:
- [[#overview][Overview]]
- [[#reference][Reference]]
- [[#terminology][Terminology]]
- [[#topics][Topics]]
  - [[#language-syntax][Language Syntax]]
  - [[#subgraphs-and-clusters][Subgraphs and Clusters]]
- [[#how-to][How-to]]
- [[#links][Links]]
- [[#staging][Staging]]

* Overview

#+BEGIN_SRC dot :file img/overview-example.png :exports both
  digraph G {
    subgraph cluster0 {
      node [style=filled,color=white];
      style=filled;
      color=lightgrey;
      a0 -> a1 -> a2 -> a3;
      label = "process #1";
    }
    subgraph cluster1 {
      node [style=filled];
      b0 -> b1 -> b2 -> b3;
      label = "process #2";
      color=blue
    }
    start -> a0;
    start -> b0;
    a1 -> b3;
    b2 -> a3;
    a3 -> a0;
    a3 -> end;
    b3 -> end;
    start [shape=Mdiamond];
    end [shape=Msquare];
  }
#+END_SRC

#+RESULTS:
[[file:img/overview-example.png]]

* Reference
* Terminology
* Topics
** Language Syntax
- http://www.graphviz.org/doc/info/lang.html

#+BEGIN_EXAMPLE
  graph	:	[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}'
  stmt_list	:	[ stmt [ ';' ] stmt_list ]
  stmt	:	node_stmt
  |	edge_stmt
  |	attr_stmt
  |	ID '=' ID
  |	subgraph
  attr_stmt	:	(graph | node | edge) attr_list
  attr_list	:	'[' [ a_list ] ']' [ attr_list ]
  a_list	:	ID '=' ID [ (';' | ',') ] [ a_list ]
  edge_stmt	:	(node_id | subgraph) edgeRHS [ attr_list ]
  edgeRHS	:	edgeop (node_id | subgraph) [ edgeRHS ]
  node_stmt	:	node_id [ attr_list ]
  node_id	:	ID [ port ]
  port	:	':' ID [ ':' compass_pt ]
  |	':' compass_pt
  subgraph	:	[ subgraph [ ID ] ] '{' stmt_list '}'
  compass_pt	:	(n | ne | e | se | s | sw | w | nw | c | _)
#+END_EXAMPLE

- ~ID~ ::
  - Any string of alphabetic (~[a-zA-Z\200-\377]~) characters, underscores (~_~) or digits (~[0-9]~), not beginning with a digit;
  - a numeral ~[-]?(.[0-9]+ | [0-9]+(.[0-9]*)? )~;
  - any double-quoted string (~"..."~) possibly containing escaped quotes (~\"~);
  - an HTML string (~<...>~).

- keywords are case-independent ::
  ~node~, ~edge~, ~graph~, ~digraph~, ~subgraph~, and ~strict~

- edgeop :: 
  - ~--~ in undirected graphs(~graph~).
  - ~->~ in directed graphs(~digraph~)

- comments :: 
  - The language supports C++-style comments
  - ~/* */~ and ~//~.

- C prerprocessor ::
  - A line beginning with a ~#~ character is considered a line output from a C preprocessor
  - e.g., ~# 34~ to indicate ~line 34~, and discarded
  
** Subgraphs and Clusters
#+BEGIN_SRC dot
  A -> {B C}
#+END_SRC
is equivalent to

#+BEGIN_SRC dot
  A -> B
  A -> C
#+END_SRC

#+BEGIN_SRC dot
  // A, B and C should all be placed on the same rank 
  subgraph { 
    rank = same; A; B; C; 
  } 
#+END_SRC

- If *the name of the subgraph begins with* ~cluster~, Graphviz notes the subgraph as a special cluster subgraph. 

* How-to
* Links
- http://www.graphviz.org/pdf/dotguide.pdf
- http://www.graphviz.org/doc/info/attrs.html
- http://www.graphviz.org/doc/info/shapes.html
  
* Staging
