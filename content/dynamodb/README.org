#+TITLE: AWS DynamoDB

* Overview
[[file:_img/screenshot_2017-04-21_12-12-59.png]]

- Tables like ~People~, ~Music~
- Items like each ~{..}~ in Tables
- Attributes like ~PersonID~, ~LastName~, ~Artist~, ~Price~, and so on
- Primary keys are bolded attributes like ~PersonID~, ~(Artist, SongTitle)~
- Primary key can be either a single ~partition key~ or a pair of ~partition key~ and ~sort key~
- Primary key attribute must be a scalar(like ~string~, ~number~, etc)
- Secondary Indexes like ~GenreAlbumTitle~
- Secondary Indexes can be either ~Global~ or ~Local~
- ~Global~ consists of a ~partition key~ and a ~sort key~ that can be different from those on the table
- ~Local~ has the same ~partition key~ as the table but a different ~sort key~

:REFERENCES:
- http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html
:END:

* API
#+BEGIN_EXAMPLE
  CreateTable
  DescribeTable
  ListTables
  UpdateTable
  DeleteTable
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  PutItem
  BatchWriteItem (up to 25 items)
  GetItem        (uses primary key)
  BatchGetItem   (up to 100 items)
  Query
  Scan
  UpdateItem
  DeleteItem
  BatchWriteItem
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  ListStreams
  DescribeStream
  GetShardIterator
  GetRecords
#+END_EXAMPLE

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.API.html
:END:

* Partitions
[[file:_img/screenshot_2018-03-11_14-55-25.png]]

- DynamoDB calculates the hash value of ~Dog~, yielding the partition in which these items are stored.
- DynamoDB then scans the sort key attribute values until it finds ~Fido~.

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.Partitions.html
:END:

* Secondary Indexes
- This requires separated capacity management from those of its base table

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html
:END:

** GSI
- A global secondary index is considered "global" because queries on the index can span all of the data in the base table, across all partitions.
- When you create an index, *you specify which attributes will be copied, or projected*, from the base table to the index.

[[file:_img/screenshot_2018-03-10_20-34-48.png]]

- DynamoDB maintains indexes automatically.
- In this case, ~Artist~ and ~SongTitle~ are projected attributes
- Global secondary indexes are composed of partitions.

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GuidelinesForGSI.html
:END:

*** Attribute Projections
- A projection is the set of attributes that is copied from a table into a secondary index.
- There are three options for attribute projections:
  - ~KEYS_ONLY~
  - ~INCLUDE~
  - ~ALL~

** LSI
- A local secondary index is "local" in the sense that every partition of a local secondary index is scoped to a base table partition that has the same partition key value.

* Operations
#+BEGIN_SRC json
  "GetItem"
  {
      TableName: "Music",
      Key: {
          "Artist": "No One You Know",
          "SongTitle": "Call Me Today"
      }
  }

  "Query"
  {
      TableName: "Music",
      KeyConditionExpression: "Artist = :a and SongTitle = :t",
      ExpressionAttributeValues: {
          ":a": "No One You Know",
          ":t": "Call Me Today"
      }
  }

  "Query using Index"
  {
      TableName: "Music",
      IndexName: "GenreAndPriceIndex",
      KeyConditionExpression: "Genre = :genre",
      ExpressionAttributeValues: {
          ":genre": "Rock"
      },
  };
#+END_SRC

* Working with Items
- ~#a~ :: an expression attribute name, mostly used with projection expressions
- ~:a~ :: an expression attribute value, mostly used with update expressions

Preventing Overwrites by using condition-expression
#+BEGIN_SRC shell
  aws dynamodb put-item \
      --table-name ProductCatalog \
      --item file://item.json \
      --condition-expression "attribute_not_exists(Id)"
#+END_SRC

References for operators like ~attribute_not_exists~ are [[https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html][here]].

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html
:END:

* Attributes
- Also, the following characters have special meaning in DynamoDB: ~#~ (hash) and ~:~ (colon).
- Although DynamoDB allows you to use these reserved words and special characters for names, we recommend that you avoid

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeDefinition.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html
:END:

* Consistency
- DynamoDB supports eventually consistent and strongly consistent reads.

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html
:END:

* Capacity & Throughput
- Read unit is 4 KB per second (twice when using eventually consistent reads, not strongly consistent reads)
- Write unit is 1 KB per second
- Each unit performs one request per second(if the operation requires the size less than the unit size)
  . In other words, with 5 read capacity unit, you can handle 5 requests per second.
- Options for determining throughput: Auto scaling, Provisioned, Reserved

#+BEGIN_QUOTE
Queryâ€”reads multiple items that have the same partition key value.
*All of the items returned are treated as a single read operation*, where DynamoDB computes the total size of all items and then rounds up to the next 4 KB boundary.
For example, suppose your query returns 10 items whose combined size is 40.8 KB.
DynamoDB rounds the item size for the operation to 44 KB. If a query returns 1500 items of 64 bytes each, the cumulative size is 96 KB.
#+END_QUOTE

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ProvisionedThroughput.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/CapacityUnitCalculations.html
:END:

* Backup & Restore
:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BackupRestore.html
:END:

* Pricing
- Based on WCU(Write Capacity Unit), RCU(Read Capacity Unit), and Storage

* Access and Permissions Based on IAM
#+BEGIN_QUOTE
If you use ~dynamodb:Attributes~, you must specify the names of all of the primary key and index key attributes for the table and any secondary indexes that are listed the in the policy.
Otherwise, DynamoDB can't use these key attributes to perform the requested action.
#+END_QUOTE

:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/specifying-conditions.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/api-permissions-reference.html
:END:

* Limits
:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html
:END:

* Best Practices
:REFERENCES:
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BestPractices.html
:END:
