#+TITLE: Serverless

* Overview
#+BEGIN_SRC shell
  npm install -g serverless
#+END_SRC

You can use Serverless CLI with ~serverless~ or ~sls~ command.

Subcommands:
#+BEGIN_EXAMPLE
  config ........................ Configure Serverless
  config credentials ............ Configures a new provider profile for the Serverless Framework
  create ........................ Create new Serverless service
  deploy ........................ Deploy a Serverless service
  deploy function ............... Deploy a single function from the service
  deploy list ................... List deployed version of your Serverless Service
  deploy list functions ......... List all the deployed functions and their versions
  info .......................... Display information about the service
  install ....................... Install a Serverless service from GitHub or a plugin from the Serverless registry
  invoke ........................ Invoke a deployed function
  invoke local .................. Invoke function locally
  logs .......................... Output the logs of a deployed function
  metrics ....................... Show metrics for a specific function
  package ....................... Packages a Serverless service
#+END_EXAMPLE

* Reference
** serverless.yml
:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
:END:

** serverless-domain-manager
:REFERENCES:
- https://github.com/amplify-education/serverless-domain-manager#installing
:END:

** serverless-dynamodb-local
#+BEGIN_SRC shell
  sls dynamodb install
  sls dynamodb start
  sls dynamodb remove
#+END_SRC

- https://github.com/99xt/serverless-dynamodb-local#seeding-sls-dynamodb-seed
#+BEGIN_SRC yaml
  dynamodb:
    start:
      seed: true

    seed:
      <category>:
        sources:
          - table: domain-widgets
            sources: [./data.json]
#+END_SRC

#+BEGIN_SRC json
  [
    {
      "id": "John",
      "name": "Doe",
    }
  ]
#+END_SRC

:REFERENCES:
- https://github.com/99xt/serverless-dynamodb-local
:END:

** serverless-python-requirements
- ~dockerizePip: non-linux~ for making Lambda compatible packaging
- Supports ~Pipenv~ by default

:REFERENCES:
- https://github.com/UnitedIncome/serverless-python-requirements
- https://serverless.com/blog/serverless-python-packaging/
:END:

** serverless-wsgi
#+BEGIN_SRC yaml
  service: example

  provider:
    name: aws
    runtime: python2.7

  plugins:
    - serverless-wsgi

  functions:
    api:
      handler: wsgi.handler
      events:
        - http: ANY /
        - http: ANY {proxy+}

  custom:
    wsgi:
      app: api.app
#+END_SRC

#+BEGIN_SRC shell
  # For development
  sls wsgi serve
#+END_SRC

- ~IS_OFFLINE~ envvar is included when serving ([[https://github.com/logandk/serverless-wsgi/blob/master/CHANGELOG.md#141][1.4.1]])

#+BEGIN_EXAMPLE
   ,* Running on http://localhost:5000/ (Press CTRL+C to quit)
   ,* Restarting with stat
   ,* Debugger is active!
   ,* Debugger PIN: 109-942-480
#+END_EXAMPLE

:REFERENCES:
- https://github.com/logandk/serverless-wsgi
:END:

* Topics
** Services
#+BEGIN_EXAMPLE
  users/
    serverless.yml # Contains 4 functions that do Users CRUD operations and the Users database
  posts/
    serverless.yml # Contains 4 functions that do Posts CRUD operations and the Posts database
  comments/
    serverless.yml # Contains 4 functions that do Comments CRUD operations and the Comments database
#+END_EXAMPLE

#+BEGIN_SRC shell
  serverless create --template aws-nodejs --path myService
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/services/
:END:

*** serverless.yml
- Declare a Serverless service
- Define one or more functions in the service
- Define the provider the service will be deployed to (and the runtime if provided)
- Define any custom plugins to be used
- Define events that trigger each function to execute (e.g. HTTP requests)
- Define a set of resources (e.g. 1 DynamoDB table) required by the functions in this service
- Allow events listed in the events section to automatically create the resources required for the event upon deployment
- Allow flexible configuration using Serverless Variables
** Functions
- Your functions can either inherit their settings from the ~provider~ property.

#+BEGIN_SRC yaml
  functions:
    functionOne:
      handler: handler.functionOne
      description: optional description for your Lambda
    functionTwo:
      handler: handler.functionTwo
    functionThree:
      handler: handler.functionThree
#+END_SRC

#+BEGIN_SRC yaml
  provider:
    name: aws
    environment:
      SYSTEM_NAME: mySystem
      TABLE_NAME: tableName1

  functions:
    hello:
      handler: handler.users
      environment:
        TABLE_NAME: tableName2 # overrides
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/functions/
:END:

** Events
:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/events/
:END:

** Resources
- Based on [[https://github.com/serverless/serverless/blob/master/lib/plugins/aws/lib/naming.js#L48][getStackName]], though not explicitly documented, it seems that every stack is related to ~stage~
- ~!<Function>~ syntax is not supported

- https://github.com/serverless/serverless/issues/3184#issuecomment-304671007
#+BEGIN_SRC yaml
  Resource:
          "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table..."
  provider:
    name: aws
    runtime: nodejs6.10
    # Allow for cf "AWS::" variables, see https://serverless.com/framework/docs/providers/aws/guide/variables#using-custom-variable-syntax
    variableSyntax: "\\${(?!AWS::)([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/resources/
- https://github.com/serverless/serverless/issues/3184
- https://github.com/serverless/serverless/issues/3545
:END:

** Deploying
#+BEGIN_SRC shell
  serverless deploy --verbose                      # uses AWS CloudFormation Stack Update
  serverless deploy function --function myFunction # updates AWS Lambda only
  serverless deploy --stage production --region eu-central-1
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/deploying/
:END:

** Variables
#+BEGIN_SRC yaml
  x: ${env:NAME}                 # Environment Variables
  x: ${env:NAME, 'temp'}         # default
  x: ${opt:stage}                # CLI Options
  x: ${cf:service.name}          # CloudFormation
  x: ${self:custom.stage}        # self reference
  x: ${s3:bucket/key}            # value(content) of the s3 object
  x: ${file(../config.yml):name} # js, json or yaml, can be json object or equivalents
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/variables/
:END:

** Packaging
#+BEGIN_SRC shell
  serverless package
  serverless package --package my-artifacts
#+END_SRC

Serverless will *run the glob patterns in order.*
At first it will apply the globs defined in ~exclude~. After that it'll add all the globs from ~include~. 
#+BEGIN_SRC yaml
  package:
    exclude:
      - src/**
    include:
      - src/function/handler.js
#+END_SRC

- https://github.com/serverless/serverless/blob/master/lib/plugins/package/lib/packageService.js
#+BEGIN_SRC javascript
  module.exports = {
    defaultExcludes: [
      '.git/**',
      '.gitignore',
      '.DS_Store',
      'npm-debug.log',
      'serverless.yml',
      'serverless.yaml',
      'serverless.json',
      'serverless.js',
      '.serverless/**',
      '.serverless_plugins/**',
    ],
#+END_SRC

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/packaging/
:END:

** IAM
#+BEGIN_QUOTE
As those statements will be merged into the CloudFormation template, you can use ~Join~, ~Ref~ or any other CloudFormation method or feature.
#+END_QUOTE

:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/guide/iam/
:END:

*** Additional Policies on the generated policies
- provider.iamRoleStatements  :: Define additional policies in the CloudFormation format
- provider.iamManagedPolicies :: Additional policies managed outside of serverless

#+BEGIN_SRC yaml
  service: new-service

  provider:
    name: aws
    iamRoleStatements:
      -  Effect: "Allow"
         Action:
           - "s3:ListBucket"
         Resource:
           Fn::Join:
             - ""
             - - "arn:aws:s3:::"
               - Ref: ServerlessDeploymentBucket
      -  Effect: "Allow"
         Action:
           - "s3:PutObject"
         Resource:
           Fn::Join:
             - ""
             - - "arn:aws:s3:::"
               - Ref: ServerlessDeploymentBucket
               - "/*"
    iamManagedPolicies:
        - 'some:aws:arn:xxx:*:*'
        - 'someOther:aws:arn:xxx:*:*'
        - { 'Fn::Join': [':', ['arn:aws:iam:', { Ref: 'AWSAccountId' }, 'some/path']] }
#+END_SRC
*** Completely custom roles
#+BEGIN_QUOTE
Using this way means that ~iamRoleStatements~ you've defined on the provider level won't be applied anymore.
Furthermore, you need to provide the corresponding permissions for your Lambdas logs and stream events.
#+END_QUOTE

#+BEGIN_SRC yaml
  provider:
    name: aws
    # declare one of the following...
    role: myDefaultRole                                                  # must validly reference a role defined in the service
    role: arn:aws:iam::0123456789:role//my/default/path/roleInMyAccount  # must validly reference a role defined in your account
    role:                                                                # must validly resolve to the ARN of a role you have the rights to use
      Fn::GetAtt:
        - myRole
        - Arn
#+END_SRC

** Plugins
:REFERENCES:
- https://github.com/serverless/plugins
:END:

* How-to
** Deploy Flask App
#+BEGIN_SRC shell
  npm init -f
  npm install --save-dev serverless-wsgi serverless-python-requirements
#+END_SRC

:REFERENCES:
- https://serverless.com/blog/serverless-python-packaging/
- https://serverless.com/blog/flask-python-rest-api-serverless-lambda-dynamodb/
:END:

** Set Custom Domains
#+BEGIN_SRC shell
  $ npm install serverless-domain-manager --save-dev
#+END_SRC

#+BEGIN_SRC yaml
  plugins:
    - serverless-domain-manager

  custom:
    customDomain:
      domainName: <registered_domain_name>
      basePath: ''
      stage: ${self:provider.stage}
      createRoute53Record: true
#+END_SRC

#+BEGIN_QUOTE
If you're using a certificate that doesn't exactly match your domain name, such as a wildcard certificate,
you'll need to specify the certificate name with a ~certificateName~ property under ~customDomain~.
#+END_QUOTE

#+BEGIN_SRC shell
  $ sls create_domain --stage <stage>
#+END_SRC

- https://stackoverflow.com/questions/46956660/how-to-set-up-different-domains-based-on-stage-with-serverless-domain-manager-pl

#+BEGIN_SRC yaml
  custom:
    domain:
      dev: MY_DEV_DOMAIN
      prod: MY_PROD_DOMAIN
    customDomain:
      basePath: ''
      domainName: ${self:custom.domain.${opt:stage}}
      stage: ${opt:stage}
      createRoute53Record: true
#+END_SRC

:REFERENCES:
- https://serverless.com/blog/serverless-api-gateway-domain/
:END:

** Enable CORS
:REFERENCES:
- https://serverless.com/framework/docs/providers/aws/events/apigateway/#enabling-cors
:END:

#+BEGIN_SRC yaml
  functions:
    hello:
      handler: handler.hello
      events:
        - http:
            path: hello
            method: get
            cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: false
#+END_SRC

#+BEGIN_QUOTE
If you want to use CORS with the lambda-proxy integration, You should handle CORS within your application.
#+END_QUOTE

[[https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html][API Gateway says]]:
#+BEGIN_QUOTE
For Lambda or HTTP proxy integrations, you can still set up the required ~OPTIONS~ response headers in API Gateway. However, you must rely on the back end to return the ~Access-Control-Allow-Origin~ headers because the integration response is disabled for the proxy integration.
#+END_QUOTE
