#+TITLE: C#

* Table of Contents :TOC_2_gh:
 - [[#c-net-and-mono][C#, .Net and Mono]]
 - [[#references][References]]
   - [[#accessibility-levels][Accessibility Levels]]
   - [[#array][Array]]
   - [[#arraylist][ArrayList]]
   - [[#as][as]]
   - [[#attributes][Attributes]]
   - [[#const][const]]
   - [[#delegate][delegate]]
   - [[#event][event]]
   - [[#lambda-expressions][Lambda Expressions]]
   - [[#listt][List<T>]]
   - [[#method-parameter-keywords][Method Parameter Keywords]]
   - [[#named-and-optional-arguments][Named and Optional Arguments]]
   - [[#null][null]]
   - [[#nullablet][Nullable<T>]]
   - [[#properties][Properties]]
   - [[#readonly][readonly]]
   - [[#static-class-and-static-class-members][Static Class and Static Class Members]]
   - [[#this][this]]
   - [[#tostring][ToString]]
   - [[#using][using]]
 - [[#compiler-options][Compiler Options]]
   - [[#define][define]]
 - [[#details][Details]]
   - [[#value-types-and-reference-types][Value Types and Reference Types]]
   - [[#abstract-virtual-override-sealed][abstract, virtual, override, sealed]]
   - [[#c-coding-conventions][C# Coding Conventions]]
   - [[#creating-delegates-manually-vs-using-actionfunc-delegates][Creating delegates manually vs using Action/Func delegates]]
 - [[#use-cases][Use Cases]]
   - [[#can-i-make-local-vairalbes-constant][Can I make local vairalbes constant?]]
   - [[#can-i-handle-inputs-in-fixedupdate][Can I handle inputs in FixedUpdate?]]
   - [[#gaussian-random][Gaussian Random]]
   - [[#general-structure-of-a-c-program][General Structure of a C# Program]]
   - [[#increment-operator-post-vs-pre][Increment operator: Post vs Pre?]]
   - [[#main-method][Main Method]]

* C#, .Net and Mono
- https://en.wikipedia.org/wiki/C_Sharp_(programming_language)
- http://www.mono-project.com/docs/about-mono/compatibility/

[[file:img/screenshot_2017-05-02_22-07-04.png]]

* References
** Accessibility Levels
- https://msdn.microsoft.com/en-us/library/ba0a1yw2.aspx

[[file:img/screenshot_2017-05-03_11-10-34.png]]

[[file:img/screenshot_2017-05-03_11-12-35.png]]

** Array
- http://csharp.net-informations.com/collection/csharp-array.htm

#+BEGIN_SRC csharp
  int[] array = new int[] {10, 20, 30, 40};
  for (int i = 0; i < array.Length; i++)
  {
      MessageBox.Show (array[i]);
  }

  Array.Resize(ref array, 3);

  foreach (int element in array)
  {
      Console.WriteLine(element);
  }
#+END_SRC

** ArrayList
- http://stackoverflow.com/questions/2309694/arraylist-vs-list-in-c-sharp
- ~ArrayList~ simply stores object references.
- ~ArrayList~ belongs to the days that C# didn't have generics. It's deprecated in favor of ~List<T>~

** as
- https://msdn.microsoft.com/en-us/library/cscsdfbt.aspx
- if the conversion isn't possible, ~as~ returns null instead of raising an exception.

#+BEGIN_SRC csharp
  class ClassA { }
  class ClassB { }

  class MainClass
  {
      static void Main()
      {
          object[] objArray = new object[6];
          objArray[0] = new ClassA();
          objArray[1] = new ClassB();
          objArray[2] = "hello";
          objArray[3] = 123;
          objArray[4] = 123.4;
          objArray[5] = null;

          for (int i = 0; i < objArray.Length; ++i)
          {
              string s = objArray[i] as string;
              Console.Write("{0}:", i);
              if (s != null)
              {
                  Console.WriteLine("'" + s + "'");
              }
              else
              {
                  Console.WriteLine("not a string");
              }
          }
      }
  }
  /*
    Output:
    0:not a string
    1:not a string
    2:'hello'
    3:not a string
    4:not a string
    5:not a string
  ,*/
#+END_SRC
** Attributes
- http://stackoverflow.com/questions/20346/what-are-attributes-in-net
- Metadata. Data about your objects/methods/properties.
- Attributes are used heavily with reflection.

#+BEGIN_SRC csharp
  [AttributeUsage(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]
  public class SortOrderAttribute : Attribute
  {
      public int SortOrder { get; set; }

      public SortOrderAttribute(int sortOrder)
      {
          this.SortOrder = sortOrder;
      }
  }

  [SortOrder(23)]
  public class MyClass
  {
      public MyClass()
      {
      }
  }

  public class MyInvestigatorClass
  {
      public void InvestigateTheAttribute()
      {
          Type type = typeof(MyClass);
          object[] attributes = type.GetCustomAttributes(typeof(SortOrderAttribute), true);
          SortOrderAttribute attribute = attributes[0] as SortOrderAttribute;
          int sortOrder = attribute.SortOrder;
          // Do something with sortOrder
      }
  }
#+END_SRC

** const
- https://msdn.microsoft.com/en-us/library/e6w8fe1b.aspx
- The initializer of a constant local or a constant field must be
  a constant expression that can be implicitly converted to the target type
- A constant expression is an expression that *can be fully evaluated at compile time*
** delegate
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/delegate
- A ~delegate~ is a reference type that can be used to encapsulate a named or an anonymous method.

#+BEGIN_SRC csharp
  // Declare delegate -- defines required signature:
  delegate double MathAction(double num);

  class DelegateTest
  {
      // Regular method that matches signature:
      static double Double(double input)
      {
          return input * 2;
      }

      static void Main()
      {
          // Instantiate delegate with named method:
          MathAction ma = Double;

          // Invoke delegate ma:
          double multByTwo = ma(4.5);
          Console.WriteLine("multByTwo: {0}", multByTwo);

          // Instantiate delegate with anonymous method:
          MathAction ma2 = delegate(double input)
              {
                  return input * input;
              };

          double square = ma2(5);
          Console.WriteLine("square: {0}", square);

          // Instantiate delegate with lambda expression
          MathAction ma3 = s => s * s * s;
          double cube = ma3(4.375);

          Console.WriteLine("cube: {0}", cube);
      }
      // Output:
      // multByTwo: 9
      // square: 25
      // cube: 83.740234375
  }
#+END_SRC

** event
- http://csharpindepth.com/Articles/Chapter2/Events.aspx
- Think of events a bit like properties.
- Events are pairs of methods
#+BEGIN_SRC csharp
  using System;

  class Test
  {
      public event EventHandler MyEvent
      {
          add
          {
              Console.WriteLine ("add operation");
          }

          remove
          {
              Console.WriteLine ("remove operation");
          }
      }

      static void Main()
      {
          Test t = new Test();

          t.MyEvent += new EventHandler (t.DoNothing);
          t.MyEvent -= null;
      }

      void DoNothing (object sender, EventArgs e)
      {
      }
  }
#+END_SRC
- A public ~delegate~ variable
- A ~delegate~ variable backed by a property
- A ~delegate~ variable with ~AddXXXHandler~ and ~RemoveXXXHandler~ methods

** Lambda Expressions
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/lambda-expressions
- http://stackoverflow.com/questions/10538924/c-sharp-style-lambdas-or-x

#+BEGIN_SRC csharp
  (x, y) => x == y;
  (int x, string s) => s.Length > x;
  () => SomeMethod();

  delegate void TestDelegate(string s);
  TestDelegate del = n => { string s = n + " World";
                            Console.WriteLine(s); };

  // Many C# developers use _ to indicate that the parameter isn't going to be used
  _ => 10
#+END_SRC

** List<T>
- https://msdn.microsoft.com/en-us/library/6sh2ey19.aspx
- http://csharp.net-informations.com/collection/list.htm

#+BEGIN_SRC csharp
  List<string> colors = new List<string>();
  colors.Add("Red");
  colors.Add("Blue");
  colors.Add("Green");

  colors.Count;


  foreach (string color in colors)
  {
      MessageBox.Show(color);
  }

  for (int i = 0; i < colors.Count; i++)
  {
      MessageBox.Show(colors[i]);
  }

  colors.Insert(1, "violet");
  colors.Sort();
  colors.Remove("violet");


  if (colors.Contains("Blue"))
  {
      MessageBox.Show("Blue color exist in the list");
  }

  string[] strArr = new string[3];
  strArr[0] = "Red";
  strArr[1] = "Blue";
  strArr[2] = "Green";
  //here to copy array to List
  List<string> arrlist = new List<string>(strArr);

  string combindedString = string.Join(",", colors);

  string[] arr = colors.ToArray();

  arrlist.Clear ();
#+END_SRC

** Method Parameter Keywords
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/method-parameters
*** params
- To specify a method parameter that takes a variable number of arguments
- Can send a comma-separated list of arguments of the type
- Can send an array of arguments of the type
- Can send no arguments

#+BEGIN_SRC csharp
  public class MyClass
  {
      public static void UseParams(params int[] list)
      {
          for (int i = 0; i < list.Length; i++)
          {
              Console.Write(list[i] + " ");
          }
          Console.WriteLine();
      }

      public static void UseParams2(params object[] list)
      {
          for (int i = 0; i < list.Length; i++)
          {
              Console.Write(list[i] + " ");
          }
          Console.WriteLine();
      }

      static void Main()
      {
          UseParams(1, 2, 3, 4);
          UseParams2(1, 'a', "test");
          UseParams2();

          int[] myIntArray = { 5, 6, 7, 8, 9 };
          UseParams(myIntArray);

          object[] myObjArray = { 2, 'b', "test", "again" };
          UseParams2(myObjArray);

          // The following call does not cause an error, but the entire
          // integer array becomes the first element of the params array.
          UseParams2(myIntArray);
      }
  }
  /*
  Output:
      1 2 3 4
      1 a test

      5 6 7 8 9
      2 b test again
      System.Int32[]
  ,*/
#+END_SRC

*** ref
- The ~ref~ keyword causes an argument to be passed by reference, not by value
- To use a ~ref~ parameter, both the method definition and the calling method must explicitly use the ~ref~ keyword

#+BEGIN_SRC csharp
  class RefExample
  {
      static void Method(ref int i)
      {
          i = i + 44;
      }

      static void Main()
      {
          int val = 1;
          Method(ref val); // call with 'ref'
          Console.WriteLine(val);
          // Output: 45
      }
  }


  class CS0663_Example
  {
      // Compiler error CS0663: "Cannot define overloaded
      // methods that differ only on ref and out".
      public void SampleMethod(out int i) { }
      public void SampleMethod(ref int i) { }
  }

  class RefOverloadExample
   {
       // However, overloading can be done
       // when one method has a ref or out parameter and the other has a value parameter
       public void SampleMethod(int i) { }
       public void SampleMethod(ref int i) { }
  }
#+END_SRC

*** out
- It is like the ~ref~ keyword, except that ~ref~ requires that the variable be initialized before it is passed.

#+BEGIN_SRC csharp
  class OutReturnExample
  {
      static void Method(out int i, out string s1, out string s2)
      {
          i = 44;
          s1 = "I've been returned";
          s2 = null;
      }

      static void Main()
      {
          int value;
          string str1, str2;
          Method(out value, out str1, out str2);
          // value is now 44
          // str1 is now "I've been returned"
          // str2 is (still) null;
      }
  }
#+END_SRC

** Named and Optional Arguments
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/named-and-optional-arguments
- A default value must be one of the following types of expressions:
  - a constant expression;
  - an expression of the form ~new ValType()~, where ~ValType~ is a value type, such as an ~enum~ or a ~struct~;
  - an expression of the form ~default(ValType)~, where ~ValType~ is a value type.
  - ~default~ keyword, which will return ~null~ for reference types and ~zero~ for numeric value types.

#+BEGIN_SRC csharp
  namespace OptionalNamespace
  {
      class OptionalExample
      {
          static void Main(string[] args)
          {
              ExampleClass anExample = new ExampleClass();
              anExample.ExampleMethod(1, "One", 1);
              anExample.ExampleMethod(2, "Two");
              anExample.ExampleMethod(3);

              ExampleClass anotherExample = new ExampleClass("Provided name");
              anotherExample.ExampleMethod(1, "One", 1);
              anotherExample.ExampleMethod(2, "Two");
              anotherExample.ExampleMethod(3);

              // You can use a named parameter
              anExample.ExampleMethod(3, optionalint: 4);
          }
      }

      class ExampleClass
      {
          private string _name;

          public ExampleClass(string name = "Default name")
          {
              _name = name;
          }

          public void ExampleMethod(int required, string optionalstr = "default string", int optionalint = 10)
          {
              Console.WriteLine("{0}: {1}, {2}, and {3}.", _name, required, optionalstr, optionalint);
          }
      }

      // The output from this example is the following:
      // Default name: 1, One, and 1.
      // Default name: 2, Two, and 10.
      // Default name: 3, default string, and 10.
      // Provided name: 1, One, and 1.
      // Provided name: 2, Two, and 10.
      // Provided name: 3, default string, and 10.
      // Default name: 3, default string, and 4.
  }
#+END_SRC

** null
- https://msdn.microsoft.com/en-us/library/dn986595.aspx

#+BEGIN_SRC csharp
  // Traditional null check
  var handler = this.PropertyChanged;
  if (handler != null)
      handler(…)

  // equivalent to, and thread-safe thanks to compiler
  PropertyChanged?.Invoke(e)
#+END_SRC

#+BEGIN_SRC csharp
  int? length = customers?.Length; // null if customers is null
  Customer first = customers?[0];  // null if customers is null
  int? count = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null
#+END_SRC

#+BEGIN_SRC csharp
  // The ?? operator is called the null-coalescing operator.
  // It returns the left-hand operand if the operand is not null;
  // otherwise it returns the right hand operand.

  int? x = null;
  // Set y to the value of x if x is NOT null; otherwise,
  // if x = null, set y to -1.
  int y = x ?? -1;
#+END_SRC

** Nullable<T>
- https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx
- The syntax ~T?~ is shorthand for ~Nullable<T>~,
  where ~T~ is a value type. The two forms are interchangeable.

** Properties
- https://msdn.microsoft.com/en-us/library/w86s7x04.aspx
- https://msdn.microsoft.com/en-us/library/bb384054.aspx
- ~set~ accessor resembles a method whose return type is ~void~.
  It uses an implicit parameter called ~value~

#+BEGIN_SRC csharp
  public class Date
  {
      private int month = 7;  // Backing store

      public int Month
      {
          get
          {
              return month;
          }
          set
          {
              if ((value > 0) && (value < 13))
              {
                  month = value;
              }
          }
      }
    }
#+END_SRC

#+BEGIN_SRC csharp
  // From C# 3.0
  // Auto-Impl Properties for trivial get and set
  public double TotalPurchases { get; set; }
  public string Name { get; set; }
  public int CustomerID { get; set; }

  // From C# 6.0
  public string FirstName { get; set; } = "Jane";
#+END_SRC

** readonly
- https://msdn.microsoft.com/en-us/library/acdd6hb7.aspx
- A ~const~ field can only be initialized at the declaration of the field.
- A ~readonly~ field can be initialized either at the declaration or in a constructor

- readonly *only works on class level*
Also as a consequence of const requiring a literal,
it's inherently static while a readonly field can be either static or instance.

#+BEGIN_SRC csharp
  class Age
  {
      readonly int _year;
      Age(int year)
      {
          _year = year;
      }

      void ChangeYear()
      {
          //_year = 1967; // Compile error if uncommented.
      }
    }
#+END_SRC

** Static Class and Static Class Members
- https://msdn.microsoft.com/en-us/library/79b3xss3.aspx
- https://msdn.microsoft.com/en-us/library/k9x6w0hc.aspx
- http://stackoverflow.com/questions/3681055/is-the-order-of-static-class-initialization-in-c-sharp-deterministic
- C# does not support static local variables
- Static members are initialized
  - before the static member is accessed for the first time
  - before the static constructor, if there is one, is called

#+BEGIN_SRC csharp
  public class Automobile
  {
      public static int NumberOfWheels = 4;
      public static int SizeOfGasTank
      {
          get
          {
              return 15;
          }
      }
      public static void Drive() { }
      public static event EventType RunOutOfGas;

      // Other non-static fields and properties...
  }
#+END_SRC

#+BEGIN_SRC csharp
  class SimpleClass
  {
      // Static variable that must be initialized at run time.
      static readonly long baseline;

      // Static constructor is called at most one time, before any
      // instance constructor is invoked or member is accessed.
      static SimpleClass()
      {
          baseline = DateTime.Now.Ticks;
      }
    }
#+END_SRC
** this
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/this
- To qualify members hidden by similar names
- To pass an object as a parameter to other methods
- To declare indexers

#+BEGIN_SRC csharp
  public Employee(string name, string alias)
  {
      // Use this to qualify the fields, name and alias:
      this.name = name;
      this.alias = alias;
  }

  CalcTax(this);

  public int this[int param]
  {
      get { return array[param]; }
      set { array[param] = value; }
  }
#+END_SRC

** ToString
- https://msdn.microsoft.com/en-us/library/dwhawy9k.aspx

#+BEGIN_SRC csharp
  float score = 100.12345;
  Debug.Log(score.ToString("F2"));  # Fixed point, prints "100.12"
#+END_SRC

** using
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/using-directive

#+BEGIN_SRC csharp
  // To allow the use of types in a namespace so that you do not have to qualify
  using System.Text;

  // To allow you to access static members of a type without having to qualify
  using static System.Math;

  // To create an alias for a namespace or a type. This is called a using alias directive
  using Project = PC.MyCompany.Project;
#+END_SRC

* Compiler Options
** define
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-options/define-compiler-option
- http://stackoverflow.com/questions/709463/c-sharp-macro-definitions-in-preprocessor
- *Only conditional compilation* and pragmas are supported.

#+BEGIN_SRC csharp
  // preprocessor_define.cs
  // compile with: /define:xx
  // or uncomment the next line
  // #define xx
  using System;
  public class Test
  {
      public static void Main()
      {
          #if (xx)
              Console.WriteLine("xx defined");
          #else
              Console.WriteLine("xx not defined");
          #endif
      }
  }
#+END_SRC

* Details
** Value Types and Reference Types
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/types/index
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/reference-tables-for-types 

[[file:img/screenshot_2017-05-06_11-00-02.png]]

- There are two categories of value types: ~struct~ and ~enum~.
- Assigning one value type variable to another *copies the contained value*.
- Unlike with reference types, you *cannot derive a new type from a value type*.
- However, like reference types, ~structs~ can implement interfaces.
- A type that is defined as a ~class~, ~delegate~, ~array~, or ~interface~ is a reference type.
** abstract, virtual, override, sealed
- https://msdn.microsoft.com/en-us/library/6tcf2h8w.aspx
- http://stackoverflow.com/questions/6162451/the-difference-between-virtual-override-new-and-sealed-override
- http://www.dotnetfunda.com/articles/show/2961/abstract-sealed-and-override-modifiers-in-csharp


- The ~abstract~ modifier indicates that the thing being modified has a missing or incomplete implementation.
- The ~virtual~ keyword is used to modify a method, property, indexer, or event declaration and allow for it to be overridden in a derived class.
- By default, methods are *non-virtual*. You *cannot override* a non-virtual method.
- The ~override~ modifier is required to extend or modify the ~abstract~ or ~virtual~ implementation of an inherited method, property, indexer, or event.
- You can use ~sealed~ to prevent them from overriding specific ~virtual~ methods or properties.

[[file:img/screenshot_2017-05-05_16-52-37.png]]

** C# Coding Conventions
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/inside-a-program/coding-conventions

#+BEGIN_SRC csharp
  var currentPerformanceCounterCategory = new System.Diagnostics.
      PerformanceCounterCategory();

  // Use the + operator to concatenate short strings, as shown in the following code.
  string displayName = nameList[n].LastName + ", " + nameList[n].FirstName;

  // To append strings in loops, especially when you are working with large amounts of text, use a StringBuilder object.
  var phrase = "lalalalalalalalalalalalalalalalalalalalalalalalalalalalalala";
  var manyPhrases = new StringBuilder();
  for (var i = 0; i < 10000; i++)
   {
       manyPhrases.Append(phrase);
  }


  // Use implicit typing for local variables when the type of the variable is obvious from the right side of the assignment,
  // or when the precise type is not important.
  var var1 = "This is clearly a string.";
  var var2 = 27;
  var var3 = Convert.ToInt32(Console.ReadLine());


  // Preferred syntax. Note that you cannot use var here instead of string[].
  string[] vowels1 = { "a", "e", "i", "o", "u" };
  // If you use explicit instantiation, you can use var.
  var vowels2 = new string[] { "a", "e", "i", "o", "u" };
  // If you specify an array size, you must initialize the elements one at a time.
  var vowels3 = new string[5];
  vowels3[0] = "a";
  vowels3[1] = "e";


  // This try-finally statement only calls Dispose in the finally block.
  Font font1 = new Font("Arial", 10.0f);
  try
  {
       byte charset = font1.GdiCharSet;
  }
  finally
  {
       if (font1 != null)
       {
           ((IDisposable)font1).Dispose();
       }
  }
  // You can do the same thing with a using statement.
  using (Font font2 = new Font("Arial", 10.0f))
  {
       byte charset = font2.GdiCharSet;
  }


  Console.Write("Enter a dividend: ");
  var dividend = Convert.ToInt32(Console.ReadLine());
  Console.Write("Enter a divisor: ");
  var divisor = Convert.ToInt32(Console.ReadLine());
  // If the divisor is 0, the second clause in the following condition
  // causes a run-time error. The && operator short circuits when the
  // first expression is false. That is, it does not evaluate the
  // second expression. The & operator evaluates both, and causes 
  // a run-time error when divisor is 0.
  if ((divisor != 0) && (dividend / divisor > 0))
   {
       Console.WriteLine("Quotient: {0}", dividend / divisor);
   }
   else
   {
       Console.WriteLine("Attempted division by 0 ends up here.");
  }


  // Call static members by using the class name: ClassName.StaticMember.
  // This practice makes code more readable by making static access clear.
  // Do not qualify a static member defined in a base class with the name of a derived class.
  // While that code compiles, the code readability is misleading, and the code may break in the future
  // if you add a static member with the same name to the derived class.
#+END_SRC

** Creating delegates manually vs using Action/Func delegates
- http://stackoverflow.com/questions/4482613/creating-delegates-manually-vs-using-action-func-delegates
- The advantage is clarity. By giving the type an explicit name it is more clear to the reader what it does.
- You can specify ~ref~ / ~out~ parameters unlike the other two generic delegates.
- Can have optional parameters.

#+BEGIN_SRC csharp
  private delegate double ChangeListAction(string param1, int number);
  private Func<string, int, double> ChangeListAction;
  private Action<string,int> ChangeListAction;
#+END_SRC

* Use Cases
** Can I make local vairalbes constant?
- http://stackoverflow.com/questions/2054761/how-to-declare-a-local-constant-in-c
-
In short, No. Because:

- ~const~ only for expressions can be evaluated at compile time
- ~readonly~ only works on class level
** Can I handle inputs in FixedUpdate?
- http://answers.unity3d.com/questions/620981/input-and-applying-physics-update-or-fixedupdate.html

*General Rule*:
- Input should be in ~Update~,
  so that there is no chance of having a frame in which you miss the player input
  (which could happen if you placed it in ~FixedUpdate~)
- Physics calculations should be in ~FixedUpdate~,
  so that they are consistent and synchronised with the global physics timestep of the game
  (by default 50 times per second)
- Camera movement should be in ~LateUpdate~,
  so that it reflects the positions of any objects that may have moved in the current frame

** Gaussian Random
- https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform

#+BEGIN_SRC csharp
  // Box–Muller transform
  // https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
  public static float GaussianRandom(float mu, float sigma)
  {
		  float u1 = Random.Range(0.0f, 1.0f);
		  float u2 = Random.Range(0.0f, 1.0f);
		  float z0 = Mathf.Sqrt(-2.0f * Mathf.Log(u1)) * Mathf.Cos((2.0f * Mathf.PI) * u2);
		  return (mu + sigma * z0);
	  }
#+END_SRC

** General Structure of a C# Program
#+BEGIN_SRC csharp
  // A skeleton of a C# program 
  using System;
  namespace YourNamespace
  {
      class YourClass
      {
      }

      struct YourStruct
      {
      }

      interface IYourInterface 
      {
      }

      delegate int YourDelegate();

      enum YourEnum 
      {
      }

      namespace YourNestedNamespace
      {
          struct YourStruct 
          {
          }
      }

      class YourMainClass
      {
          static void Main(string[] args) 
          {
              //Your program starts here...
          }
      }
  }
#+END_SRC

** Increment operator: Post vs Pre?
- http://stackoverflow.com/questions/467322/is-there-any-performance-difference-between-i-and-i-in-c
- The semantic is not different from C ++
- Thanks to the compiler, In short, *there will be no difference* in the runtime for control variables

** Main Method
- https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/main-and-command-args/index
#+BEGIN_SRC csharp
  static void Main()
  {
      //...
  }
  static int Main()
  {
      //...
      return 0;
  }
  static void Main(string[] args)
  {
      //...
  }
  static int Main(string[] args)
  {
      //...
      return 0;
  }
#+END_SRC
