#+TITLE: Special applications: Face recognition & Neural style transfer

* Face Recognition
** What is face recognition?
[[file:img/screenshot_2017-11-26_08-31-57.png]]

[[file:img/screenshot_2017-11-26_08-32-25.png]]

[[file:img/screenshot_2017-11-26_08-35-08.png]]
** One Shot Learning
[[file:img/screenshot_2017-11-26_08-39-41.png]]

[[file:img/screenshot_2017-11-26_08-42-10.png]]
** Siamese Network
[[file:img/screenshot_2017-11-26_08-49-49.png]]

[[file:img/screenshot_2017-11-26_08-51-45.png]]

** Triplet Loss
[[file:img/screenshot_2017-11-26_08-59-06.png]]

[[file:img/screenshot_2017-11-26_09-03-04.png]]

[[file:img/screenshot_2017-11-26_09-06-28.png]]

[[file:img/screenshot_2017-11-26_09-08-18.png]]
** Face Verification and Binary Classification
[[file:img/screenshot_2017-11-26_09-17-56.png]]

[[file:img/screenshot_2017-11-26_09-18-34.png]]

* Neural Style Transfer
** What is neural style transfer?
[[file:img/screenshot_2017-11-26_09-35-52.png]]
** What are deep ConvNets learning?
[[file:img/screenshot_2017-11-27_11-36-35.png]]

[[file:img/screenshot_2017-11-27_11-36-53.png]]
** Cost Function
[[file:img/screenshot_2017-11-27_11-39-46.png]]

[[file:img/screenshot_2017-11-27_11-41-10.png]]

** Content Cost Function
[[file:img/screenshot_2017-11-27_11-48-54.png]]

** Style Cost Function
[[file:img/screenshot_2017-11-27_11-52-05.png]]

[[file:img/screenshot_2017-11-27_11-54-36.png]]

[[file:img/screenshot_2017-11-27_12-03-42.png]]

[[file:img/screenshot_2017-11-27_12-04-05.png]]
** 1D and 3D Generalizations
[[file:img/screenshot_2017-11-27_12-09-44.png]]

[[file:img/screenshot_2017-11-27_12-11-36.png]]

[[file:img/screenshot_2017-11-27_12-14-13.png]]
* Programming assignments
** Art generation with Neural Style Transfer
[[file:img/screenshot_2017-11-28_10-02-25.png]]

[[file:img/screenshot_2017-11-28_10-05-44.png]]

[[file:img/screenshot_2017-11-28_10-07-12.png]]

[[file:img/screenshot_2017-11-28_10-07-59.png]]

[[file:img/screenshot_2017-11-28_10-10-14.png]]

[[file:img/screenshot_2017-11-28_10-22-01.png]]

[[file:img/screenshot_2017-11-28_10-22-34.png]]

[[file:img/screenshot_2017-11-28_10-36-04.png]]

[[file:img/screenshot_2017-11-28_10-44-41.png]]

[[file:img/screenshot_2017-11-28_10-45-51.png]]

[[file:img/screenshot_2017-11-28_10-46-11.png]]

[[file:img/screenshot_2017-11-28_10-48-33.png]]

[[file:img/screenshot_2017-11-28_10-48-50.png]]

[[file:img/screenshot_2017-11-28_11-04-19.png]]

[[file:img/screenshot_2017-11-28_11-13-21.png]]

[[file:img/screenshot_2017-11-28_11-14-38.png]]

[[file:img/screenshot_2017-11-28_11-42-32.png]]

- https://www.tensorflow.org/versions/r1.3/api_docs/python/tf/transpose
- https://www.tensorflow.org/versions/r1.2/api_docs/python/tf/reshape
- https://www.tensorflow.org/api_docs/python/tf/reduce_sum
- https://www.tensorflow.org/api_docs/python/tf/matmul
- https://www.tensorflow.org/api_docs/python/tf/tensordot

#+BEGIN_SRC python
  def compute_content_cost(a_C, a_G):
      """
      Computes the content cost

      Arguments:
      a_C -- tensor of dimension (1, n_H, n_W, n_C), hidden layer activations representing content of the image C
      a_G -- tensor of dimension (1, n_H, n_W, n_C), hidden layer activations representing content of the image G

      Returns:
      J_content -- scalar that you compute using equation 1 above.
      """
      return J_content

  def gram_matrix(A):
      """
      Argument:
      A -- matrix of shape (n_C, n_H*n_W)

      Returns:
      GA -- Gram matrix of A, of shape (n_C, n_C)
      """
      return GA

  def compute_layer_style_cost(a_S, a_G):
      """
      Arguments:
      a_S -- tensor of dimension (1, n_H, n_W, n_C), hidden layer activations representing style of the image S
      a_G -- tensor of dimension (1, n_H, n_W, n_C), hidden layer activations representing style of the image G

      Returns:
      J_style_layer -- tensor representing a scalar value, style cost defined above by equation (2)
      """
      return J_style_layer

  def compute_style_cost(model, STYLE_LAYERS):
      """
      Computes the overall style cost from several chosen layers

      Arguments:
      model -- our tensorflow model
      STYLE_LAYERS -- A python list containing:
                          - the names of the layers we would like to extract style from
                          - a coefficient for each of them

      Returns:
      J_style -- tensor representing a scalar value, style cost defined above by equation (2)
      """
      return J_style

  def total_cost(J_content, J_style, alpha = 10, beta = 40):
      """
      Computes the total cost function

      Arguments:
      J_content -- content cost coded above
      J_style -- style cost coded above
      alpha -- hyperparameter weighting the importance of the content cost
      beta -- hyperparameter weighting the importance of the style cost

      Returns:
      J -- total cost as defined by the formula above.
      """
      return J

  def model_nn(sess, input_image, num_iterations = 200):
      return generated_image
#+END_SRC

** Face Recognition for the Happy House
[[file:img/screenshot_2017-11-29_09-00-41.png]]

[[file:img/screenshot_2017-11-29_09-03-14.png]]

[[file:img/screenshot_2017-11-29_09-03-36.png]]

[[file:img/screenshot_2017-11-29_09-05-42.png]]

[[file:img/screenshot_2017-11-29_09-06-52.png]]

[[file:img/screenshot_2017-11-29_09-23-00.png]]

[[file:img/screenshot_2017-11-29_09-23-14.png]]

[[file:img/screenshot_2017-11-29_09-23-32.png]]

[[file:img/screenshot_2017-11-29_09-30-08.png]]

[[file:img/screenshot_2017-11-29_09-38-37.png]]

- https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.linalg.norm.html 

#+BEGIN_SRC python
  def triplet_loss(y_true, y_pred, alpha = 0.2):
      """
      Implementation of the triplet loss as defined by formula (3)

      Arguments:
      y_true -- true labels, required when you define a loss in Keras, you don't need it in this function.
      y_pred -- python list containing three objects:
              anchor -- the encodings for the anchor images, of shape (None, 128)
              positive -- the encodings for the positive images, of shape (None, 128)
              negative -- the encodings for the negative images, of shape (None, 128)

      Returns:
      loss -- real number, value of the loss
      """
      return loss

  def verify(image_path, identity, database, model):
      """
      Function that verifies if the person on the "image_path" image is "identity".

      Arguments:
      image_path -- path to an image
      identity -- string, name of the person you'd like to verify the identity. Has to be a resident of the Happy house.
      database -- python dictionary mapping names of allowed people's names (strings) to their encodings (vectors).
      model -- your Inception model instance in Keras

      Returns:
      dist -- distance between the image_path and the image of "identity" in the database.
      door_open -- True, if the door should open. False otherwise.
      """
      return dist, door_open

  def who_is_it(image_path, database, model):
      """
      Implements face recognition for the happy house by finding who is the person on the image_path image.

      Arguments:
      image_path -- path to an image
      database -- database containing image encodings along with the name of the person on the image
      model -- your Inception model instance in Keras

      Returns:
      min_dist -- the minimum distance between image_path encoding and the encodings from the database
      identity -- string, the name prediction for the person on image_path
      """
      return min_dist, identity
#+END_SRC
