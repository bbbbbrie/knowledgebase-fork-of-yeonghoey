#+TITLE: SQLAlachemy

* Table of Contents :TOC_2_gh:
- [[#reference][Reference]]
  - [[#column][Column]]
  - [[#declarative-api][Declarative API]]
  - [[#functions][functions]]
  - [[#query][Query]]
  - [[#session][Session]]
  - [[#hybrid_property][hybrid_property]]
- [[#how-to][How-to]]
  - [[#prefix-all-tables-under-a-declarative_base][Prefix all tables under a declarative_base]]

* Reference
** Column
#+BEGIN_SRC python
  # use a type with arguments
  Column('data', String(50))
  # use no arguments
  Column('level', Integer)

  # turn on autoincrement for this column despite
  # the ForeignKey()
  Column('id', ForeignKey('other.id'),
              primary_key=True, autoincrement='ignore_fk')
#+END_SRC

- [[http://docs.sqlalchemy.org/en/latest/orm/mapping_columns.html#sqlalchemy.orm.column_property][column_property]] can be used for column level options:
#+BEGIN_SRC python
  class User(Base):
      __tablename__ = 'user'
      id = Column(Integer, primary_key=True)
      firstname = Column(String(50))
      lastname = Column(String(50))
      fullname = column_property(firstname + " " + lastname)
#+END_SRC

- ~Column~ can have positional arugments of [[http://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.schema.SchemaItem][SchemaItem]], such as ~Constraint~, ~ForeignKey~, ~Sequence~, etc.

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.schema.Column
- http://docs.sqlalchemy.org/en/latest/core/type_basics.html
:END:

*** String, Text
#+BEGIN_SRC python
  # will assume that input is to be passed as Python unicode objects,
  # and results returned as Python unicode objects
  # There is an engine configuration which sets this flag to True by default.
  String(convert_unicode=True)
#+END_SRC

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/core/type_basics.html#sqlalchemy.types.String.params.convert_unicode
- http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.convert_unicode 
:END:

*** Float
- For mysql, set ~precision~ to ~53~ cause to make the column as double

#+BEGIN_SRC python
  # Use float with double precision
  Column(Float(precision=53))
#+END_SRC

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/core/type_basics.html#sqlalchemy.types.Float
- https://dev.mysql.com/doc/refman/5.5/en/floating-point-types.html
:END:

** Declarative API
#+BEGIN_SRC python
  from sqlalchemy import Column, Integer, String
  from sqlalchemy.ext.declarative import declarative_base

  Base = declarative_base()

  class SomeClass(Base):
      __tablename__ = 'some_table'
      id = Column(Integer, primary_key=True)
      name =  Column(String(50))
#+END_SRC

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/index.html
- http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/api.html
- http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/basic_use.html
:END:

** functions
:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/core/tutorial.html#functions
:END:

** Query
:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/orm/query.html#sqlalchemy.orm.query.Query
:END:

** Session
~Session.begin()~ returns a ~SessionTransaction~ object:
#+BEGIN_SRC python
  class SessionTransaction(object):
      # ...
      def __enter__(self):
          return self

      def __exit__(self, type, value, traceback):
          self._assert_active(deactive_ok=True, prepared_ok=True)
          if self.session.transaction is None:
              return
          if type is None:
              try:
                  self.commit()
              except:
                  with util.safe_reraise():
                      self.rollback()
          else:
              self.rollback()
#+END_SRC

So, we can use like this (code from [[http://docs.sqlalchemy.org/en/rel_0_9/orm/session_transaction.html#autocommit-mode][here]]):
#+BEGIN_SRC python
  Session = sessionmaker(bind=engine, autocommit=True)
  session = Session()
  with session.begin():
      item1 = session.query(Item).get(1)
      item2 = session.query(Item).get(2)
      item1.foo = 'bar'
      item2.bar = 'foo'
#+END_SRC

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/orm/session_basics.html
- http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session
:END:

*** Session.begin()
- [[https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/session.py#L793][Session.begin]]
- [[https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/session.py#L556][SessionTransaction.__exit__]]
- Returns ~SessionTransaction~. It implements ~__exit__~, which calls ~session.commit~ when levaving the block.

*** Session.commit() vs Session.flush()
- A Session object is basically an ongoing transaction of changes to a database
- ~session.commit()~ commits (persists) those changes to the database.
- ~flush()~ is always called as part of a call to ~commit()~

#+BEGIN_SRC python
  s = Session()

  # The Foo('A') object has been added to the session.
  # It has not been committed to the database yet,
  # but is returned as part of a query.
  s.add(Foo('A'))
  print s.query(Foo).all()  # Output: [<Foo('A')>]
  s.commit()


  s2 = Session()
  s2.autoflush = False

  # The Foo('B') object is *not* returned as part of this query
  # because it hasn't been flushed yet.
  s2.add(Foo('B'))
  print s2.query(Foo).all()  # Output: [<Foo('A')>]


  # Now, Foo('B') is in the same state as Foo('A') was above.
  s2.flush()
  print s2.query(Foo).all()  # Output: [<Foo('A')>, <Foo('B')>]


  # Foo('B') has not been committed, and rolling
  # back the session's transaction removes it from the session.
  s2.rollback()
  print s2.query(Foo).all()  # Output: [<Foo('A')>]
#+END_SRC

:REFERENCES:
- http://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit
:END:

*** scoped_session
- ~scoped_session~ is used for ensuring one ~session~ for a scope
- ~scoped_session~ uses ~sessionmaker~
- For ~scopefunc~, ~threading.local()~ is used by default.
- Can be used like ~Session~, by [[https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/scoping.py#L151][dynamic things]].

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/orm/contextual.html
- https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/scoping.py#L30
:END:

** hybrid_property
#+BEGIN_SRC python
  from sqlalchemy.ext.hybrid import hybrid_property

  class User(Base):
      __tablename__ = 'user'
      id = Column(Integer, primary_key=True)
      firstname = Column(String(50))
      lastname = Column(String(50))

      @hybrid_property
      def fullname(self):
          return self.firstname + " " + self.lastname
#+END_SRC

Can use ~fullname~ like other columns:
#+BEGIN_SRC python
  some_user = session.query(User).filter(User.fullname == "John Smith").first()
#+END_SRC

:REFERENCES:
- http://docs.sqlalchemy.org/en/latest/orm/mapped_sql_expr.html
:END:

* How-to
** Prefix all tables under a declarative_base
- Overriding both ~cls.__tablename__~ along with ~dict_['__tablename__']~ is required
  because ~DeclarativeMeta~ refers the attributes of ~cls~ during initialization.

#+BEGIN_SRC python
  from sqlalchemy.ext.declarative.api import DeclarativeMeta


  class PrefixerMeta(DeclarativeMeta):

      def __init__(cls, name, bases, dict_):
          if '__tablename__' in dict_:
              cls.__tablename__ = dict_['__tablename__'] = \
                  'someprefix_' + dict_['__tablename__']

          return super().__init__(name, bases, dict_)

  Base = declarative_base(metaclass=PrefixerMeta)


  class SomeModel(Base):

      __tablename__ = 'sometable'
      ...
#+END_SRC

:REFERENCES:
- https://stackoverflow.com/questions/38245145/how-to-set-common-prefix-for-all-tables-in-sqlalchemy
:END:
