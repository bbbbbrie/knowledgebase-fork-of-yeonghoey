#+TITLE: flask

* Table of Contents :TOC_2_gh:
- [[#overview][Overview]]
- [[#reference][Reference]]
  - [[#config][Config]]
  - [[#flask][Flask]]
  - [[#g][g]]
  - [[#open_resource][open_resource]]
  - [[#request][request]]
  - [[#multidict][MultiDict]]
  - [[#url_for][url_for]]
- [[#topics][Topics]]
  - [[#application-context][Application Context]]
  - [[#commands][Commands]]
  - [[#cookies][Cookies]]
  - [[#http-methods][HTTP Methods]]
  - [[#message-flashing][Message Flashing]]
  - [[#redirects-and-erros][Redirects and Erros]]
  - [[#request-context][Request Context]]
  - [[#responses][Responses]]
  - [[#routing][Routing]]
  - [[#sessions][Sessions]]
  - [[#signals][Signals]]
  - [[#static-files][Static Files]]
  - [[#templates][Templates]]
- [[#patterns][Patterns]]
  - [[#application-factories][Application Factories]]

* Overview
#+BEGIN_EXAMPLE
  /<project-root>
    /<package>
      __init__.py
      /static
      /templates
    setup.py
    MANIFEST.in
#+END_EXAMPLE

~setup.py~:
#+BEGIN_SRC python
  from setuptools import setup

  setup(
      name='flaskr',
      packages=['flaskr'],
      include_package_data=True,
      install_requires=[
          'flask',
      ],
      setup_requires=[
          'pytest-runner',
      ],
      tests_require=[
          'pytest',
      ],
  )
#+END_SRC
* Reference
** Config
- http://flask.pocoo.org/docs/0.12/api/#flask.Config
- http://flask.pocoo.org/docs/0.12/config/#builtin-configuration-values
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.default_config


- Load from a ~.cfg~ file
- The configuration files themselves are actual Python files.
- Only values in uppercase are actually stored in the config object later on.
#+BEGIN_SRC python
  app.config.from_pyfile('yourconfig.cfg')
#+END_SRC

- Load from the current python module
#+BEGIN_SRC python
  # Only uppercase keys are added to the config
  DEBUG = True
  SECRET_KEY = 'development key'
  app.config.from_object(__name__)
#+END_SRC

- Load from a file of which name is specified by env
#+BEGIN_SRC python
  export YOURAPPLICATION_SETTINGS='/path/to/config/file'
  app.config.from_envvar('YOURAPPLICATION_SETTINGS')
#+END_SRC

Certain configuration values are also forwarded to the Flask object so you can read and write them from there:
#+BEGIN_SRC python
  app = Flask(__name__)
  app.config['DEBUG'] = True

  # equivalent to above
  app.debug = True
#+END_SRC

#+BEGIN_SRC python
  app = Flask(__name__)
  app.config.from_object('yourapplication.default_settings')
  app.config.from_envvar('YOURAPPLICATION_SETTINGS') # overrides
#+END_SRC

** Flask
- http://flask.pocoo.org/docs/0.12/api/#application-object

#+BEGIN_SRC python
  app = Flask('yourapplication')
  app = Flask(__name__.split('.')[0])
#+END_SRC

#+BEGIN_QUOTE
If you are using a single module, ~name~ is always the correct value.
If you however are using a package, it’s usually recommended to *hardcode the name of your package* there.
#+END_QUOTE

** g
- http://flask.pocoo.org/docs/0.12/api/#flask.g

#+BEGIN_QUOTE
Stored on the application context and no longer on the request context which means it becomes available
if only the application context is bound and not yet a request. 
#+END_QUOTE
** open_resource
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.open_resource

#+BEGIN_EXAMPLE
  /myapplication.py
  /schema.sql
  /static
      /style.css
  /templates
      /layout.html
      /index.html
#+END_EXAMPLE

- http://flask.pocoo.org/docs/0.12/api/#flask.Flask
#+BEGIN_QUOTE
The name of the package is used to resolve resources from inside the package or the folder the module is contained in
#+END_QUOTE

#+BEGIN_SRC python
  with app.open_resource('schema.sql') as f:
      contents = f.read()
      do_something_with(contents)
#+END_SRC

** request
- http://flask.pocoo.org/docs/0.12/api/#flask.Request
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.args
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.get_json

#+BEGIN_SRC python
  # A MultiDict with the parsed contents of the query string.(The part in the URL after the question mark).
  request.args.get('value', type=int)
#+END_SRC

#+BEGIN_SRC python
  # force  if set to True the mimetype is ignored.
  # silent  if set to True this method will fail silently and return None.
  # cache  if set to True the parsed JSON data is remembered on the request.
  request.get_json(force=False, silent=False, cache=True)
#+END_SRC

** MultiDict
- http://werkzeug.pocoo.org/docs/0.12/datastructures/#werkzeug.datastructures.MultiDict

#+BEGIN_SRC python
  >>> d = TypeConversionDict(foo='42', bar='blub')
  >>> d.get('foo', type=int)
  42
  >>> d.get('bar', -1, type=int)
  -1
#+END_SRC

** url_for
- http://flask.pocoo.org/docs/0.12/api/#flask.url_for
- http://flask.pocoo.org/docs/0.12/quickstart/#url-building

#+BEGIN_SRC python
  flask.url_for(endpoint, **values)
#+END_SRC

#+BEGIN_SRC python
  url_for('static', filename='style.css')
#+END_SRC

Generates a URL to the given endpoint with the method provided.
This is better than hard-coded URLs as following reasons:

1. Reversing is often more descriptive
2. URL building will handle escaping
3. If your application is placed outside the URL root

* Topics
** Application Context
- http://flask.pocoo.org/docs/0.12/appcontext/
- Since one of the pillars of Flask’s design is that you can have more than one application in the same Python process.

#+BEGIN_SRC python
  from flask import Flask, current_app

  app = Flask(__name__)
  with app.app_context():
      # within this block, current_app points to app.
      print current_app.name
#+END_SRC

#+BEGIN_SRC python
  import sqlite3
  from flask import g

  def get_db():
      db = getattr(g, '_database', None)
      if db is None:
          db = g._database = connect_to_database()
      return db

  @app.teardown_appcontext
  def teardown_db(exception):
      db = getattr(g, '_database', None)
      if db is not None:
          db.close()
#+END_SRC

** Commands
- http://flask.pocoo.org/docs/0.12/tutorial/dbinit/#tutorial-dbinit

#+BEGIN_SRC python
  @app.cli.command('initdb')
  def initdb_command():
      pass
#+END_SRC

#+BEGIN_SRC shell
  $ flask initdb
#+END_SRC

** Cookies
- http://flask.pocoo.org/docs/0.12/quickstart/#cookies
#+BEGIN_SRC python
  request.cookies.get('username')
#+END_SRC

#+BEGIN_SRC python
  resp = make_response(render_template(...))
  resp.set_cookie('username', 'the username')
#+END_SRC

** HTTP Methods
- http://flask.pocoo.org/docs/0.12/quickstart/#http-methods
- OPTIONS :: Starting with Flask 0.6, this is implemented for you automatically.

** Message Flashing
- http://flask.pocoo.org/docs/0.12/patterns/flashing/#message-flashing-pattern

#+BEGIN_SRC python
  flash('You were successfully logged in')
  return redirect(url_for('index'))

  @app.route('/')
  def index():
      return render_template('index.html')
#+END_SRC

The template cotains following code:
#+BEGIN_SRC html
  {% with messages = get_flashed_messages() %}
#+END_SRC

** Redirects and Erros
- http://flask.pocoo.org/docs/0.12/quickstart/#cookies

#+BEGIN_SRC python
  from flask import abort, redirect, render_template, url_for

  @app.route('/')
  def index():
      return redirect(url_for('login'))

  @app.route('/login')
  def login():
      abort(401)
      this_is_never_executed()

  @app.errorhandler(404)
  def page_not_found(error):
      return render_template('page_not_found.html'), 404
#+END_SRC

** Request Context
- http://flask.pocoo.org/docs/0.12/reqcontext/
- The request context internally works like a stack

#+BEGIN_SRC python
  def wsgi_app(self, environ):
      with self.request_context(environ):
          try:
              response = self.full_dispatch_request()
          except Exception as e:
              response = self.make_response(self.handle_exception(e))
          return response(environ, start_response)
#+END_SRC

** Responses
- http://flask.pocoo.org/docs/0.12/quickstart/#about-responses


1. response object :: just return
2. string :: create a response object with it
3. tuple  :: ~(response, status, headers)~ or ~(response, headers)~, ~headers~ can be a ~list~ or a ~dict~.
4. WSGI application :: covert it to a response object.

** Routing
- http://flask.pocoo.org/docs/0.12/quickstart/#routing

#+BEGIN_SRC python
  @app.route('/')
  def index():
      pass

  @app.route('/hello')
  def hello():
      pass

  @app.route('/user/<username>')
  def show_user_profile(username):
      pass

  @app.route('/post/<int:post_id>')
  def show_post(post_id):
      pass
#+END_SRC

Trailing slashs:
#+BEGIN_SRC python
  @app.route('/projects/')
  def projects():
      return 'The project page'

  @app.route('/about')
  def about():
      return 'The about page'
#+END_SRC

- routes defined with trailing slash    :: ~/projects~ is redirected to ~/projects/~
- routes defined without trailing slash :: ~/about/~ goes to ~404~

** Sessions
- http://flask.pocoo.org/docs/0.12/quickstart/#sessions
- On top of cookies, encrypted with a secret key.

#+BEGIN_SRC python
  from flask import Flask, session, redirect, url_for, escape, request

  app = Flask(__name__)

  @app.route('/')
  def index():
      if 'username' in session:
          return 'Logged in as %s' % escape(session['username'])
      return 'You are not logged in'

  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'
#+END_SRC

#+BEGIN_SRC python
  >>> import os
  >>> os.urandom(24)
  '\xfd{H\xe5<\x95\xf9\xe3\x96.5\xd1\x01O<!\xd5\xa2\xa0\x9fR"\xa1\xa8'

  Just take that thing and copy/paste it into your code and you're done.
#+END_SRC

** Signals
- http://flask.pocoo.org/docs/0.12/signals/
- http://flask.pocoo.org/docs/0.12/api/#core-signals-list

#+BEGIN_SRC python
  from flask import template_rendered
  from contextlib import contextmanager

  @contextmanager
  def captured_templates(app):
      recorded = []
      def record(sender, template, context, **extra):
          recorded.append((template, context))
      template_rendered.connect(record, app)
      try:
          yield recorded
      finally:
          template_rendered.disconnect(record, app)
#+END_SRC  

#+BEGIN_SRC python
  with captured_templates(app) as templates:
      rv = app.test_client().get('/')
      assert rv.status_code == 200
      assert len(templates) == 1
      template, context = templates[0]
      assert template.name == 'index.html'
      assert len(context['items']) == 10
#+END_SRC

- http://pythonhosted.org/blinker/#blinker.base.Signal.connect_via
#+BEGIN_SRC python
  from flask import template_rendered

  @template_rendered.connect_via(app)
  def when_template_rendered(sender, template, context, **extra):
      print 'Template %s is rendered with %s' % (template.name, context)
#+END_SRC

** Static Files
- http://flask.pocoo.org/docs/0.12/quickstart/#static-files

#+BEGIN_SRC python
  url_for('static', filename='style.css')
#+END_SRC

** Templates
- http://flask.pocoo.org/docs/0.12/templating/

*** Standard Contexts
- ~config~
- ~request~
- ~session~
- ~g~
- ~url_for~
* Patterns
** Application Factories
- http://flask.pocoo.org/docs/0.12/patterns/appfactories/
- More flexible, more organized, but more complicated

#+BEGIN_SRC python
  def create_app(config_filename):
      app = Flask(__name__)
      app.config.from_pyfile(config_filename)

      from yourapplication.model import db
      db.init_app(app)

      from yourapplication.views.admin import admin
      from yourapplication.views.frontend import frontend
      app.register_blueprint(admin)
      app.register_blueprint(frontend)

      return app
#+END_SRC
