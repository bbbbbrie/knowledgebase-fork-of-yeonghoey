#+TITLE: Jest

* Table of Contents :TOC_2_gh:
- [[#introduction][Introduction]]
  - [[#using-matchers][Using Matchers]]
  - [[#testing-asynchronous-code][Testing Asynchronous Code]]
  - [[#setup-and-teardown][Setup and Teardown]]
  - [[#mock-functions][Mock Functions]]
  - [[#jest-platform][Jest Platform]]
  - [[#jest-community][Jest Community]]
  - [[#more-resources][More Resources]]
- [[#guides][Guides]]
  - [[#snapshot-testing][Snapshot Testing]]
- [[#api-reference][API Reference]]
  - [[#globals][Globals]]
  - [[#configuring-jest][Configuring Jest]]

* Introduction
** [[https://facebook.github.io/jest/docs/en/using-matchers.html][Using Matchers]]
#+BEGIN_SRC js
  expect(x).toBeNull();
  expect(x).toBeDefined();
  expect(x).not.toBeUndefined();
  expect(x).not.toBeTruthy();
  expect(x).toBeFalsy();
  expect(x).toBeGreaterThan(3);
  expect(x).toBeGreaterThanOrEqual(3.5);
  expect(x).toBeLessThan(5);
  expect(x).toBeLessThanOrEqual(4.5);
  expect(x).toBe(4);
  expect(x).toEqual(4);
  expect(x).toBeCloseTo(0.3);
  expect(x).toMatch(/stop/);
  expect(x).toContain('beer');
  expect(x).toThrow();

  expect(mockFunc).toBeCalled();
  expect(mockFunc).toBeCalledWith(arg1, arg2);
  expect(mockFunc).lastCalledWith(arg1, arg2);
  expect(mockFunc).toMatchSnapshot();
#+END_SRC

-----
- https://facebook.github.io/jest/docs/en/expect.html

** [[https://facebook.github.io/jest/docs/en/asynchronous.html][Testing Asynchronous Code]]
- Use ~done~ ::
  - Be sure to call ~done~
  #+BEGIN_SRC js
    test('the data is peanut butter', done => {
      function callback(data) {
        expect(data).toBe('peanut butter');
        done();
      }

      fetchData(callback);
    });
  #+END_SRC

- Use ~Promise~ ::
  - Be sure to return the ~Promise~
  #+BEGIN_SRC js
    test('the data is peanut butter', () => {
      expect.assertions(1);
      return fetchData().then(data => {
        expect(data).toBe('peanut butter');
      });
    });
  #+END_SRC

- Use ~.resolves~, ~.rejects~ ::
  - Waits until the ~Promise~ reolves
  #+BEGIN_SRC js
    test('the data is peanut butter', () => {
      expect.assertions(1);
      return expect(fetchData()).resolves.toBe('peanut butter');
    });
  #+END_SRC

- Use ~async~, ~await~ ::
  #+BEGIN_SRC js
    test('the data is peanut butter', async () => {
      expect.assertions(1);
      const data = await fetchData();
      expect(data).toBe('peanut butter');
    });

  #+END_SRC

** [[https://facebook.github.io/jest/docs/en/setup-teardown.html][Setup and Teardown]]
- Like tests, setup and teardown functions can also be used with ~done~ param or returning ~Promise~.
- ~beforeAll~, ~afterAll~ are scoped withgiin the file they are placed in

- Use ~beforeEach~, ~afterEach~ ::
  #+BEGIN_SRC js
    beforeEach(() => {
      initializeCityDatabase();
    });

    afterEach(() => {
      clearCityDatabase();
    });
  #+END_SRC
  
- Use ~beforeAll~, ~afterAll~ ::
  #+BEGIN_SRC js
    beforeAll(() => {
      return initializeCityDatabase();
    });

    afterAll(() => {
      return clearCityDatabase();
    });
  #+END_SRC

- Use ~describe~ for scoping ::
  - Jest executes all ~describe~ handlers in a test file *before it executes any of the actual tests.* 
  #+BEGIN_SRC js
    describe('matching cities to foods', () => {
      // Applies only to tests in this describe block
      beforeEach(() => {
        return initializeFoodDatabase();
      });

      test('Vienna <3 sausage', () => {
        expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);
      });

      test('San Juan <3 plantains', () => {
        expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);
      });
    });
  #+END_SRC

  #+BEGIN_SRC js
    beforeAll(() => console.log('1 - beforeAll'));
    afterAll(() => console.log('1 - afterAll'));
    beforeEach(() => console.log('1 - beforeEach'));
    afterEach(() => console.log('1 - afterEach'));
    test('', () => console.log('1 - test'));
    describe('Scoped / Nested block', () => {
      beforeAll(() => console.log('2 - beforeAll'));
      afterAll(() => console.log('2 - afterAll'));
      beforeEach(() => console.log('2 - beforeEach'));
      afterEach(() => console.log('2 - afterEach'));
      test('', () => console.log('2 - test'));
    });
  #+END_SRC

  #+BEGIN_EXAMPLE
    1 - beforeAll
    1 - beforeEach
    1 - test
    1 - afterEach
    2 - beforeAll
    1 - beforeEach
    2 - beforeEach
    2 - test
    2 - afterEach
    1 - afterEach
    2 - afterAll
    1 - afterAll
  #+END_EXAMPLE
** [[https://facebook.github.io/jest/docs/en/mock-functions.html][Mock Functions]]
- Using a mock function ::
  #+BEGIN_SRC js
    function forEach(items, callback) {
      for (let index = 0; index < items.length; index++) {
        callback(items[index]);
      }
    }
  #+END_SRC
  #+BEGIN_SRC js
    const mockCallback = jest.fn();
    forEach([0, 1], mockCallback);

    // The mock function is called twice
    expect(mockCallback.mock.calls.length).toBe(2);

    // The first argument of the first call to the function was 0
    expect(mockCallback.mock.calls[0][0]).toBe(0);

    // The first argument of the second call to the function was 1
    expect(mockCallback.mock.calls[1][0]).toBe(1);
  #+END_SRC

- Mock Return Values ::
  #+BEGIN_SRC js
    const myMock = jest.fn();
    console.log(myMock());
    // > undefined

    myMock
      .mockReturnValueOnce(10)
      .mockReturnValueOnce('x')
      .mockReturnValue(true);

    console.log(myMock(), myMock(), myMock(), myMock());
    // > 10, 'x', true, true
  #+END_SRC

- Mocking Modules ::
  #+BEGIN_SRC js
    // users.test.js
    import axios from 'axios';
    import Users from './users';

    jest.mock('axios');

    test('should fetch users', () => {
      const resp = {data: [{name: 'Bob'}]};
      axios.get.mockResolvedValue(resp);

      // or you could use the follwing depending on your use case:
      // axios.get.mockImplementation(() => Promise.resolve(resp))

      return Users.all().then(users => expect(users).toEqual(resp.data));
    });
  #+END_SRC

- Mock Implementations ::
  #+BEGIN_SRC js
    const myMockFn = jest
          .fn(() => 'default')
          .mockImplementationOnce(() => 'first call')
          .mockImplementationOnce(() => 'second call');

    console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());
    // > 'first call', 'second call', 'default', 'default'
  #+END_SRC

- Mock Names ::
  - Give a name to the mock function for error output.
  #+BEGIN_SRC js
    const myMockFn = jest
          .fn()
          .mockReturnValue('default')
          .mockImplementation(scalar => 42 + scalar)
          .mockName('add42');
  #+END_SRC

** [[https://facebook.github.io/jest/docs/en/jest-platform.html][Jest Platform]]
** [[https://facebook.github.io/jest/docs/en/jest-community.html][Jest Community]]
** [[https://facebook.github.io/jest/docs/en/more-resources.html][More Resources]]
- https://github.com/facebook/jest/tree/master/examples

* Guides
** [[https://facebook.github.io/jest/docs/en/snapshot-testing.html][Snapshot Testing]]
Snapshot tests are a very useful tool *whenever you want to make sure your UI does not change unexpectedly.*

#+BEGIN_SRC js
  import React from 'react';
  import Link from '../Link.react';
  import renderer from 'react-test-renderer';

  it('renders correctly', () => {
    const tree = renderer
      .create(<Link page="http://www.facebook.com">Facebook</Link>)
      .toJSON();
    expect(tree).toMatchSnapshot();
  });
#+END_SRC

1. When the first time the test is run, Jest creates a snapshot file.
2. After that, Jest compares new caculated results with it.
3. To update it, run following command:
  : jest --updateSnapshot 

- Snapshot files should be committed.
- The aim of snapshot testing is not to replace existing unit tests, but providing additional value and making testing painless.
- Snapshots help figuring out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.

* API Reference
** Globals
- ~test(name, fn, timeout)~ ::
  - Alias ~it(name, fn, timeout)~

** [[https://facebook.github.io/jest/docs/en/configuration.html][Configuring Jest]]
- ~package.json~ ::
  #+BEGIN_SRC json
    {
      "name": "my-project",
      "jest": {
        "verbose": true
      }
    }
  #+END_SRC

- ~jest.config.js~ ::
  #+BEGIN_SRC js
    // jest.config.js
    module.exports = {
      verbose: true,
    };
  #+END_SRC

- With ~--config~ option ::
  - MUST not contain ~jest~ key in json
  #+BEGIN_SRC json
    {
      "bail": true,
      "verbose": true
    }
  #+END_SRC

- [[https://facebook.github.io/jest/docs/en/configuration.html#setupfiles-array][setupFiles]] ~[array]~ ::
  - The paths to modules that run some code to configure or set up the testing environment *before each test*.

- [[https://facebook.github.io/jest/docs/en/configuration.html#testmatch-array-string][testMatch]] ~[array]~ ::
  - default (uses [[https://github.com/micromatch/micromatch#extended-globbing][micromatch]] patterns)
    #+BEGIN_SRC js
      [
        '**/__tests__/**/*.js?(x)',   // .js and .jsx files inside of __tests__ folders
        '**/?(*.)(spec|test).js?(x)', // files with a suffix of .test or .spec
      ]
    #+END_SRC
