#+TITLE: Terraform


* Table of Contents :TOC_3_gh:
- [[#overview][Overview]]
- [[#reference][Reference]]
  - [[#configurations][Configurations]]
    - [[#backend][backend]]
    - [[#path][path]]
    - [[#depends_on][depends_on]]
    - [[#element][element]]
    - [[#ignore_changes][ignore_changes]]
    - [[#null_resource][null_resource]]
    - [[#local-exec][local-exec]]
    - [[#remote-exec][remote-exec]]
    - [[#archive_file][archive_file]]
    - [[#template_file][template_file]]
  - [[#commands][Commands]]
    - [[#plan][plan]]
    - [[#apply][apply]]
    - [[#import][import]]
    - [[#state][state]]
    - [[#taint][taint]]
    - [[#force-unlcok][force-unlcok]]
- [[#terminology][Terminology]]
- [[#topics][Topics]]
  - [[#terraform-files][Terraform files]]
  - [[#resources-and-data-sources][Resources and Data Sources]]
  - [[#state-file][State file]]
  - [[#variable-files][Variable files]]
  - [[#resource-addressing][Resource Addressing]]
  - [[#interpolation][Interpolation]]
  - [[#limitations][Limitations]]
    - [[#no-dynamic-interpolation-over-count][No dynamic interpolation over count]]
    - [[#no-integer-variable][No integer variable]]
    - [[#no-list-of-maps][No list of maps]]
  - [[#modules][Modules]]
- [[#how-to][How-to]]
  - [[#make-manual-modifications-on-remote-backeded-tfstates][Make manual modifications on remote backeded tfstates]]
  - [[#migrate-existing-aws-infra-with-terraforming][Migrate existing AWS Infra with terraforming]]
  - [[#generate-documents-automatically][Generate documents automatically]]
- [[#links][Links]]
- [[#staging][Staging]]

* Overview
* Reference
** Configurations
*** backend
- https://www.terraform.io/docs/backends/types/s3.html

#+BEGIN_SRC terraform
  resource "aws_s3_bucket" "bucket" {
    bucket = "my-bucket"
  }

  resource "aws_dynamodb_table" "locktable" {
    name           = "my-locktable"
    read_capacity  = 5
    write_capacity = 5
    hash_key       = "LockID"

    attribute {
      name = "LockID" # Reserved name by terraform
      type = "S"
    }
  }
#+END_SRC

#+BEGIN_SRC terraform
  terraform {
    backend "s3" {
      bucket         = "my-bucket"
      dynamodb_table = "my-locktable"
      key            = "my.tfstate"
      region         = "ap-northeast-1"
    }
  }
#+END_SRC

*** path
- https://www.terraform.io/docs/configuration/interpolation.html#path-information

#+BEGIN_EXAMPLE
  source_file = "${path.cwd}/main.py"   # Path to the current working directory
  source_file = "${path.root}/main.py"  # Path to the root module
  source_file = "${path.module}/main.py" # Path to the current module
#+END_EXAMPLE

*** depends_on
- https://www.terraform.io/intro/getting-started/dependencies.html#implicit-and-explicit-dependencies
- ~depends_on~ parameter which is available on any resource

#+BEGIN_EXAMPLE
  resource "aws_eip" "ip" {
    instance   = "${aws_instance.example.id}"

    # Use 'depends_on' to make the dependency explicit.
    # It's redundant in this case because this resource already depends on 'aws_instance.example'
    # by referencing its id
    depends_on = ["aws_instance.example"]
  }
#+END_EXAMPLE

*** element
- https://www.terraform.io/docs/configuration/interpolation.html#element-list-index-
- if ~index~ is greater than ~len(list)~, ~index~ modulo ~len(list)~ is used

#+BEGIN_EXAMPLE
  vars {
    ip = "${element(aws_instance.cluster.*.private_ip, count.index)}"
  }
#+END_EXAMPLE

*** ignore_changes
- https://www.terraform.io/docs/configuration/resources.html
- https://github.com/hashicorp/terraform/issues/4944

There was a problem when I defined multiple ~aws_eip~ s which are associated to ~aws_instance~ s.

#+BEGIN_EXAMPLE
  resource "aws_instance" "foo" {
    count = 10
    ..
  }

  resource "aws_eip" "bar" {
    count = 10
    instance = "${element(aws_instance.foo.*.i, count.index}"
  }
#+END_EXAMPLE

Terraform plans to change the all association when I only change the ~count~.
To work around this, use ~ignore_changes~

#+BEGIN_EXAMPLE
  resource "aws_eip" "bar" {
    count = 10
    instance = "${element(aws_instance.foo.*.i, count.index}"
    lifecycle {
      ignore_changes = ["instance"]
    }
  }
#+END_EXAMPLE
*** null_resource
- https://www.terraform.io/docs/provisioners/null_resource.html
- Allows to run provionsers not directly associated with a single existing resource

#+BEGIN_SRC terraform
  resource "null_resource" "docker_run" {
    count = "${var.count}"

    triggers {
      cluster_instance_ids = "${join(",", aws_instance.cluster.*.id)}"
    }

    connection {
      type        = "ssh"
      user        = "ubuntu"
      host        = "${element(aws_instance.cluster.*.private_ip, count.index)}"
      private_key = "${file(var.key_path)}"
    }

    provisioner "remote-exec" {
      inline = [
        "sudo docker stop etcd || true",
        "sudo docker rm -f etcd || true",
        "${element(data.template_file.docker_run_command.*.rendered, count.index)}",
      ]
    }
  }
#+END_SRC

*** local-exec
- https://www.terraform.io/docs/provisioners/local-exec.html
#+BEGIN_EXAMPLE
  provisioner "local-exec" {
    command = "run.sh ${var.args}"
  }
#+END_EXAMPLE

*** remote-exec
- https://www.terraform.io/docs/provisioners/remote-exec.html

#+BEGIN_EXAMPLE
  connection {
    type        = "ssh"
    user        = "ubuntu"
    host        = "${aws_instance.main.private_ip}" # can omit if within the instance
    private_key = "${file(var.key_path)}"
  }

  provisioner "remote-exec" {
    inline = [
      "curl -sSL https://get.docker.com/ | sh",
    ]
  }
#+END_EXAMPLE

*** archive_file
- https://www.terraform.io/docs/providers/archive/d/archive_file.html
- Useful to provision resources which require zip files.
#+BEGIN_EXAMPLE
  data "archive_file" "code" {
    type        = "zip"
    source_file = "${path.module}/main.py"
    output_path = "${path.module}/lambda.zip"
  }
  resource "aws_lambda_function" "main" {
    function_name    = "foo"
    filename         = "${data.archive_file.code.output_path}"
    source_code_hash = "${data.archive_file.code.output_base64sha256}"
    ...
  }
#+END_EXAMPLE

*** template_file
- https://www.terraform.io/docs/providers/template/index.html
- Use ~$$~ in ~template~ to escape ~$~

#+BEGIN_EXAMPLE
  data "template_file" "curl" {
    count    = "${var.count}"
    template = "curl http://$${ip}"
    vars {
      ip = "${element(aws_instance.cluster.*.private_ip, count.index)}"
    }
  }
#+END_EXAMPLE

** Commands
- https://www.terraform.io/docs/commands/index.html

*** plan
#+BEGIN_SRC shell
  terraform plan
  terraform plan -var 'access_key=foo' -var 'secret_key=bar'
  terraform plan -var 'amis={us-east-1 = "foo", us-west-2 = "bar"}'
  terraform plan -out=my.plan
#+END_SRC

*** apply
#+BEGIN_SRC shell
  terraform apply
  terraform apply 'my.plan'
#+END_SRC

*** import
#+BEGIN_SRC shell
  terraform import aws_instance.main i-abcd1234
#+END_SRC

*** state
**** mv
- https://www.terraform.io/docs/commands/state/mv.html

#+BEGIN_SRC shell
  # from ./terraform.tfstate:aws_instance.main
  # to new/terraform.tfstate:aws_instance.server
  terraform state mv -state-out new/terraform.tfstate \
            aws_instance.main \
            aws_instance.server
#+END_SRC

*** taint
- https://github.com/yeonghoey/notes/tree/master/terraform#taint
- You can taint resources within modules
- It looks like that tainting a whole module is currently impossible

#+BEGIN_SRC shell
  terraform taint aws_instance.main                                                                              1 ↵
  terraform taint -module=my_module aws_instance.main                                                                              1 ↵
#+END_SRC

*** force-unlcok
- https://www.terraform.io/docs/commands/force-unlock.html
- ~LockID~ will be printed out when commands fail

#+BEGIN_SRC shell
  Error locking state: Error acquiring the state lock: ConditionalCheckFailedException: The conditional request failed
          status code: 400, request id: <...>
  Lock Info:
    ID:        abcdef01-ef34-abcd-5678-abc123def456
    Path:      <...>
    Operation: OperationTypePlan
    Who:       <...>
    Version:   0.9.8
    Created:   2017-06-13 11:00:23.886816353 +0000 UTC
    Info:

  ...
#+END_SRC

#+BEGIN_SRC shell
  terraform force-unlock "abcdef01-ef34-abcd-5678-abc123def456"
#+END_SRC

* Terminology
* Topics
** Terraform files
- All ~.tf~ files are loaded
- ~.tf~ files are declarative, so the order of loading files doesn't matter, except for Override files
- Override files are ~.tf~ files named as ~override.tf~ or ~{name}_override.tf~
- Override files are loaded last in alphabetical order
- Configurations in override files are *merged into the existing configuration*, not appended.

** Resources and Data Sources
- *Resources* are infrastructures managed by ~terraform~
- *Data sources* are not managed by ~terraform~

The use case of these things are following:
#+BEGIN_QUOTE
You can provision servers by defining them as *resources*.\\
For specifying server configurations,
you can reference existing security groups, VPCs, and the like by defining them as *data sources*.
#+END_QUOTE

** State file
- State about the real managed infrastructure
- ~terraform.tfstate~ by default
- Formatted in ~json~
- While terraform files are about *to be*, state file is about *as is*
- State is refreshed before performing most of operations like ~terraform plan~, ~terraform apply~
- Basic modifications can be done through ~terraform state [sub]~ commands
- Importing existing infrastructures can be done using ~terraform state import~
  - Importing is related to ~resources~, not ~data sources~
  - Which means ~terraform~ can destroy the existing infrastructures once they are imported

** Variable files
- A file named ~terraform.tfvars~ is automatically loaded
- Use ~-var-file~ flag to specify other ~.tfvars~ files

** Resource Addressing
- https://www.terraform.io/docs/commands/state/addressing.html

#+BEGIN_EXAMPLE
  [module path][resource spec]
  module.A.module.B.module.C...
  resource_type.resource_name[N]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  resource "aws_instance" "web" {
    # ...
    count = 4
  }
  aws_instance.web[3]
  aws_instance.web
#+END_EXAMPLE

** Interpolation
- https://www.terraform.io/docs/configuration/interpolation.html

#+BEGIN_EXAMPLE
  ${self.private_ip_address}  # attributes of their own
  ${aws_instance.web.id}
  ${aws_instance.web.0.id}    # a specific one when the resource is plural('count' attribute exists)
  ${aws_instance.web.*.id}    # this is a list
  ${module.foo.bar}           # outputs from module
  .. and many more including some functions
#+END_EXAMPLE

** Limitations
*** No dynamic interpolation over count
- https://github.com/hashicorp/terraform/issues/1497#issuecomment-105874601

**** Update
- https://github.com/hashicorp/terraform/pull/11482
- Interpolations other than ~computing required~ can be used for ~count~.
- Now ~count = "${length(var.other_List)}"~ is valid

**** Previous limitation
For now, you can't use interpolation for referencing other resources
to specify ~count~ because of the way that terraform handles ~count~.

#+BEGIN_EXAMPLE
  variable my_count {
    default = 10
  }

  resource "something" "foo" {
    count = "${var.my_count}"   # ok
  }

  resource "something" "bar" {
    count = "${something.foo.count}"  # error
  }
#+END_EXAMPLE

#+BEGIN_QUOTE
We should definitely do this,
the tricky part comes from the fact that count expansion is currently done statically,
before the primary graph walk, which means we can't support "computed" counts right now.
(A "computed" value in TF is one that's flagged as not known until all its dependencies are calculated.)
#+END_QUOTE

*** No integer variable
- https://github.com/hashicorp/terraform/issues/6254

*** No list of maps
- https://github.com/hashicorp/terraform/issues/7705
- The type of most mapping arguments are actually the list of maps

#+BEGIN_EXAMPLE
  variable "cluster_config" {
    type = "map"
  }

  resource aws_elasticsearch_domain "main" {
    cluster_config = "${var.cluster_config}"  # Not supported
  }
#+END_EXAMPLE

Because the actual schema is:
#+BEGIN_SRC go
  "cluster_config": {
	  Type:     schema.TypeList,
	  Optional: true,
	  Computed: true,
	  Elem: &schema.Resource{
		  Schema: map[string]*schema.Schema{
#+END_SRC

** Modules
- https://www.terraform.io/docs/modules/create.html
- When you run ~terraform apply~, the current working directory holding the Terraform files is called the *root module*.
- With *Local File Paths*, Terraform will *create a symbolic link to the original directory.* Therefore, any changes are automatically available.

* How-to
** Make manual modifications on remote backeded tfstates

- https://www.terraform.io/docs/commands/state/pull.html
- https://www.terraform.io/docs/commands/state/push.html

#+BEGIN_SRC shell
  # Download the backended tfstate
  $ terraform state pull > terraform.tfstate

  # Most terraform state commands modify './terraform.tfstate' by default
  $ terraform import ADDR ID

  # Push the modified tfstate back
  $ terraform state push terraform.tfstate
#+END_SRC

** Migrate existing AWS Infra with terraforming
- https://github.com/dtan4/terraforming

** Generate documents automatically
- https://github.com/segmentio/terraform-docs

This simple tool automatically generates markdown or json document based on ~variable~ and ~output~ blocks.
* Links
* Staging


