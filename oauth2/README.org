#+TITLE: OAuth 2.0

* Table of Contents :TOC_3_gh:
- [[#overview][Overview]]
- [[#state][state]]
- [[#links][Links]]

* Overview
- https://www.ibuildings.nl/blog/2013/07/secure-your-rest-api-oauth2-implicit-grant

[[file:_img/screenshot_2018-01-11_15-50-31.png]]

* state
1. Provides the following link to the user
#+BEGIN_EXAMPLE
  https://authorization-server.com/auth?response_type=code&
    client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&scope=photos&state=1234zyx
#+END_EXAMPLE

~state~: A random string generated by your application, which you'll verify later.

2. User allows the acess
[[file:_img/screenshot_2018-03-05_18-19-39.png]]

3. User redirects to the following link.
#+BEGIN_EXAMPLE
  https://example-app.com/cb?code=AUTH_CODE_HERE&state=1234zyx
#+END_EXAMPLE

You should first compare this ~state~ value to ensure it matches the one you started with.
You can typically store the ~state~ value in a cookie or session, and compare it when the user comes back.
This ensures *your redirection endpoint isn't able to be tricked* into attempting to exchange arbitrary authorization codes.

This prevents CSRF(Cross Site Request Forgery), which let the victim login as the attacker.

[[file:_img/screenshot_2018-03-05_18-57-46.png]]

* Links
- https://developers.google.com/oauthplayground/
- https://aaronparecki.com/oauth-2-simplified/
- https://www.udacity.com/course/authentication-authorization-oauth--ud330
