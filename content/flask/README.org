#+TITLE: flask

* Table of Contents :TOC_2_gh:
- [[#overview][Overview]]
- [[#reference][Reference]]
  - [[#config][Config]]
  - [[#flask][Flask]]
  - [[#g][g]]
  - [[#jsonify][jsonify]]
  - [[#open_resource][open_resource]]
  - [[#redirect][redirect]]
  - [[#render_template][render_template]]
  - [[#request][request]]
  - [[#multidict][MultiDict]]
  - [[#route][route]]
  - [[#url_for][url_for]]
  - [[#test_client][test_client]]
- [[#topics][Topics]]
  - [[#application-context][Application Context]]
  - [[#blueprints][Blueprints]]
  - [[#commands][Commands]]
  - [[#cookies][Cookies]]
  - [[#http-methods][HTTP Methods]]
  - [[#message-flashing][Message Flashing]]
  - [[#redirects-and-errors][Redirects and Errors]]
  - [[#request-context][Request Context]]
  - [[#responses][Responses]]
  - [[#routing][Routing]]
  - [[#sessions][Sessions]]
  - [[#signals][Signals]]
  - [[#static-files][Static Files]]
  - [[#templates][Templates]]
- [[#patterns][Patterns]]
  - [[#application-factories][Application Factories]]
- [[#extensions][Extensions]]
  - [[#flask-cors][flask-cors]]

* Overview
#+BEGIN_EXAMPLE
  /<project-root>
    /<package>
      __init__.py
      /static
      /templates
    setup.py
    MANIFEST.in
#+END_EXAMPLE

~setup.py~:
#+BEGIN_SRC python
  from setuptools import setup

  setup(
      name='flaskr',
      packages=['flaskr'],
      include_package_data=True,
      install_requires=[
          'flask',
      ],
      setup_requires=[
          'pytest-runner',
      ],
      tests_require=[
          'pytest',
      ],
  )
#+END_SRC
* Reference
** Config
- Load from a ~.cfg~ file
- The configuration files themselves are actual Python files.
- Only values in uppercase are actually stored in the config object later on.
#+BEGIN_SRC python
  app.config.from_pyfile('yourconfig.cfg')
#+END_SRC

- Load from the current python module
#+BEGIN_SRC python
  # Only uppercase keys are added to the config
  DEBUG = True
  SECRET_KEY = 'development key'
  app.config.from_object(__name__)
#+END_SRC

- Load from a file of which name is specified by env
#+BEGIN_SRC python
  export YOURAPPLICATION_SETTINGS='/path/to/config/file'
  app.config.from_envvar('YOURAPPLICATION_SETTINGS')
#+END_SRC

Certain configuration values are also forwarded to the Flask object so you can read and write them from there:
#+BEGIN_SRC python
  app = Flask(__name__)
  app.config['DEBUG'] = True

  # equivalent to above
  app.debug = True
#+END_SRC

#+BEGIN_SRC python
  app = Flask(__name__)
  app.config.from_object('yourapplication.default_settings')
  app.config.from_envvar('YOURAPPLICATION_SETTINGS') # overrides
  app.config.from_mapping({'ABC': 'test'})
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.Config
- http://flask.pocoo.org/docs/0.12/config/#builtin-configuration-values
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.default_config
- http://flask.pocoo.org/docs/0.12/api/#flask.Config.from_mapping
:END:

** Flask
#+BEGIN_SRC python
  app = Flask('yourapplication')
  app = Flask(__name__.split('.')[0])
#+END_SRC

#+BEGIN_QUOTE
If you are using a single module, ~name~ is always the correct value.
If you however are using a package, itâ€™s usually recommended to *hardcode the name of your package* there.
#+END_QUOTE

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#application-object
:END:

** g
#+BEGIN_QUOTE
Stored on the application context and no longer on the request context which means it becomes available
if only the application context is bound and not yet a request.
#+END_QUOTE

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.g
- http://flask.pocoo.org/docs/0.12/tutorial/dbcon/
:END:

** jsonify
: flask.json.jsonify(*args, **kwargs)
1. Dumps the arguments. Pack multipe arugments as ~args~ into JSON array, ~kwargs~ into JSON object.
2. Create ~Response~ object with ~Content-Type~ of ~application/json~

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.json.jsonify
:END:

** open_resource
#+BEGIN_EXAMPLE
  /myapplication.py
  /schema.sql
  /static
      /style.css
  /templates
      /layout.html
      /index.html
#+END_EXAMPLE

- http://flask.pocoo.org/docs/0.12/api/#flask.Flask
#+BEGIN_QUOTE
The name of the package is used to resolve resources from inside the package or the folder the module is contained in
#+END_QUOTE

#+BEGIN_SRC python
  with app.open_resource('schema.sql') as f:
      contents = f.read()
      do_something_with(contents)
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.open_resource
:END:

** redirect
: flask.redirect(location, code=302, Response=None)

#+BEGIN_SRC python
  @app.route('/')
  def index():
      return redirect(url_for('login'))
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.10/api/#flask.redirect
:END:

** render_template
: flask.render_template(template_name_or_list, **context)

- context :: the variables that should be available in the context of the template.

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.render_template
:END:

** request
#+BEGIN_SRC python
  # A MultiDict with the parsed contents of the query string.(The part in the URL after the question mark).
  request.args.get('value', type=int)
#+END_SRC

Use ~request.get_json()~, which is later added for consistency, instead of ~request.json~
#+BEGIN_SRC python
  # force  if set to True the mimetype is ignored.
  # silent if set to True this method will fail silently and return None.
  # cache  if set to True the parsed JSON data is remembered on the request.
  request.get_json(force=False, silent=False, cache=True)
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.Request
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.args
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.get_json
:END:

** MultiDict
#+BEGIN_SRC python
  >>> d = TypeConversionDict(foo='42', bar='blub')
  >>> d.get('foo', type=int)
  42
  >>> d.get('bar', -1, type=int)
  -1
#+END_SRC

:REFERENCES:
- http://werkzeug.pocoo.org/docs/0.12/datastructures/#werkzeug.datastructures.MultiDict
:END:

** route
#+BEGIN_SRC python
  @app.route('/users/', defaults={'page': 1})
  @app.route('/users/page/<int:page>')
  def show_users(page):
      pass
#+END_SRC

| rule        | the URL rule as string                                                                                                                                                                                                                                                                                                                                                                                        |
| endpoint    | the endpoint for the registered URL rule. Flask itself assumes that the name of the view function is the name of the endpoint if not explicitly stated.                                                                                                                                                                                                                                                       |
| view_func	 | the function to call when serving a request to the provided endpoint. If this is not provided one can specify the function later by storing it in the view_functions dictionary with the endpoint as key.                                                                                                                                                                                                     |
| defaults    | A dictionary with defaults for this rule. See the example above for how defaults work.                                                                                                                                                                                                                                                                                                                        |
| subdomain	 | specifies the rule for the subdomain in case subdomain matching is in use. If not specified the default subdomain is assumed.                                                                                                                                                                                                                                                                                 |
| **options	 | the options to be forwarded to the underlying Rule object. A change to Werkzeug is handling of method options. methods is a list of methods this rule should be limited to (GET, POST etc.). By default a rule just listens for GET (and implicitly HEAD). Starting with Flask 0.6, OPTIONS is implicitly added and handled by the standard request handling. They have to be specified as keyword arguments. |

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route
- http://flask.pocoo.org/docs/0.12/api/#url-route-registrations
- http://werkzeug.pocoo.org/docs/0.14/routing/#werkzeug.routing.Rule
:END:

** url_for
#+BEGIN_SRC python
  flask.url_for(endpoint, **values)
#+END_SRC

#+BEGIN_SRC python
  url_for('static', filename='style.css')
#+END_SRC

#+BEGIN_SRC python
  # relative to current Blueprint
  url_for('.index')

  # Generate absolute URL
  url_for('.index', _external=True)
#+END_SRC

Generates a URL to the given endpoint with the method provided.
This is better than hard-coded URLs as following reasons:

1. Reversing is often more descriptive
2. URL building will handle escaping
3. If your application is placed outside the URL root

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#flask.url_for
- http://flask.pocoo.org/docs/0.12/quickstart/#url-building
:END:

** test_client
#+BEGIN_SRC python
  # propgate excetions to test_client
  app.testing = True
  client = app.test_client()

  # keep client open until the end of with block to test with contexts
  # You can now read the session or other context variables
  with app.test_client() as c:
      pass

  # If you want to modify the current session
  # Use session_transaction() as following:
  with client.session_transaction() as sess:
      sess.update(d)
#+END_SRC

*test_client DOES NOT support dict-json*.
You have to manually serialize dict to json and specify ~content_type~ as follows:
#+BEGIN_SRC python
  client.post(url,
              content_type='application/json',
              data=json.dumps(d))
#+END_SRC

:REFERENCES:
- [[http://werkzeug.pocoo.org/docs/0.14/test/#werkzeug.test.EnvironBuilder][Request parameters]]
- [[http://werkzeug.pocoo.org/docs/0.14/wrappers/#werkzeug.wrappers.BaseResponse][Response reference]]
- http://flask.pocoo.org/docs/0.12/testing/
- http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_client
- http://flask.pocoo.org/docs/0.12/api/#flask.testing.FlaskClient
- http://werkzeug.pocoo.org/docs/0.14/test/#werkzeug.test.Client
:END:

* Topics
** Application Context
- Since one of the pillars of Flaskâ€™s design is that you can have more than one application in the same Python process.

#+BEGIN_SRC python
  from flask import Flask, current_app

  app = Flask(__name__)
  with app.app_context():
      # within this block, current_app points to app.
      print current_app.name
#+END_SRC

#+BEGIN_SRC python
  import sqlite3
  from flask import g

  def get_db():
      db = getattr(g, '_database', None)
      if db is None:
          db = g._database = connect_to_database()
      return db

  @app.teardown_appcontext
  def teardown_db(exception):
      db = getattr(g, '_database', None)
      if db is not None:
          db.close()

  from werkzeug.local import LocalProxy
  db = LocalProxy(get_db)
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/appcontext/
:END:

** Blueprints
: flask.Blueprint(name, import_name, ...)

- ~name~        :: Use as the prefix of the blueprint routes
- ~import_name~ :: Same as ~Flask~, used for resolve the relative path for resources.

#+BEGIN_SRC python
  from flask import Blueprint, render_template, abort
  from jinja2 import TemplateNotFound

  simple_page = Blueprint('simple_page', __name__,
                          template_folder='templates')

  @simple_page.route('/', defaults={'page': 'index'})
  @simple_page.route('/<page>')
  def show(page):
      try:
          return render_template('pages/%s.html' % page)
      except TemplateNotFound:
          abort(404)
#+END_SRC

#+BEGIN_SRC python
  from flask import Flask
  from yourapplication.simple_page import simple_page

  app = Flask(__name__)
  app.register_blueprint(simple_page)
  app.register_blueprint(simple_page, url_prefix='/pages')
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/blueprints/
- http://flask.pocoo.org/docs/0.12/api/#flask.Blueprint
:END:

*** Access config within Blueprints
Use ~flask.current_app~,
but be careful that ~current_app~ is only accessible under the request context.:
#+BEGIN_SRC python
  from flask import current_app as app
  @api.route('/info/', methods = ['GET'])
  def get_account_num():
      num = app.config["INFO"]
#+END_SRC

:REFERENCES:
- https://stackoverflow.com/questions/18214612/how-to-access-app-config-in-a-blueprint
:END:

** Commands
#+BEGIN_SRC python
  @app.cli.command('initdb')
  def initdb_command():
      pass
#+END_SRC

#+BEGIN_SRC shell
  $ flask initdb
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/tutorial/dbinit/#tutorial-dbinit
:END:

** Cookies
#+BEGIN_SRC python
  request.cookies.get('username')
#+END_SRC

#+BEGIN_SRC python
  resp = make_response(render_template(...))
  resp.set_cookie('username', 'the username')
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/quickstart/#cookies
:END:

** HTTP Methods
- OPTIONS :: Starting with Flask 0.6, this is implemented for you automatically.

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/quickstart/#http-methods
:END:

** Message Flashing
#+BEGIN_SRC python
  flash('You were successfully logged in')
  return redirect(url_for('index'))

  @app.route('/')
  def index():
      return render_template('index.html')
#+END_SRC

The template cotains following code:
#+BEGIN_SRC html
  {% with messages = get_flashed_messages() %}
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/patterns/flashing/#message-flashing-pattern
:END:

** Redirects and Errors
- Exceptions generated by flask are subclasses of ~werkzeug.exceptions.HTTPException~

#+BEGIN_SRC python
  from flask import abort, redirect, render_template, url_for

  @app.route('/')
  def index():
      return redirect(url_for('login'))

  @app.route('/login')
  def login():
      abort(401)
      this_is_never_executed()

  @app.errorhandler(404)
  def page_not_found(error):
      return render_template('page_not_found.html'), 404
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/1.0/quickstart/#redirects-and-errors
- http://werkzeug.pocoo.org/docs/0.14/exceptions/
:END:

** Request Context
- The request context internally works like a stack

#+BEGIN_SRC python
  def wsgi_app(self, environ):
      with self.request_context(environ):
          try:
              response = self.full_dispatch_request()
          except Exception as e:
              response = self.make_response(self.handle_exception(e))
          return response(environ, start_response)
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/reqcontext/
:END:

** Responses
1. response object :: just return
2. string :: create a response object with it
3. tuple  :: ~(response, status, headers)~ or ~(response, headers)~, ~headers~ can be a ~list~ or a ~dict~.
4. WSGI application :: covert it to a response object.

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/quickstart/#about-responses
:END:

** Routing
#+BEGIN_SRC python
  @app.route('/')
  def index():
      pass

  @app.route('/hello')
  def hello():
      pass

  @app.route('/user/<username>')
  def show_user_profile(username):
      pass

  @app.route('/post/<int:post_id>')
  def show_post(post_id):
      pass
#+END_SRC

#+BEGIN_SRC python
  @bp.route('/<user>/', defaults={'name': None})
  @bp.route('/<user>/<path:name>')
  def query(user, name):
      pass
#+END_SRC

Trailing slashs:
#+BEGIN_SRC python
  @app.route('/projects/')
  def projects():
      return 'The project page'

  @app.route('/about')
  def about():
      return 'The about page'
#+END_SRC

- routes defined with trailing slash    :: ~/projects~ is redirected to ~/projects/~
- routes defined without trailing slash :: ~/about/~ goes to ~404~
- ~/test/<path:code>~ :: `code` can include ~/~

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/api/#url-route-registrations
- http://flask.pocoo.org/docs/0.12/quickstart/#routing
- http://flask.pocoo.org/snippets/76/
:END:

** Sessions
- [[https://stackoverflow.com/questions/22463939/demystify-flask-app-secret-key][How SECRET_KEY works]]

#+BEGIN_QUOTE
The way Flask does this is by using a signed cookie.
#+END_QUOTE

#+BEGIN_SRC python
  from flask import Flask, session, redirect, url_for, escape, request

  app = Flask(__name__)

  @app.route('/')
  def index():
      if 'username' in session:
          return 'Logged in as %s' % escape(session['username'])
      return 'You are not logged in'

  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'
#+END_SRC

#+BEGIN_SRC python
  @app.before_request
  def make_session_permanent():
      session.permanent = True
#+END_SRC

#+BEGIN_SRC python
  >>> import os
  >>> os.urandom(24)
  '\xfd{H\xe5<\x95\xf9\xe3\x96.5\xd1\x01O<!\xd5\xa2\xa0\x9fR"\xa1\xa8'

  Just take that thing and copy/paste it into your code and you're done.
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/quickstart/#sessions
- http://flask.pocoo.org/docs/0.12/api/#sessions
- https://stackoverflow.com/questions/34118093/flask-permanent-session-where-to-define-them
:END:

** Signals
#+BEGIN_SRC python
  from flask import template_rendered
  from contextlib import contextmanager

  @contextmanager
  def captured_templates(app):
      recorded = []
      def record(sender, template, context, **extra):
          recorded.append((template, context))
      template_rendered.connect(record, app)
      try:
          yield recorded
      finally:
          template_rendered.disconnect(record, app)
#+END_SRC

#+BEGIN_SRC python
  with captured_templates(app) as templates:
      rv = app.test_client().get('/')
      assert rv.status_code == 200
      assert len(templates) == 1
      template, context = templates[0]
      assert template.name == 'index.html'
      assert len(context['items']) == 10
#+END_SRC

#+BEGIN_SRC python
  from flask import template_rendered

  @template_rendered.connect_via(app)
  def when_template_rendered(sender, template, context, **extra):
      print 'Template %s is rendered with %s' % (template.name, context)
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/signals/
- http://flask.pocoo.org/docs/0.12/api/#core-signals-list
- http://pythonhosted.org/blinker/#blinker.base.Signal.connect_via
:END:

** Static Files
#+BEGIN_SRC python
  url_for('static', filename='style.css')
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/quickstart/#static-files
:END:

** Templates
:REFERENCES:
- http://flask.pocoo.org/docs/0.12/templating/
:END:

*** Standard Contexts
- ~config~
- ~request~
- ~session~
- ~g~
- ~url_for~

*** tojson
~tojson()~: This function converts the given object into JSON representation.
#+BEGIN_QUOTE
Note that inside ~script~ tags no escaping must take place,
so make sure to disable escaping with ~|safe~ before Flask 0.10 if you intend to use it inside ~script~ tags:
#+END_QUOTE

#+BEGIN_SRC python
  <script type=text/javascript>
      doSomethingWith({{ user.username|tojson|safe }});
  </script>
#+END_SRC
* Patterns
** Application Factories
- More flexible, more organized, but more complicated

#+BEGIN_SRC python
  def create_app(config_filename):
      app = Flask(__name__)
      app.config.from_pyfile(config_filename)

      from yourapplication.model import db
      db.init_app(app)

      from yourapplication.views.admin import admin
      from yourapplication.views.frontend import frontend
      app.register_blueprint(admin)
      app.register_blueprint(frontend)

      return app
#+END_SRC

:REFERENCES:
- http://flask.pocoo.org/docs/0.12/patterns/appfactories/
:END:

* Extensions
** flask-cors
The settings for CORS are determined in the following order

1. Resource level settings (e.g when passed as a dictionary)
2. Keyword argument settings
3. App level configuration settings (e.g. CORS_*)
4. Default settings

#+BEGIN_SRC python
  from flask import Flask
  from flask_cors import CORS

  app = Flask(__name__)
  CORS(app, resources={r"/api/*": {"origins": "*"}})

  @app.route("/api/v1/users")
  def list_users():
    return "user example"
#+END_SRC

:REFERENCES:
- https://github.com/corydolphin/flask-cors
- https://flask-cors.corydolphin.com/en/latest/api.html#extension
:END:
