#+TITLE: HTTP: What Every Web Developer Should Know About the Hypertext Transfer Protocol

* Table of Contents :TOC_2_gh:
 - [[#url][URL]]
 - [[#resources-and-media-types][Resources and Media Types]]
 - [[#messages][Messages]]
   - [[#postredirectget][POST/Redirect/GET]]
   - [[#http-request][HTTP Request]]

* URL
#+BEGIN_EXAMPLE
  <scheme>://<host>:<port>/<path>?<query>#<fragment>
#+END_EXAMPLE

#+BEGIN_QUOTE
In fact, these days many web sites try to avoid having any sort of real file name in their URL.
#+END_QUOTE

#+BEGIN_QUOTE
The fragment is not processed by the server.  The fragment is only used on the client and it identifies a
particular section of a resource
#+END_QUOTE

#+BEGIN_QUOTE
The path of a URL is case sensitive (...)
However, many web sites will try to make URLs behave as if they are case insensitive.
#+END_QUOTE

* Resources and Media Types
#+BEGIN_QUOTE
[[https://www.ietf.org/rfc/rfc3986.txt][RFC 3986]] defines the safe characters for URLs (...) alphanumeric in US-ASCII and some special characters like ':', '/'
(..) unsafe characters must be percent encoded. (%20 for a space character)
#+END_QUOTE

#+BEGIN_QUOTE
To specify content types, HTTP relies on the Multipurpose Internet Mail Extensions([[https://en.wikipedia.org/wiki/MIME][MIME]]) standards.
#+END_QUOTE

#+BEGIN_QUOTE
With "text/html", The 'text' part is the primary media type, the 'html' is the media subtype.
#+END_QUOTE

#+BEGIN_QUOTE
For most browsers the file extension is the last place it will go to determine the actual content type.
(...) If the host does not provide a MIME type, IE will then scan the first 200 bytes of the response
trying to guess the content type.  if IE doesn't find a type and can't guess the type,
it will fall back on the file extension used in the request for the resource.
#+END_QUOTE

#+BEGIN_QUOTE
When a client makes an HTTP request to a URL, the client can specify the media types it will accept.
#+END_QUOTE

* Messages
#+BEGIN_QUOTE
(...) the more you can think of a virtual resource as a real resource,
the better your application architecture and design will adhere to the strengths of HTTP.
#+END_QUOTE

** POST/Redirect/GET
#+BEGIN_QUOTE
Many web applications always try to leave the client view the result of a GET request.
After a user clicks a button to POST information to a server, the server will process the information
and respond with an HTTP redirect,
#+END_QUOTE

The practice of redirecting after a POST is common web design pattern known as the
POST/Redirect/GET ([[https://en.wikipedia.org/wiki/Post/Redirect/Get][PRG]]) pattern.

[[file:img/screenshot_2017-01-30_18-12-14.png]]
-----
[[file:img/screenshot_2017-01-30_18-16-17.png]]

** HTTP Request
A full HTTP request message consists of the following parts:
#+BEGIN_EXAMPLE
  [method] [URL] [version]
  [headers]

  [body]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
GET http://yeonghoey.com HTTP/1.1
Host: yeonghoey.com
Accetp-Language: ko-KR
#+END_EXAMPLE

#+BEGIN_QUOTE
Everything but the host header is optional,
but when a header does appear it must obey the standards.
For Date, (..) has to follow [[https://www.ietf.org/rfc/rfc0822.txt][RFC 822]] format. (like ~Mon, 30 Jan 2017 09:34:31 -0000~)
#+END_QUOTE

#+BEGIN_EXAMPLE
  GET / HTTP/1.1
  Host: google.com
  Connection: keep-alive
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36
  X-Client-Data: (...)
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Accept-Encoding: gzip, deflate, sdch
  Accept-Language: ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4
  Cookie: (...)
#+END_EXAMPLE
