#+TITLE: CS498-dv: Week 3

* Table of Contents :TOC_2_gh:
- [[#lesson-3-1-grapsh-graph-visualization-and-tree-maps][Lesson 3-1: Grapsh, Graph Visualization, and Tree Maps]]
  - [[#311-graphs-and-networks][3.1.1. Graphs and Networks]]
  - [[#312-embedding-planar-graphs][3.1.2. Embedding Planar Graphs]]
  - [[#313-graph-visualization][3.1.3 Graph Visualization]]
  - [[#314-graph-visualization][3.1.4 Graph Visualization]]
  - [[#compute-a-planar-graph-layout-with-numpy][Compute a Planar Graph Layout with NumPy]]
- [[#lesson-3-2-principal-component-analysis-and-multidimensional-scaling][Lesson 3-2: Principal Component Analysis and Multidimensional Scaling]]
  - [[#321-principal-component-analysis][3.2.1. Principal Component Analysis]]
  - [[#322-multidimensional-scaling][3.2.2. Multidimensional Scaling]]
- [[#lesson-3-3-packing][Lesson 3-3: Packing]]
  - [[#331-packing][3.3.1. Packing]]

* Lesson 3-1: Grapsh, Graph Visualization, and Tree Maps
** 3.1.1. Graphs and Networks
[[file:_slides/3.1.1.pdf::16by9]]

** 3.1.2. Embedding Planar Graphs
[[file:_slides/3.1.2.pdf::16by9]]

** 3.1.3 Graph Visualization
[[file:_slides/3.1.3.pdf::16by9]]

** 3.1.4 Graph Visualization
[[file:_slides/3.1.4.pdf::16by9]]

** Compute a Planar Graph Layout with NumPy
- Tutte's algorithm

[[file:_img/screenshot_2018-06-01_22-35-29.png]]

#+BEGIN_SRC emacs-lisp :session pipenv :results output silent :exports none
  (pipenv-activate)
#+END_SRC

#+BEGIN_SRC python :session pipenv :results output silent
  import numpy as np
#+END_SRC

#+BEGIN_SRC python :session pipenv :results output silent
  A = np.array([
               [   1,    0,    0,    0,    0,     0],
               [   0,    1,    0,    0,    0,     0],
               [   0,    0,    1,    0,    0,     0],
               [-1/3,    0,    0,    1,  -1/3, -1/3],
               [   0, -1/3,    0, -1/3,     1, -1/3],
               [   0,    0, -1/3, -1/3,  -1/3,    1],
               ])
#+END_SRC

#+BEGIN_SRC python :session pipenv :results output silent
  b = np.array([
               [ 0, 0],
               [ 0, 1],
               [ 1, 1],
               [ 0, 0],
               [ 0, 0],
               [ 0, 0],
               ])
#+END_SRC

#+BEGIN_SRC python :session pipenv :results output
  v = np.linalg.solve(A, b)
  print(v)
#+END_SRC

#+RESULTS:
: [[0.   0.  ]
:  [0.   1.  ]
:  [1.   1.  ]
:  [0.25 0.5 ]
:  [0.25 0.75]
:  [0.5  0.75]]

#+BEGIN_SRC dot :cmd neato :file _img/planar.png :exports both
  graph G {
    graph [dpi = 200 ];
    node [width=0.2,height=0.2,fixedsize=true];
    1 [pos="   0,    0!"];
    2 [pos="   0,    1!"];
    3 [pos="   1,    1!"];
    4 [pos="0.25, 0.50!"];
    5 [pos="0.25, 0.75!"];
    6 [pos="0.50, 0.75!"];
    1 -- 2
    1 -- 4
    2 -- 3
    2 -- 5
    3 -- 6
    4 -- 5
    4 -- 6
    5 -- 6
  }
#+END_SRC

#+RESULTS:
[[file:_img/planar.png]]

* Lesson 3-2: Principal Component Analysis and Multidimensional Scaling
** 3.2.1. Principal Component Analysis
[[file:_slides/3.2.1.pdf::16by9]]

** 3.2.2. Multidimensional Scaling
[[file:_slides/3.2.2.pdf::16by9]]

* Lesson 3-3: Packing
** 3.3.1. Packing
[[file:_slides/3.3.1.pdf::16by9]]
