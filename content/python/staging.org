** TODO <2017-03-24 Fri> Python, defining bound method
** TODO <2017-02-13 Mon> isinstance vs issubclass?
- https://bugs.python.org/issue25537
** TODO <2017-03-21 Tue> generator and throw
+ http://git.k.nexon.com/k/bronto/merge_requests/222/diffs
** TODO <2017-05-18 Thu> python int, long, int64
** TODO <2017-06-09 Fri> python textwrap
** TODO <2017-07-11 Tue> python2.7 re-raise, NoneType 
- https://stackoverflow.com/questions/25189545/why-doesnt-python-2-7-let-me-implicitly-re-raise-an-exception-after-yield
** TODO <2017-06-28 Wed> msgpack python
- https://pypi.python.org/pypi/msgpack-python
- ~encoding~, ~is_list~
** TODO <2017-06-28 Wed> gevent - threadpool
- System Call 같은건 GIL 영향 안 받으니까 스레드를 돌림
- 요걸 처리하기 위해 gevent도 자체 threadpool을 가지고 있는 듯
- ~_threading.py~, ~threading.py~ 차이를 잘 구분해서 볼 것.
** TODO <2017-07-03 Mon> mypy .mypy_cache
- https://github.com/python/mypy/issues/3336

** TODO <2017-10-22 Sun> python slice syntax
- https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation
** TODO <2017-09-30 Sat> python3 utf8 block
- https://stackoverflow.com/questions/14083111/should-i-use-encoding-declaration-in-python3
** TODO <2017-12-06 Wed> filter(None, iterable)
- https://docs.python.org/3/library/functions.html#filter

** TODO <2018-01-29 Mon> python exit vs. sys.exit
- https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python

함수를 가지고 코딩할 땐, 가비지 콜렉팅이 되어버리니 주의해야 한다.

** TODO <2018-01-31 Wed> Python 패키지 배포
twine, wheel 설치해야 함.
--universal은 setup.cfg에 적어놓기 도함

python setup.py sdist  # source dist
python setup.py bdist_wheel # binary dist
twine upload sit/* # upload

https://packaging.python.org/tutorials/distributing-packages/
$HOME/.pipyrc 설정해야 함

** Mixins
- https://www.ianlewis.org/en/mixins-and-python
** How-to allocate free port
#+BEGIN_SRC python
  from contextlib import closing
  from socket import socket, AF_INET, SOCK_STREAM

  def candidate_port():
      with closing(socket(AF_INET, SOCK_STREAM)) as s:
          s.bind(('localhost', 0))
          _, port = s.getsockname()
          return port


  def wait_healthy(host, port, interval=.1):
      with closing(socket(AF_INET, SOCK_STREAM)) as s:
          while s.connect_ex((host, port)) != 0:
              sleep(interval)

#+END_SRC
