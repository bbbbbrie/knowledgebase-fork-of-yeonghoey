#+TITLE: Lesson 4

* Table of Contents :TOC_2_gh:
 - [[#lesson-4][Lesson 4]]
   - [[#water-pouring-problem][Water Pouring Problem]]
   - [[#quiz-combinatorial-complexity][Quiz: Combinatorial Complexity]]
   - [[#quiz-exploring-the-space][Quiz: Exploring The Space]]
   - [[#pouring-solution][Pouring Solution]]
   - [[#doctest][Doctest]]
   - [[#bridge-problem][Bridge Problem]]
   - [[#quiz-bridge-successors][Quiz: Bridge Successors]]
 - [[#problem-set-4][Problem Set 4]]
   - [[#quiz-refactoring-bsuccessors][Quiz: Refactoring Bsuccessors]]
   - [[#quiz-more-pour-problem][Quiz: More Pour Problem]]
   - [[#quiz-subway-planning][Quiz: Subway Planning]]

* Lesson 4
** Water Pouring Problem
[[file:img/screenshot_2017-02-12_20-03-31.png]]

** Quiz: Combinatorial Complexity
[[file:img/screenshot_2017-02-12_20-04-51.png]]

Can't tell the number of cases -> *SEARCH* problem

** Quiz: Exploring The Space
[[file:img/screenshot_2017-02-12_23-37-56.png]]

** Pouring Solution
[[file:img/screenshot_2017-02-21_08-51-44.png]]

[[file:img/screenshot_2017-02-21_08-52-34.png]]

TODO: I should definitely write these functions on my own.

** Doctest
[[file:img/screenshot_2017-02-21_08-54-48.png]]

** Bridge Problem
[[file:img/screenshot_2017-02-24_07-57-15.png]]

** Quiz: Bridge Successors
*** My Old Solution
#+BEGIN_SRC python
  def bsuccessors(state):
      """Return a dict of {state:action} pairs. A state is a (here, there, t) tuple,
      where here and there are frozensets of people (indicated by their times) and/or
      the 'light', and t is a number indicating the elapsed time. Action is represented
      as a tuple (person1, person2, arrow), where arrow is '->' for here to there and
      '<-' for there to here."""
      here, there, t = state

      def picks(pos):
          for t in combinations(pos, 2):
              yield set(t)
          for t in combinations(pos, 3):
              yield set(t)


      def movers(pick):
          return pick - set(['light'])

      def action(ms, dir):
          return tuple(list(chain(ms, ms))[:2] + [dir])


      succs = {}
      for pick in picks(here):
          if 'light' in pick:
              ms = movers(pick)
              state2 = (here - set(pick), there | set(pick), t + max(ms))
              succs[state2] = action(ms, '->')
      for pick in picks(there):
          if 'light' in pick:
              ms = movers(pick)
              state2 = (here | set(pick), there - set(pick), t + max(ms))
              succs[state2] = action(ms, '<-')

      return succs
#+END_SRC

*** My New Solution
#+BEGIN_SRC python
  def bsuccessors(state):
      here, there, t = state
      if 'light' in here:
          fi, ti, arrow = (0, 1, '->')
      else:
          fi, ti, arrow = (1, 0, '<-')
      candidates = set((a, b)
                        for a in state[fi]
                        for b in state[fi]
                        if a != 'light' and b != 'light')
      succs = {}
      for c in candidates:
          fr_ = state[fi] - set(c) - set(['light'])
          to_ = state[ti] | set(c) | set(['light'])
          t_ = t + max(c)
          action = c + (arrow,)
          next_ = [None, None, t_]
          next_[fi] = fr_
          next_[ti] = to_
          succs[tuple(next_)] = action
      return succs
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-02-24_08-40-48.png]]

*** Feedback
I could mix ~for expressions~ and ~if expressions~ within a comprehension.
#+BEGIN_SRC python
  candidates = set((a, b)
                  for a in state[fi] if a is not 'light'
                  for b in state[fi] if b is not 'light')
#+END_SRC

#+BEGIN_QUOTE
If you have uncertainties that are going to cross barriers between lots of different functions,
then probably you want to nail them(the representations of the problem) down.
If you think they're contained, then it's okay to have some uncertainty and be able to explore the exact options later.
#+END_QUOTE


* Problem Set 4
** Quiz: Refactoring Bsuccessors
[[file:img/screenshot_2016-12-22_16-23-11.png]]
*** My Solution
#+BEGIN_SRC python
  HERE = 0
  THERE = 1

  def bsuccessors3(state):
      here, there, light = state
      ret = {}
      if light is HERE:
          choices = [frozenset([a, b]) for a in here for b in here]
          arrow = '->'
          for ts in choices:
              state = (here - ts, there | ts, THERE)
              action = (ts, arrow)
              ret[state] = action
      if light is THERE:
          choices = [frozenset([a, b]) for a in there for b in there]
          arrow = '<-'
          for ts in choices:
              state = (here | ts, there - ts, HERE)
              action = (ts, arrow)
              ret[state] = action
      return ret
#+END_SRC
*** His Solution
[[file:img/screenshot_2016-12-22_16-26-10.png]]

*** Feedback
I blindly solved the problem as before, even though the concept changed.
I thought that the interface forces me to keep the parameter orders of ~here~ and ~there~,
which causes to make duplications or to make the logic overly complicated.
The answer make a smaller function(~bsuccessor3(state, travelers)~) to isolate this restriction. it's cleaner than mine.
** Quiz: More Pour Problem
[[file:img/screenshot_2016-12-22_16-33-24.png]]

*** My Solution
#+BEGIN_SRC python
  def more_pour_problem(capacities, goal, start=None):
      start = start or tuple(0 for _ in capacities)

      def update(state, i, v):
          assert 0 <= v <= capacities[i]
          l = list(state)
          l[i] = v
          return tuple(l)

      def pour(state, i, j):
          total = state[i] + state[j]
          vj = min(total, capacities[j])
          vi = max(total-vj, 0)
          state2 = update(state, i, vi)
          state3 = update(state2, j, vj)
          return state3

      def successors(state):
          ret = {}
          for i, _ in enumerate(state):
              ret[update(state, i, capacities[i])] = ('fill', i)
              ret[update(state, i, 0)] = ('empty', i)
          for i, _ in enumerate(state):
              for j, _ in enumerate(state):
                  if i == j:
                      continue
                  ret[pour(state, i, j)] = ('pour', i, j)
          return ret

      def is_goal(state):
          return goal in state

      return shortest_path_search(start, successors, is_goal)
#+END_SRC
*** His Solution
[[file:img/screenshot_2016-12-22_17-16-01.png]]

[[file:img/screenshot_2016-12-22_17-18-27.png]]
*** Feedback
His and mine are almost same barring some tricky parts.
**** Naming
- ~replace~ is better than ~update~.  I think ~replaced~ would be even better.
- For returning variable, ~succ~ is better than ~ret~.  It's more readable within the function.
**** Logic
To implement ~pour~ logic, I calculated ~total~ and dispose it to both glasses.
He calculated the ~amount~ of moving water and add/subtract to/from both glasses.
While My way focuses on *how*, his way focuses on *what*.  I think his way is more natural.
**** Others
- ~tuple(0 for _ in capacities)~ vs ~(0,) * len(capacities)~
- This ~replace~ is more general.  Mine premises ~state~ is always a tuple.
** Quiz: Subway Planning
[[file:img/screenshot_2016-12-22_17-41-44.png]]
*** My Solution
#+BEGIN_SRC python
  from collections import defaultdict
  from itertools import combinations, izip, tee

  def pairs(iterable):
      a, b = tee(iterable)
      next(b)
      return izip(a, b)

  def subway(**lines):
      neighbors = defaultdict(dict)
      for line, spec in lines.viewitems():
          stations = spec.split()
          for a, b in pairs(stations):
              neighbors[a][b] = line
              neighbors[b][a] = line
      return neighbors

  def ride(here, there, system=boston):
      "Return a path on the subway system from here to there."
      def successors(station):
          return system[station]

      def is_goal(station):
          return station == there

      return shortest_path_search(here, successors, is_goal)

  def longest_ride(system):
      """"Return the longest possible 'shortest path'
      ride between any two stops in the system."""
      longest = []
      for a, b in combinations(system.viewkeys(), 2):
          path = ride(a, b, system)
          if len(longest) < len(path):
              longest = path
      return longest
#+END_SRC
*** His Solution
[[file:img/screenshot_2016-12-22_18-14-33.png]]

[[file:img/screenshot_2016-12-22_18-15-09.png]]
*** Feedback
I'm happy with the fact that my solution is almost same as his one.

**** Naming
- ~line~ vs ~linename~: ~linename~ is better.  It's more explicit
- ~stations~ vs ~stops~: I'm not a native speaker.  I don't know which one is better.
- ~pairs~ vs ~overlapping_pairs~: ~overlapping_pairs~ is better.  It's more explicit
- ~neighbors~ vs ~successors~: ~successors~ is better, because the term is used in the algorithm.
**** Logic
- I used ~collections~ library heavily.  He implemented the same logic with simple primitives.
- I should be familiar with ~max~.
**** Others
I read a guide about using ~lambda~ in python.  It advised not to use it almost every time because
it doesn't have a name.  But I think in this case (in ~ride~ implementation), ~lambda~ is way better for its simplicity.
