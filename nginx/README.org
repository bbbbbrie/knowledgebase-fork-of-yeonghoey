#+TITLE: nginx

* Table of Contents :TOC_3_gh:
 - [[#beginners-guide][Beginner's Guide]]
   - [[#processes][Processes]]
   - [[#directives][Directives]]
 - [[#references][References]]
   - [[#core][core]]
     - [[#events][events]]
     - [[#include][include]]
     - [[#worker_processes][worker_processes]]
   - [[#http][http]]
     - [[#location][location]]
     - [[#types][types]]
   - [[#proxy][proxy]]
     - [[#proxy_pass][proxy_pass]]
     - [[#proxy_redirect][proxy_redirect]]
     - [[#proxy_hide_header][proxy_hide_header]]
   - [[#rewrite][rewrite]]
     - [[#rewrite-1][rewrite]]
 - [[#use-cases][Use Cases]]
   - [[#reverse-proxy-with-preserving-request-host][Reverse Proxy with preserving request host]]
   - [[#server-block-examples][Server Block Examples]]
 - [[#links][Links]]

* Beginner's Guide
- http://nginx.org/en/docs/beginners_guide.html

#+BEGIN_SRC shell
  $ nginx -s stop   # fast shutdown
  $ nginx -s quit   # graceful shutdown
  $ nginx -s reload # reloading the configuration file
  $ nginx -s reopen # reopening the log files
#+END_SRC

** Processes
- one master process and several worker processes
- master process reads and evaluates configuration, and maintain worker processes.

** Directives
- simple: ~name~ and ~parameters~, separated by ~spaces~, ends with ~;~
- block: Instead of the semicolon, it ends with a block surrounded by ~{}~
- A block surrounding directives is called a ~context~
- Top level context is called the ~main context~
- ~#~ to comment a line

* References
** core
- http://nginx.org/en/docs/ngx_core_module.html

*** events
- http://nginx.org/en/docs/ngx_core_module.html#events
- Where directives relating connection processing are placed

#+BEGIN_EXAMPLE
#+BEGIN_EXAMPLE
  events {
      use kqueue;
      worker_connections 2048;
  }
#+END_EXAMPLE

*** include
- http://nginx.org/en/docs/ngx_core_module.html#include
- Directives in files are inlcuded in the current context

#+BEGIN_EXAMPLE
  include mime.types;
  include vhosts/*.conf;
#+END_EXAMPLE
*** worker_processes
- http://nginx.org/en/docs/ngx_core_module.html#worker_processes
- Setting it to the number of available CPU cores would be a good start
- The value ~auto~ will try to autodetect it

#+BEGIN_EXAMPLE
  worker_processes auto;
#+END_EXAMPLE

** http
- http://nginx.org/en/docs/http/ngx_http_core_module.html

*** location
- http://nginx.org/en/docs/http/ngx_http_core_module.html#location
- The matching is performed against a *normalized* URI,
- *normalized* URI
  - Decoding the text encoded in the “%XX” form
  - resolving references to relative path components “.” and “..”
  - possible compression of two or more adjacent slashes into a single slash.


- If there exists exact match(~=~) its configuration used
- Pick the longest prefix match
- Regex checked, in order of appearance
  1. first regex match configuration used
  2. no regex match, the longest prefix match used.

#+BEGIN_EXAMPLE
  location = / {
      [ configuration A ]
  }

  location / {
      [ configuration B ]
  }

  location /documents/ {
      [ configuration C ]
  }

  # '^~' modifier skips regex check
  location ^~ /images/ {
      [ configuration D ]
  }

  # '~*' modifier for regex case insensitive match
  # '~' for case sensitive
  location ~* \.(gif|jpg|jpeg)$ {
      [ configuration E ]
  }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  /                        -> A
  /index.html              -> B
  /documents/document.html -> C
  /images/1.gif            -> D
  /documents/1.jpg         -> E
#+END_EXAMPLE
*** types
- http://nginx.org/en/docs/http/ngx_http_core_module.html#types
- Maps file name extensions to MIME types of responses

#+BEGIN_EXAMPLE
  types {
      text/html  html;
      image/gif  gif;
      image/jpeg jpg;
  }
#+END_EXAMPLE

** proxy
*** proxy_pass
- http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass

If the ~proxy_pass~ directive is specified with a URI, then when a request is passed to the server,
the part of a *normalized* request URI matching the location is replaced by a URI specified in the directive:
#+BEGIN_EXAMPLE
  location /name/ {
      proxy_pass http://127.0.0.1/remote/;
  }
#+END_EXAMPLE
~/name~ will be replaced with ~/remote~

If ~proxy_pass~ is specified without a URI,
the request URI is passed to the server *in the same form* as sent by a client when the original request is processed,
or the full normalized request URI is passed when processing the changed URI:

#+BEGIN_EXAMPLE
  location /name/ {
      rewrite    /name/([^/]+) /users?name=$1 break;
      proxy_pass http://127.0.0.1;
  }
#+END_EXAMPLE
In this case, the URI specified in the directive is ignored and
the full changed request URI is passed to the server.

*** proxy_redirect
- http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect
- Sets the text that should be changed in the ~Location~ and ~Refresh~ header fields of a proxied server response
#+BEGIN_EXAMPLE
  # will rewrite this string to “Location: http://frontend/one/some/uri/”.
  proxy_redirect http://localhost:8000/two/ http://frontend/one/;
#+END_EXAMPLE

*** proxy_hide_header
- http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_hide_header
- By default, nginx does not pass the header fields ~Date~, ~Server~, ~X-Pad~, and ~X-Accel-...~ from the response of a proxied server to a client.
- The proxy_hide_header directive sets additional fields that will not be passed
- [[http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header][proxy_pass_header]] for the opposite

** rewrite
- http://nginx.org/en/docs/http/ngx_http_rewrite_module.html

*** rewrite
- http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
- https://serverfault.com/questions/379675/nginx-reverse-proxy-url-rewrite

#+BEGIN_EXAMPLE
  location  /foo {
    rewrite /foo(.*) /$1  break;
    proxy_pass         http://localhost:3200;
    proxy_redirect     off;
    proxy_set_header   Host $host;
  }
#+END_EXAMPLE

* Use Cases
** Reverse Proxy with preserving request host
- https://www.nginx.com/resources/admin-guide/reverse-proxy/
- http://stackoverflow.com/questions/5834025/how-to-preserve-request-url-with-nginx-proxy-pass

It seems that some hosts use ~Host~ header to redirect the client.
nginx passes ~$proxy_host~, which contains the address of proxied server, by default.

Some proxied servers redirect the client to a URL of their original host.
By setting ~proxy_set_header Host $host~, nginx passes ~Host~ as its own address.
By this, nginx keep clients communicating with it.

#+BEGIN_EXAMPLE
  user www-data www-data;
  worker_processes auto;

  events {
  }

  http {
    server {
      listen 80;
      location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
      }
    }
  }
#+END_EXAMPLE

** Server Block Examples
- https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/
- Same as ~Virtual Host~ of Apache

* Links
- http://wiki.nginx.org/pitfalls
- http://wiki.nginx.org/configuration
- https://github.com/perusio/nginx_ensite
- https://github.com/nginx-boilerplate/nginx-boilerplate
