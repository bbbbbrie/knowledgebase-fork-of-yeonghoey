#+TITLE: go

* Table of Contents :TOC_1_gh:
- [[#language][Language]]
- [[#command][Command]]
- [[#topics][Topics]]

* Language
** error
#+BEGIN_SRC go
  fmt.Errorf("parsing %s as HTML: %v", url, err)
#+END_SRC

#+BEGIN_QUOTE
Because error messages are frequently chained together,
message strings should not be capitalized and newlines should be avoided.
#+END_QUOTE

** log
#+BEGIN_SRC go
  log.Fatalf("Site is down: %v\n", err)
#+END_SRC

** range
#+BEGIN_SRC go
  slice, kvs := []int{...}, map[string]string{...}
  for _, num := range nums {}  // if idx not needed
  for i, num := range nums {}
  for k, v := range kvs {}
  for k := range kvs {}        // just keys
  for i, c := range "go" {}    // 'c' is 'rune' of the string
#+END_SRC

:REFERENCES:
- https://gobyexample.com/range
:END:

* Command
** go get
#+BEGIN_SRC shell
  go get     # when getting a github repo, it uses `git clone'
  go get -t  # also test dependencies
#+END_SRC

** godoc
#+BEGIN_SRC shell
  godoc -http=:6060
#+END_SRC

:REFERENCES:
- https://godoc.org/golang.org/x/tools/cmd/godoc
:END:

* Topics
** GOPATH
The ~GOPATH~ environment variable specifies the location of your workspace.
- The default value is  ~$HOME/go~
- Put ~export PATH=$PATH:$(go env GOPATH)/bin~ to rc files for convenience.
- Read details with ~go help gopath~.

:REFERENCES:
- https://golang.org/doc/code.html
:END:

** Workspaces
- Go programmers typically keep all their Go code in a single workspace.
- A workspace contains many version control repositories (managed by Git, for example).
- Each repository contains one or more packages.
- Each package consists of one or more Go source files in a single directory.
- The path to a package's directory determines its import path.

A workspace is a directory hierarchy with three directories at its root:

- ~src~ contains Go source files,
- ~pkg~ contains package objects, and
- ~bin~ contains executable commands.

#+BEGIN_EXAMPLE
  bin/
      hello   # command executable
      outyet  # command executable
  pkg/
      linux_amd64/
          github.com/golang/example/
              stringutil.a  # package object
  src/
    github.com/golang/example/
      .git/           # Git repository metadata
      hello/
        hello.go      # command source
      outyet/
        main.go       # command source
        main_test.go  # test source

    golang.org/x/image/
      .git/
      bmp/
        reader.go
        writer.go
#+END_EXAMPLE

:REFERENCES:
- https://golang.org/doc/code.html
:END:

** Documenting Packages

ToHTML Rules from https://golang.org/pkg/go/doc/#ToHTML:
- Each span of unindented non-blank lines is converted into a single paragraph.
- A span that consists of a single line, is followed by another paragraph span, begins with a capital letter, and contains no punctuation is formatted as a heading.
- A span of indented lines is converted into a <pre> block, with the common indent prefix removed.
- URLs in the comment text are converted into links;
- Go identifiers that appear in the words map are italicized

Package documentation rules:
- A comment immediately preceding a ~pacakge~ declaration is considered the document for the package
#+BEGIN_SRC go
  // Package sort provides primitives for sorting slices and user-defined
  // collections.
  package sort
#+END_SRC

- Go doc comments are always complete sentences, and the first sentence is usually a summary that starts with the name being declared.
#+BEGIN_SRC go
  // Fprint formats using the default formats for its operands and writes to w.
  // Spaces are added between operands when neither is a string.
  // It returns the number of bytes written and any write error encountered.
  func Fprint(w io.Writer, a ...interface{}) (n int, err error) {
#+END_SRC

- Comments that are not adjacent to a top-level declaration are omitted from godoc's output, with one notable exception.
- Top-level comments that begin with the word "BUG(who)” are recognized as known bugs, and included in the "Bugs” section of the package documentation.

#+BEGIN_SRC go
  // BUG(r): The rule Title uses for word boundaries does not handle Unicode punctuation properly.
#+END_SRC

- ~Example<Name>~ functions in ~<name>_test.go~ are included as examples

:REFERENCES:
- http://www.gopl.io/ Book, 10.7.4
- https://golang.org/pkg/go/doc/#ToHTML
- https://blog.golang.org/godoc-documenting-go-code
- https://godoc.org/github.com/fluhus/godoc-tricks
- https://golang.org/pkg/testing/#hdr-Examples
- https://golang.org/src/encoding/gob/doc.go
:END:
