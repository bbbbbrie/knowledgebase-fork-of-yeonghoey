#+TITLE: AWS

* Table of Contents :TOC_3_gh:
- [[#reference][Reference]]
  - [[#resources][Resources]]
    - [[#aws_eip][aws_eip]]
    - [[#aws_elasticsearch_domain][aws_elasticsearch_domain]]
    - [[#aws_elb][aws_elb]]
    - [[#aws_iam_role][aws_iam_role]]
    - [[#aws_lambda_function][aws_lambda_function]]
    - [[#aws_rds_cluster][aws_rds_cluster]]
    - [[#aws_rds_cluster_instance][aws_rds_cluster_instance]]
    - [[#aws_default_security_groups][aws_default_security_groups]]
    - [[#aws_security_group][aws_security_group]]
  - [[#data-sources][Data Sources]]
    - [[#aws_ami][aws_ami]]
- [[#how-to][How-to]]
  - [[#set-up-a-vpc][Set up a VPC]]
  - [[#create-an-instance][Create an instance]]
  - [[#create-an-instance-profile][Create an instance profile]]
  - [[#set-up-static-website-with-s3][Set up static website with S3]]

* Reference
** Resources
*** aws_eip
#+BEGIN_SRC terraform
  resource "aws_eip" "main" {
    count    = "${var.num_hosts_eip}"
    instance = "${aws_instance.main.*.id}"

    # terraform tries to modify all eips when `count` changes.
    # This is a workaround for this.
    # SEE: https://github.com/hashicorp/terraform/issues/4944#issuecomment-248884637
    lifecycle {
      ignore_changes = ["instance"]
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/eip.html
- https://github.com/hashicorp/terraform/issues/4944#issuecomment-248884637
:END:

*** aws_elasticsearch_domain
#+BEGIN_SRC terraform
  resource "aws_elasticsearch_domain" "main" {
    domain_name           = "my-domain"
    elasticsearch_version = "5.1"

    cluster_config {
      instance_type  = "m3.medium.elasticsearch"
      instance_count = 3
    }

    ebs_options {
      ebs_enabled = true
      volume_type = "gp2"
      volume_size = "30" # in GBs per data instance
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain.html
- https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain_policy.html
:END:

*** aws_elb
#+BEGIN_SRC terraform
  resource "aws_elb" "endpoint" {
    name            = "my-elb"
    subnets         = ["${var.subnet_ids}"]
    security_groups = ["${var.security_groups}"]
    instances       = ["${aws_instance.cluster.*.id}"]

    internal = true

    listener {
      instance_port     = 8080
      instance_protocol = "http"
      lb_port           = 80
      lb_protocol       = "http"
    }

    health_check {
      target              = "HTTP:8080/"
      timeout             = 5
      interval            = 30
      unhealthy_threshold = 2
      healthy_threshold   = 10
    }

    tags {
      Cluster = "${var.cluster}"
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/elb.html
:END:

*** aws_iam_role
#+BEGIN_SRC terraform
  resource "aws_iam_role" "main" {
    name = "${var.name}"

    assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
  }

  resource "aws_iam_role_policy" "kinesis" {
    name = "${aws_iam_role.main.name}-kinesis"
    role = "${aws_iam_role.main.id}"

    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "kinesis:DescribeStream",
        "kinesis:GetRecords",
        "kinesis:GetShardIterator",
        "kinesis:ListStreams",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "${var.kinesis_arn}"
    }
  ]
}
EOF
  }

  resource "aws_iam_role_policy" "cloudwatch" {
    name = "${aws_iam_role.main.name}-cloudwatch"
    role = "${aws_iam_role.main.id}"

    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}
EOF
  }

  # Needs a few seconds to replicate your new role through all regions.
  # SEE: http://stackoverflow.com/questions/37503075/invalidparametervalueexception-the-role-defined-for-the-function-cannot-be-assu
  resource "null_resource" "sleep" {
    triggers {
      role = "${aws_iam_role.main.arn}"
    }

    provisioner "local-exec" {
      command = "sleep 15"
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/d/iam_role.html
:END:

*** aws_lambda_function
#+BEGIN_SRC terraform
  data "archive_file" "code" {
    type        = "zip"
    source_file = "${path.module}/main.py"
    output_path = "${path.module}/lambda.zip"
  }

  resource "aws_lambda_function" "main" {
    function_name    = "lambda-kinesis"
    filename         = "${data.archive_file.code.output_path}"
    source_code_hash = "${data.archive_file.code.output_base64sha256}"
    handler          = "main.handle"
    runtime          = "python2.7"
    role             = "${var.role_arn}"
    memory_size      = 128
    timeout          = 10

    environment {
      variables {
        MY_ENV = "test"
      }
    }
  }

  resource "aws_lambda_event_source_mapping" "kinesis" {
    function_name     = "${aws_lambda_function.main.arn}"
    event_source_arn  = "${var.kinesis_arn}"
    batch_size        = 1000
    starting_position = "LATEST"
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/lambda_function.html
- https://www.terraform.io/docs/providers/aws/r/lambda_event_source_mapping.html
:END:

*** aws_rds_cluster
*** aws_rds_cluster_instance
#+BEGIN_SRC terraform
  resource "aws_rds_cluster" "cluster" {
    db_cluster_parameter_group_name = "default.aurora5.6"
    cluster_identifier              = "mydb"

    db_subnet_group_name   = "default-vpc-abcd1234"
    vpc_security_group_ids = ["${data.terraform_remote_state.vpc.sg_default}"]
    availability_zones     = ["ap-northeast-1a", "ap-northeast-1c"]

    skip_final_snapshot = true

    database_name   = "mydb"
    master_username = "root"
    master_password = "1234"
  }

  resource "aws_rds_cluster_instance" "node" {
    count          = 2
    instance_class = "db.t2.medium"
    identifier     = "mydb-${count.index}"

    cluster_identifier   = "${aws_rds_cluster.cluster.id}"
    db_subnet_group_name = "default-vpc-abcd1234"
  }
#+END_SRC

*** aws_default_security_groups
When creating a ~VPC~, AWS automatically creates a ~default~ security group that can not be deleted 
To manage it with Terraform, Terraform provides a dedicated resource type.
Before you make any changes, be sure to read the link below.

#+BEGIN_SRC terraform
  resource "aws_default_security_group" "default" {
    vpc_id = "${aws_vpc.main.id}"

    ingress {
      from_port       = 0
      to_port         = 0
      protocol        = "-1"
      security_groups = []
      self            = true
    }

    egress {
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = ["::/0"]
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/default_security_group.html
:END:

*** aws_security_group
#+BEGIN_SRC terraform
  resource "aws_security_group" "default" {
    name   = "${var.project}-default"
    vpc_id = "${aws_vpc.main.id}"

    ingress {
      from_port       = 0
      to_port         = 0
      protocol        = "-1" # all
      security_groups = []
      self            = true
    }

    egress {
      from_port   = 0
      to_port     = 0
      protocol    = "-1" # all
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  resource "aws_security_group" "icmp" {
    name   = "${var.project}-icmp"
    vpc_id = "${aws_vpc.main.id}"

    ingress {
      from_port   = -1 # all
      to_port     = -1
      protocol    = "icmp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  resource "aws_security_group" "ping" {
    name   = "${var.project}-ping"
    vpc_id = "${aws_vpc.main.id}"

    ingress {
      from_port   = 8 # echo
      to_port     = -1
      protocol    = "icmp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  resource "aws_security_group" "ssh" {
    name   = "${var.project}-ssh"
    vpc_id = "${aws_vpc.main.id}"

    ingress {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/r/security_group.html
- http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html
:END:

** Data Sources
*** aws_ami
#+BEGIN_SRC terraform
  data "aws_ami" "ubuntu1604" {
    most_recent = true

    filter {
      name   = "name"
      values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
    }

    filter {
      name   = "virtualization-type"
      values = ["hvm"]
    }

    owners = ["099720109477"] # Canonical
  }
#+END_SRC

#+BEGIN_SRC terraform
  data "aws_ami" "my_image1" {
    most_recent = true

    filter {
      name   = "state"
      values = ["available"]
    }

    filter {
      name   = "tag:Name"
      values = ["My Image"]
    }
  }
#+END_SRC

#+BEGIN_SRC terraform
  data "aws_ami" "my_image2" {
    most_recent = true

    filter {
      name   = "state"
      values = ["available"]
    }

    filter {
      name   = "name"
      values = ["my-image-*"]
    }
  }
#+END_SRC

:REFERENCES:
- https://www.terraform.io/docs/providers/aws/d/ami.html
- http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html
:END:

* How-to
** Set up a VPC
- ~terrafrom~ will hang when destroying subnets if there are running instances on them.

#+BEGIN_SRC terraform
  resource "aws_vpc" "main" {
    cidr_block = "10.0.0.0/16"

    tags {
      Name = "main"
    }
  }

  resource "aws_subnet" "main_public_a" {
    vpc_id            = "${aws_vpc.main.id}"
    cidr_block        = "10.0.0.0/20"
    availability_zone = "eu-west-1a"

    tags {
      Name = "main-public-a"
    }
  }

  resource "aws_internet_gateway" "main" {
    vpc_id = "${aws_vpc.main.id}"

    tags {
      Name = "main"
    }
  } 
  resource "aws_route_table" "main" {
    vpc_id = "${aws_vpc.main.id}"

    route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.main.id}"
    }

    tags {
      Name = "main"
    }
  }

  resource "aws_main_route_table_association" "main" {
    vpc_id         = "${aws_vpc.main.id}"
    route_table_id = "${aws_route_table.main.id}"
  }
#+END_SRC

** Create an instance
#+BEGIN_SRC terraform
  data "aws_ami" "ubuntu1404" {
    most_recent = true

    filter {
      name   = "name"
      values = ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"]
    }

    filter {
      name   = "virtualization-type"
      values = ["hvm"]
    }

    owners = ["099720109477"] # Canonical
  }

  resource "aws_instance" "main" {
    ami           = "${data.aws_ami.ubuntu1404.id}"
    instance_type = "t2.micro"

    # Even though there's aws_key_pair,
    # it's better to create a new one on web console manually.
    key_name      = "${var.key_name}"
    subnet_id     = "${data.terraform_remote_state.vpc.main_public_a}"
  }

  resource "aws_eip" "main" {
    instance = "${aws_instance.main.id}"
  }
#+END_SRC

** Create an instance profile
#+BEGIN_SRC terraform
  resource "aws_iam_instance_profile" "main" {
    name = "my-profile"
    role = "${aws_iam_role.main.name}"
  }

  resource "aws_iam_role" "main" {
    name = "my-role"

    assume_role_policy = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Action": "sts:AssumeRole",
        "Principal": {
          "Service": "ec2.amazonaws.com"
        },
        "Effect": "Allow",
        "Sid": ""
      }
    ]
  }
  EOF
  }

  resource "aws_iam_role_policy" "main" {
    name = "my-role-allow-s3"
    role = "${aws_iam_role.main.id}"

    policy = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "${aws_s3_bucket.main.arn}"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
        ],
        "Resource": [
          "${aws_s3_bucket.main.arn}/*"
        ]
      }
    ]
  }
  EOF
  }
#+END_SRC

:REFERENCES:
- https://github.com/yeonghoey/yeonghoey/blob/master/aws/iam.org#s3
:END:

** Set up static website with S3
#+BEGIN_SRC terraform
  resource "aws_s3_bucket" "main" {
    bucket = "${var.bucket}"
    policy = <<EOF
  {
    "Version":"2012-10-17",
    "Statement":[
      {
        "Effect":"Allow",
        "Principal": "*",
        "Action": ["s3:GetObject"],
        "Resource": ["arn:aws:s3:::${var.bucket}/*"]
      }
    ]
  }
  EOF

    website {
      index_document = "index.html"
      error_document = "index.html" # SPA
    }
  }
#+END_SRC
