#+TITLE: R

* Table of Contents :TOC_2_gh:
- [[#overview][Overview]]
- [[#basics][Basics]]
  - [[#array-matrix][array, matrix]]
  - [[#assign][assign]]
  - [[#attr-attributes][attr, attributes]]
  - [[#class-mode][class, mode]]
  - [[#dataframe][data.frame]]
  - [[#factor][factor]]
  - [[#function][function]]
  - [[#help][help]]
  - [[#ifelse][ifelse]]
  - [[#length][length]]
  - [[#list][list]]
  - [[#na][NA]]
  - [[#tapply][tapply]]
  - [[#vector][vector]]
- [[#probability-distributions][Probability distributions]]
- [[#statistical-models-in-r][Statistical models in R]]
  - [[#formula][formula]]
  - [[#lm][lm]]
- [[#graphical-procedures][Graphical procedures]]
  - [[#graphics-parameters-list][Graphics parameters list]]
- [[#packages][Packages]]
- [[#topics][Topics]]
  - [[#oo-systems][OO Systems]]
  - [[#the-recycling-rule-of-mixed-vector-and-array-arithmetic][The Recycling Rule of Mixed vector and array arithmetic]]
  - [[#rscript-vs-r-cmd-batch][~Rscript~ vs ~R CMD BATCH~]]
- [[#how-to][How-to]]
  - [[#format-numeric-as-percent][Format numeric as percent]]
  - [[#assert-conditions][Assert conditions]]
  - [[#order-factor-elements][Order factor elements]]
  - [[#remove-na-values-from-a-vector][Remove NA values from a vector]]

* Overview

:REFERENCES:
- https://www.povertyactionlab.org/sites/default/files/r-cheat-sheet.pdf
:END:

[[file:_img/5637cbaf157434e607527184d848dc7331c0e47a.png]]

[[file:_img/ab67ab3c388482a32d5d4c2233894820336e10e5.png]]

[[file:_img/65cfcd62cc5c4d4e46cb7518a3c54b55e5d85275.png]]

[[file:_img/285cad1c433f2ed8c3590c443ec1e5a42798410f.png]]

* Basics
- R is case sensitive
- Symbols: ~[A-Za-z][.0-9A-Za-z_]*~ or ~[.]([A-Za-z][.0-9A-Za-z_]*)?~
- ~character~ can be expressed by ~'foo~ or ~"foo"~ . Usually ~"foo"~ is preferred.
- Commands are separated either by a semi-colon(~;~) or by a newline(~\n~).
- Commands can be grouped by braces(~{}~)
- Comments can be put almost everywhere, staring with ~#~

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#R-commands_002c-case-sensitivity_002c-etc_002e
:END:

** array, matrix
- a multiply subscripted collection of data entries

#+BEGIN_SRC R :results output :exports both
  x = 1:9
  dim(x) <- c(3, 3)
  x
  array(1:9, dim = c(3, 3))
  matrix(1:9, nrow = 3, ncol = 3)
#+END_SRC

#+RESULTS:
#+begin_example
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
#+end_example

#+BEGIN_SRC R :results output :exports both
  x = 1:3
  y = 1:3 * 10
  z = 1:3 * 100
  cbind(x, y, z)                      # column named are bound as their variable name
  cbind(col1 = x, col2 = y, col3 = z) # specify column names explicitly
#+END_SRC

#+RESULTS:
:      x  y   z
: [1,] 1 10 100
: [2,] 2 20 200
: [3,] 3 30 300
:      col1 col2 col3
: [1,]    1   10  100
: [2,]    2   20  200
: [3,]    3   30  300

#+BEGIN_SRC R :results output :exports both
  x <- matrix(1:9, 3, 3)
  x
  i <- array(c(1:3,3:1), dim = c(3, 2))
  x[i] # === c(x[1, 3], x[2, 2], x[3, 1])
  x[i] <- 0
  x
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    4    7
: [2,]    2    5    8
: [3,]    3    6    9
: [1] 7 5 3
:      [,1] [,2] [,3]
: [1,]    1    4    0
: [2,]    2    0    8
: [3,]    0    6    9

#+BEGIN_SRC R :results output :exports both
  A <- matrix(1:4, 2, 2)
  B <- matrix(4:1, 2, 2)
  A * B     # element-wise product
  A %*% B   # matrix product
  solve(A)  # inverse
#+END_SRC

#+RESULTS:
:      [,1] [,2]
: [1,]    4    6
: [2,]    6    4
:      [,1] [,2]
: [1,]   13    5
: [2,]   20    8
:      [,1] [,2]
: [1,]   -2  1.5
: [2,]    1 -0.5

#+BEGIN_SRC R :results output :exports both
  A <- matrix(1:4, 2, 2)
  # To vector
  as.vector(A)
  c(A)
#+END_SRC

#+RESULTS:
: [1] 1 2 3 4
: [1] 1 2 3 4

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Arrays-1
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#The-concatenation-function_002c-c_0028_0029_002c-with-arrays
:END:

** assign
#+BEGIN_SRC R
  # following lines are all the same
  x <- 0
  0 -> x
  x = 0
  assign("x", 0)
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Vectors-and-assignment-1
:END:

** attr, attributes
#+BEGIN_SRC R :results output :exports both
  z <- matrix(0, nrow = 3, ncol = 3)
  attributes(z)
  attr(z, "dim")
  z
  attr(z, "dim") <- 9
  z
#+END_SRC

#+RESULTS:
: $dim
: [1] 3 3
: 
: [1] 3 3
:      [,1] [,2] [,3]
: [1,]    0    0    0
: [2,]    0    0    0
: [3,]    0    0    0
: [1] 0 0 0 0 0 0 0 0 0

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Getting-and-setting-attributes-1
:END:

** class, mode
- ~class~ is similar to the class from other languages
- ~mode~ is a kind of /atomic types/

#+BEGIN_SRC R :results output :exports both
  x <- 10
  class(x)
  unclass(x)  # remove temporarily the effects of class
#+END_SRC

#+RESULTS:
: [1] "numeric"
: NULL
: [1] 10

#+BEGIN_SRC R :results output :exports both
  mode(TRUE)
  mode(0)
  mode(1i)
  mode("foo")
#+END_SRC

#+RESULTS:
: [1] "logical"
: [1] "numeric"
: [1] "complex"
: [1] "character"

#+BEGIN_EXAMPLE
  > mean
  function (x, ...)
  UseMethod("mean")
#+END_EXAMPLE

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Intrinsic-attributes_003a-mode-and-length
:END:

** data.frame
A kind of ~list~ but:
- The components must be vectors (numeric, character, or logical), factors, numeric matrices, lists, or other data frames.
- Matrices, lists, and data frames provide as many variables to the new data frame as they have columns, elements, or variables, respectively.
- Numeric vectors, logicals and factors are included as is, and by default18 character vectors are coerced to be factors, whose levels are the unique values appearing in the vector.
- Vector structures appearing as variables of the data frame must all have the same length, and matrix structures must all have the same row size.

#+BEGIN_SRC R :results output :exports both
  class(data.frame(1, 2, 3))
  mode(data.frame(1, 2, 3))
#+END_SRC

#+RESULTS:
: [1] "data.frame"
: [1] "list"

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Data-frames-1
:END:

** factor
- R provides both ordered and unordered factors.

#+BEGIN_SRC R :results output :exports both
  sz <- c("M", "L", "S", "XL")
  sz1 <- factor(sz)  # Levels are sorted by alphabetical order by default
  sz1
  sz2 <- factor(sz, levels = c("S", "M", "L", "XL"))
  sz2
  sz3 <- factor(sz, ordered = FALSE)
  sz3
  levels(sz1)
  levels(sz2)
  table(sz2)  # a contingency table of the counts
#+END_SRC

#+RESULTS:
#+begin_example
[1] M  L  S  XL
Levels: L M S XL
[1] M  L  S  XL
Levels: S M L XL
[1] M  L  S  XL
Levels: L M S XL
[1] "L"  "M"  "S"  "XL"
[1] "S"  "M"  "L"  "XL"
sz2
 S  M  L XL 
 1  1  1  1 
#+end_example

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Ordered-and-unordered-factors
:END:

** function
- any ordinary assignments done within the function are local and temporary and are lost after exit from the function

#+BEGIN_SRC R
  # define new binary operator
  "%!%" <- function(X, y) { … }
#+END_SRC

#+BEGIN_SRC R
  fun1 <- function(data, data.frame, graph, limit) {
    [function body omitted]
  }

  ans <- fun1(d, df, TRUE, 20)
  ans <- fun1(d, df, graph=TRUE, limit=20)
  ans <- fun1(data=d, limit=20, graph=TRUE, data.frame=df)
#+END_SRC

#+BEGIN_SRC R :results output :exports both
  foo <- function(..., x = 100) {
    c(..., x)
  }
  foo(1, 2, 3)
  foo(1, 2, x = 3)

  bar <- function(...) {
    c(..1, ..3)
  }
  bar(1, 2, 3)
#+END_SRC

#+RESULTS:
: [1]   1   2   3 100
: [1] 1 2 3
: [1] 1 3

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Writing-your-own-functions-1
:END:

** help
#+BEGIN_SRC R
  help(solve)         # same as ?solve
  help("[[")          # about the syntax of [[
  help.start()        # show help main page
  help.search(solve)  # same as ??solve
  example(solve)      # run the examples in the help page
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Getting-help-with-functions-and-features
:END:

** [[https://www.rdocumentation.org/packages/base/versions/3.5.0/topics/ifelse][ifelse]]
** length
#+BEGIN_SRC R :results output :exports both
  x <- numeric()
  x[3] <- 5
  x
#+END_SRC

#+RESULTS:
: [1] NA NA  5
: [1] 3

#+BEGIN_SRC R :results output :exports both
  x <- 1:5
  length(x) <- 2
  x
#+END_SRC

#+RESULTS:
: [1] 1 2

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Changing-the-length-of-an-object-1
:END:

** list
#+BEGIN_SRC R :results output :exports both
  family <- list(name="Fred", wife="Mary", no.children=3, child.ages=c(4,7,9))
  family$name
  family[["wife"]]  # element
  family["wife"]    # sublist
#+END_SRC

#+RESULTS:
: [1] "Fred"
: [1] "Mary"

#+BEGIN_SRC R :results output :exports both
  x <- list(1, 2, 3)
  x[4] <- list(4)
  x
#+END_SRC

#+RESULTS:
#+begin_example
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

#+end_example

#+BEGIN_SRC R :results output :exports both
  x <- list("a", "b")
  y <- list("x", "y")
  c(x, y)  # concat
#+END_SRC

#+RESULTS:
#+begin_example
[[1]]
[1] "a"

[[2]]
[1] "b"

[[3]]
[1] "x"

[[4]]
[1] "y"

#+end_example

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Lists-1
:END:

** NA
- Stands for Not Available
- Most functions have ~na.rm~ parameter that excludes ~NA~ when it's ~TRUE~

#+BEGIN_SRC R
  is.na(x)
  mean(x, na.rm = TRUE)
#+END_SRC

** tapply
- Apply a function to each cell of a ragged array
- The combination of a vector and a labelling factor is an example of what is sometimes called a ragged array since the subclass sizes are possibly irregular.

#+BEGIN_SRC R :results output :exports both
  x <- 1:5
  y <- factor(c("a", "b", "a", "b", "c"))
  tapply(x, y, mean)
  tapply(x, y, length)
#+END_SRC

#+RESULTS:
: a b c 
: 2 3 5 
: a b c 
: 2 2 1 

** vector
#+BEGIN_SRC R
  1 + 2 - 3 * 4 / (5 ^ 6)
  a <- c(1,2,3,4)
  sqrt(a)
  exp(a)
  log(a)
  a <- c(1,2,3)
  b <- c(10,11,12,13)
  # shows warninging: not a multiple of shorter one
  a + b
#+END_SRC

#+BEGIN_SRC R
  mean(x)
  median(x)
  quantile(x)
  min(x)
  max(x)
  range(x)  # c(min(x), max(x))
  var(x)
  sd(x)
#+END_SRC

#+BEGIN_SRC R :results output :exports both
  1:3
  3:1
  seq(1, 3, by = 1)
  rep(0, times = 3)
#+END_SRC

#+RESULTS:
: [1] 1 2 3
: [1] 3 2 1
: [1] 1 2 3
: [1] 0 0 0

#+BEGIN_SRC R :results output :exports both
  n <- 3
  1:n-1    # === 1:3 - 1
  1:(n-1)  # === 1:2
#+END_SRC

#+RESULTS:
: [1] 0 1 2
: [1] 1 2

#+BEGIN_SRC R :results output :exports both
  x <- 1:5
  x > 3
  x[x > 3]
#+END_SRC

#+RESULTS:
: [1] FALSE FALSE FALSE  TRUE  TRUE
: [1] 4 5

#+BEGIN_SRC R
  x[1]
  x[3]
  x[-2]      # everything except the 2nd element
  x[1:3]     # 1st - 3rd elements
  x[c(1, 4)] # 1st, and 4th elements

  z = c(TRUE, FALSE, TRUE, FALSE, TRUE)
  x[z]  # corresponding TRUE elements
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Simple-manipulations_003b-numbers-and-vectors
- https://www.cyclismo.org/tutorial/R/basicOps.html
:END:

* Probability distributions
| Distribution      | R name   | additional arguments |
|-------------------+----------+----------------------|
| beta              | beta     | shape1, shape2, ncp  |
| binomial          | binom    | size, prob           |
| Cauchy            | cauchy   | location, scale      |
| chi-squared       | chisq    | df, ncp              |
| exponential       | exp      | rate                 |
| F                 | f        | df1, df2, ncp        |
| gamma             | gamma    | shape, scale         |
| geometric         | geom     | prob                 |
| hypergeometric    | hyper    | m, n, k              |
| log-normal        | lnorm    | meanlog, sdlog       |
| logistic          | logis    | location, scale      |
| negative binomial | nbinom   | size, prob           |
| normal            | norm     | mean, sd             |
| Poisson           | pois     | lambda               |
| signed rank       | signrank | n                    |
| Student’s t       | t        | df, ncp              |
| uniform           | unif     | min, max             |
| Weibull           | weibull  | shape, scale         |
| Wilcoxon          | wilcox   | m, n                 |

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Probability-distributions-1
:END:

* Statistical models in R
-----
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Statistical-models-in-R-1

** formula
The operator =~= is used to define a model formula in R.

#+BEGIN_EXAMPLE
  response ~ op_1 term_1 op_2 term_2 op_3 term_3 …
#+END_EXAMPLE

- response :: is a vector or matrix, (or expression evaluating to a vector or matrix) defining the response variable(s).
- op_i   :: is an operator, either ~+~ or ~-~, implying the inclusion or exclusion of a term in the model, (the first is optional).
- term_i :: is either
  - a vector or matrix expression, or ~1~,
  - a factor, or
  - a formula expression consisting of factors, vectors or matrices connected by formula operators.
  In all cases each term defines a collection of columns either to be added to or removed from the model matrix.

Notations:
- =Y ~ M=        :: =Y= is modeled as =M=.
- =M_1 + M_2=    :: Include =M_1= and =M_2=.
- =M_1 - M_2=    :: Include =M_1= leaving out terms of =M_2=.
- =M_1 : M_2=    :: The tensor product of =M_1= and =M_2=. If both terms are factors, then the “subclasses” factor.
- =M_1 %in% M_2= :: Similar to =M_1:M_2=, but with a different coding.
- =M_1 * M_2=    :: =M_1 + M_2 + M_1:M_2=.
- =M_1 / M_2=    :: =M_1 + M_2 %in% M_1=.
- =M^n=          :: All terms in =M= together with “interactions” up to order =n=
- =I(M)=         :: Insulate =M=. Inside =M= all operators have their normal arithmetic meaning, and that term appears in the model matrix.

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Defining-statistical-models_003b-formulae
:END:

** lm
- ~anova(object_1, object_2)~           :: Compare a submodel with an outer model and produce an analysis of variance table.
- ~coef(object)~                        :: Extract the regression coefficient (matrix). Long form: ~coefficients(object)~.
- ~deviance(object)~                    :: Residual sum of squares, weighted if appropriate.
- ~formula(object)~                     :: Extract the model formula.
- ~plot(object)~                        :: Produce four plots, showing residuals, fitted values and some diagnostics.
- [[https://www.rdocumentation.org/packages/stats/versions/3.5.0/topics/predict.lm][predict(object, newdata=data.frame)]]   :: The data frame supplied must have variables specified with the same labels as the original. The value is a vector or matrix of predicted values corresponding to the determining variable values in ~data.frame~.
- ~print(object)~                       :: Print a concise version of the object. Most often used implicitly.
- ~residuals(object)~                   :: Extract the (matrix of) residuals, weighted as appropriate. Short form: ~resid(object)~.
- ~step(object)~                        :: Select a suitable model by adding or dropping terms and preserving hierarchies. The model with the smallest value of AIC (Akaike’s An Information Criterion) discovered in the stepwise search is returned.
- ~summary(object)~                     :: Print a comprehensive summary of the results of the regression analysis.
- ~vcov(object)~                        :: Returns the variance-covariance matrix of the main parameters of a fitted model object.

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Linear-models-1
:END:

* Graphical procedures
#+BEGIN_SRC R
  plot(x, y)
  plot(xy)
  plot(x)
  plot(f)
  plot(f, y)
  plot(df)
  plot(~ expr)
  plot(y ~ expr)
  qqnorm(x)
  qqline(x)
  qqplot(x, y)
  hist(x)
  hist(x, nclass=n)
  hist(x, breaks=b, …)
  dotchart(x, …)
  image(x, y, z, …)
  contour(x, y, z, …)
  persp(x, y, z, …)
#+END_SRC
#+BEGIN_SRC R
  points(x, y)
  lines(x, y)
  text(x, y, labels, …)
  abline(a, b)
  abline(h=y)
  abline(v=x)
  abline(lm.obj)
  polygon(x, y, …)
  legend(x, y, legend, …)
  title(main, sub)
  axis(side, …)
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Graphics
:END:

** Graphics parameters list
#+BEGIN_SRC R
  par()  # graphics parameters
  par(c("col", "lty"))
  par(col=4, lty=2)
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Graphics-parameters-list
:END:

* Packages
#+BEGIN_SRC R
  library()      # which packages are installed?
  library(boot)  # load 'boot' package

  search()            # which packages are currently loaded?
  loadedNamespaces()
#+END_SRC

Packages have namespaces:
#+BEGIN_SRC R
  base::t   # access 't' in base
  base:::t  # access hidden 't' in base
#+END_SRC

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Packages
:END:

* Topics
** OO Systems
- S3 ::
  - ~drawRect(canvas, "blue")~ dispatches the method call to ~drawRect.canvas("blue")~
  #+BEGIN_SRC R
    methods(print) # list all the sub methods like 'print.lm', etc.
  #+END_SRC

- S4 ::
  - similar to S3, but is more formal.

- Reference classes ::
  - RC for short.
  - like message-passing OO
  - Looks like ~canvas$drawRect("blue")~

Currently S3 is the most popular one.

:REFERENCES:
- https://stackoverflow.com/questions/6583265/what-does-s3-methods-mean-in-r
- http://adv-r.had.co.nz/OO-essentials.html
:END:

*** S3 object system
#+BEGIN_SRC R :results output :exports both
  x <- 1
  attr(x, "class") <- "foo"
  x

  # Or in one line
  x <- structure(1, class = "foo")
  x

  # Or
  class(x) <- "foo"
  class(x)
#+END_SRC

#+RESULTS:
: [1] 1
: attr(,"class")
: [1] "foo"
: [1] 1
: attr(,"class")
: [1] "foo"
: [1] "foo"

#+BEGIN_SRC R
  mean <- function (x, ...) {
    UseMethod("mean", x)
  }

  # Methods are ordinary functions that use a special naming convention: 'generic.class':
  mean.numeric <- function(x, ...) sum(x) / length(x)
  mean.data.frame <- function(x, ...) sapply(x, mean, ...)
  mean.matrix <- function(x, ...) apply(x, 2, mean)
#+END_SRC

#+BEGIN_SRC R :results output :exports both
  x <- structure(1, class = "foo")
  bar <- function(x) UseMethod("bar", x)
  bar.foo <- function(x) "hello"
  bar(x)
#+END_SRC

#+RESULTS:
: [1] "hello"

- There are internal generics, methods implemented in C.
- Internal generic have a slightly different dispatch mechanism to other generic functions:
  - Before trying the ~default~ method, they will also try dispatching on the mode of an object
#+BEGIN_SRC R
  x <- structure(as.list(1:10), class = "myclass")
  length(x)  # this works even though there is no 'length.default'
  # [1] 10

  mylength <- function(x) UseMethod("mylength", x)
  mylength.list <- function(x) length(x)
  mylength(x)
  # Error in UseMethod("mylength", x) :
  #  no applicable method for 'mylength' applied to an object of class
  #  "myclass"
#+END_SRC

Here is how inheritance works:
#+BEGIN_SRC R :results output :exports both
  baz <- function(x) UseMethod("baz", x)
  baz.A <- function(x) "A"
  baz.B <- function(x) "B"

  ab <- structure(1, class = c("A", "B"))
  ba <- structure(1, class = c("B", "A"))
  baz(ab)
  baz(ba)

  baz.C <- function(x) c("C", NextMethod())
  ca <- structure(1, class = c("C", "A"))
  cb <- structure(1, class = c("C", "B"))
  baz(ca)
  baz(cb)
#+END_SRC

#+RESULTS:
: [1] "A"
: [1] "B"
: [1] "C" "A"
: [1] "C" "B"

# NextMethod() keep track of which class' method is currently processing
# by `.Class`, `.Generic` global variable
#+BEGIN_SRC R :results output :exports both
  baz <- function(x) UseMethod("baz", x)
  baz.A <- function(x) {
    print(c(.Generic, "(A)", .Class))
  }
  baz.B <- function(x) {
    print(c(.Generic, "(B)", .Class))
    NextMethod()
  }
  ba <- structure(1, class = c("B", "A"))
  baz(ba)
#+END_SRC

#+RESULTS:
: [1] "baz" "(B)" "B"   "A"  
: [1] "baz" "(A)" "A"  

:REFERENCES:
- http://adv-r.had.co.nz/S3.html
:END:

** The Recycling Rule of Mixed vector and array arithmetic
- The expression is scanned from left to right.
- Any short vector operands are extended by recycling their values until they match the size of any other operands.
- As long as short vectors and arrays only are encountered, the arrays must all have the same dim attribute or an error results.
- Any vector operand longer than a matrix or array operand generates an error.
- If array structures are present and no error or coercion to vector has been precipitated, the result is an array structure with the common dim attribute of its array operands.

:REFERENCES:
- https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Mixed-vector-and-array-arithmetic_002e-The-recycling-rule
:END:
** ~Rscript~ vs ~R CMD BATCH~
Use ~Rscript~. Details:
- ~Rscript~ ::
  - does NOT echo
  - output to stdout
  - can be used in one-liner (i.e. with no input file)
- ~littler~ ::
  - all that Rscript does
  - can read commands from stdin (useful for pipelining)
  - faster startup time
  - load the methods package
- ~R CMD BATCH~ ::
  - echo the input statements
  - can not output to stdout

:REFERENCES:
- https://stackoverflow.com/questions/21969145/why-or-when-is-rscript-or-littler-better-than-r-cmd-batch
:END:

* How-to
** Format numeric as percent
#+BEGIN_SRC R :session :results output :exports both
  scales::percent(0.95)
#+END_SRC

#+RESULTS:
: [1] "95%"

:REFERENCES:
- https://stackoverflow.com/questions/7145826/how-to-format-a-number-as-percentage-in-r
:END:

** Assert conditions
Use ~stopifnot()~.

#+BEGIN_SRC R :session :results output :exports both
  stopifnot(FALSE)
#+END_SRC

#+RESULTS:
: Error: FALSE is not TRUE

:REFERENCES:
- https://stackoverflow.com/questions/2233584/does-r-have-an-assert-statement-as-in-python
:END:

** Order factor elements
#+BEGIN_SRC R
  > mydata$Treatment
  [1] L M H L M H
  Levels: H L M

  > as.integer(mydata$Treatment)
  [1] 2 3 1 2 3 1

  > factor(mydata$Treatment,c("L","M","H"))
  [1] L M H L M H                               # <-- not changed
  Levels: L M H                                 # <-- changed

  > as.integer(factor(mydata$Treatment,c("L","M","H")))
  [1] 1 2 3 1 2 3                               # <-- changed
#+END_SRC

:REFERENCES:
- https://stackoverflow.com/questions/4260698/r-ordering-in-boxplot
:END:

** Remove NA values from a vector
- Most functions working with vectors have ~na.rm~ boolean parameter.
- When ~na.rm~ is ~TRUE~, the functions filter ~NA~
- Otherwise, ~d <- d[!is.na(d)]~

:REFERENCES:
- https://stackoverflow.com/questions/7706876/remove-na-values-from-a-vector
:END:
