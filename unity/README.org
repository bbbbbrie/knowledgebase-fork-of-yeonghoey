#+TITLE: Unity

* Table of Contents :TOC_2_gh:
 - [[#references][References]]
   - [[#animation-window][Animation Window]]
   - [[#animator-window][Animator Window]]
   - [[#collider-2d][Collider 2D]]
   - [[#coroutine][Coroutine]]
   - [[#input][Input]]
   - [[#main-window][Main Window]]
   - [[#mathf][Mathf]]
   - [[#object][Object]]
   - [[#physics-2d][Physics 2D]]
   - [[#random][Random]]
   - [[#sprites][Sprites]]
 - [[#details][Details]]
   - [[#execution-order][Execution Order]]
   - [[#awake-vs-start][Awake vs Start]]
   - [[#layer-vs-sorting-layer][Layer vs Sorting Layer]]
 - [[#use-cases][Use Cases]]
   - [[#pixel-perfect][Pixel Perfect]]
   - [[#make-input-axis-discrete][Make Input Axis discrete]]
   - [[#webgl-doent-work-in-chrome-locally][WebGL doen't work in chrome locally]]
 - [[#troubleshootings][Troubleshootings]]
   - [[#coroutine-named-main][Coroutine named Main]]

* References
** Animation Window
- *Add Property*: *must select GameObject in Hierarchy window*
- *Samples*: Frames per second

[[file:img/screenshot_2017-05-02_10-32-44.png]]

*** Animation Event
- https://docs.unity3d.com/Manual/animeditor-AnimationEvents.html

#+BEGIN_SRC csharp
  // This C# function can be called by an Animation Event
  public void PrintFloat (float theValue) {
      Debug.Log ("PrintFloat is called with a value of " + theValue);
  }
#+END_SRC

[[file:img/screenshot_2017-05-02_11-03-03.png]]

** Animator Window
- https://docs.unity3d.com/Manual/AnimationParameters.html

[[file:img/screenshot_2017-05-02_15-32-27.png]]

#+BEGIN_SRC csharp
  using UnityEngine;
  using System.Collections;

  public class SimplePlayer : MonoBehaviour {

      Animator animator;

      // Use this for initialization
      void Start () {
          animator = GetComponent<Animator>();
      }

      // Update is called once per frame
      void Update () {
          float h = Input.GetAxis("Horizontal");
          float v = Input.GetAxis("Vertical");
          bool fire = Input.GetButtonDown("Fire1");

          animator.SetFloat("Forward",v);
          animator.SetFloat("Strafe",h);
          animator.SetBool("Fire", fire);
      }

      void OnCollisionEnter(Collision col) {
          if (col.gameObject.CompareTag("Enemy"))
          {
              animator.SetTrigger("Die");
          }
      }
  }
#+END_SRC

*** Animation States
- https://docs.unity3d.com/Manual/class-State.html

[[file:img/screenshot_2017-05-02_13-37-43.png]]

*** Animation Transitions
- https://docs.unity3d.com/Manual/class-Transition.html

[[file:img/screenshot_2017-05-02_18-22-28.png]]

- *Exit Time*: Normalized Time;
  for example, an exit time of ~0.75~ means that on the first frame where ~75%~ of the animation has played,
  the Exit Time condition is ~true~
- An *Exit Time* of ~3.5~ are evaluated once, after *three and a half loops*.

[[file:img/screenshot_2017-05-02_11-18-01.png]]

- *Duration out* marker to change the Duration of the transition.
- *Duration in* marker to change the duration of the transition and the Exit Time.
- *Target transition* to adjust the Transition Offset.
- *Preview playback marker* to scrub through the animation blend in the preview window at the bottom of the Inspector.

*** State Machine
- https://docs.unity3d.com/Manual/StateMachineTransitions.html

[[file:img/screenshot_2017-05-02_16-59-20.png]]

#+BEGIN_QUOTE
The Exit node is used to indicate that a state machine should exit.
#+END_QUOTE

But, there is no explicit explanation what happens On Exit node.
What I experimented:
- If in top-level state machine, goes back to entry
- If in a sub-state machine,
  goes out on the edge of the representative node in the parent state machine

*** StateMachineBehaviour
- https://docs.unity3d.com/kr/current/ScriptReference/StateMachineBehaviour.html

[[file:img/screenshot_2017-05-02_16-56-15.png]]

#+BEGIN_SRC csharp
  using System.Collections;
  using System.Collections.Generic;
  using UnityEngine;

  public class MyBehaviour : StateMachineBehaviour {

	  // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
	  override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {

	  }

	  // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
	  override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {

	  }

	  // OnStateExit is called when a transition ends and the state machine finishes evaluating this state
	  override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {

	  }

	  // OnStateMove is called right after Animator.OnAnimatorMove().
	  // Code that processes and affects root motion should be implemented here
	  override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {

	  }

	  // OnStateIK is called right after Animator.OnAnimatorIK().
	  // Code that sets up animation IK (inverse kinematics) should be implemented here.
	  override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) {

	  }
  }
#+END_SRC

** Collider 2D
- https://docs.unity3d.com/ScriptReference/Collider2D.html

#+BEGIN_SRC csharp
  void OnTriggerEnter2D(Collider2D other) {
		  if (other.CompareTag ("Bullet")) {
          Destroy (other.gameObject);
		  }
  }
#+END_SRC

** Coroutine
- https://docs.unity3d.com/Manual/Coroutines.html
- http://answers.unity3d.com/questions/755196/yield-return-null-vs-yield-return-waitforendoffram.html
- Coroutines have virtually no performance overhead.
- ~StartCoroutine~ function always returns immediately,
- SEE: [[#execution-order][Execution Order]]

** Input
- https://docs.unity3d.com/ScriptReference/Input-anyKey.html

#+BEGIN_SRC csharp
  if (Input.anyKey)
      Debug.Log("A key or mouse click has been detected");
#+END_SRC

** Main Window
- https://docs.unity3d.com/Manual/UnityHotkeys.html

** Mathf
- https://docs.unity3d.com/ScriptReference/Mathf.PingPong.html

#+BEGIN_SRC csharp
  // PingPongs the value t, so that it is never larger than length and never smaller than 0.
  // The returned value will move back and forth between 0 and length.
  public static float PingPong(float t, float length);
#+END_SRC

** Object
- https://docs.unity3d.com/ScriptReference/Object.html

*** Instantiate
- https://docs.unity3d.com/ScriptReference/Object.Instantiate.html

- If cloning a ~Component~ then the ~GameObject~ it is attached to will also be cloned
- All child objects and components will also be cloned

#+BEGIN_SRC csharp
  public static Object Instantiate(Object original);
  public static Object Instantiate(Object original, Transform parent);
  public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace);
  public static Object Instantiate(Object original, Vector3 position, Quaternion rotation);
  public static Object Instantiate(Object original, Vector3 position, Quaternion rotation, Transform parent);
#+END_SRC

**** Instantiated GameObject
- http://answers.unity3d.com/questions/839444/instantation-and-use-of-gameobject-in-same-frame.html

1. Before Instantiate
2. Awake of Instantiated GameObject
3. After Instantiate
4. Start of Instantiated GameObject

*** Destroy
- https://docs.unity3d.com/ScriptReference/Object.Destroy.html
- If obj is a ~Component~ it will remove the component from the ~GameObject~ and destroy it.
- Actual object destruction is always delayed until after the current Update loop,
  but will always be done before rendering.

#+BEGIN_SRC csharp
  public static void Destroy(Object obj, float t = 0.0F);
#+END_SRC

** Physics 2D
- https://docs.unity3d.com/Manual/Physics2DReference.html


- A Kinematic Rigidbody 2D *does not* collide with other Kinematic Rigidbody 2Ds or with Static Rigidbody 2Ds;
  it only collides with Dynamic Rigidbody 2Ds.

[[file:img/screenshot_2017-05-01_10-20-38.png]]

** Random
- https://docs.unity3d.com/ScriptReference/Random.html

#+BEGIN_SRC csharp
  // min [inclusive] and max [inclusive]
  public static float Range(float min, float max);

  // 0.0 [inclusive] and 1.0 [inclusive]
  public static float value;

  public static Quaternion rotation;

  public static Vector2 insideUnitCircle;

  // Many other overloadings
  public static Color ColorHSV();
#+END_SRC

** Sprites
- https://docs.unity3d.com/Manual/Sprites.html

*** Packer
- file:///Applications/Unity/Unity.app/Contents/Documentation/en/Manual/SpritePacker.html
- ~Edit~ -> ~Project Settings~ -> ~Editor~
- ~Window~ -> ~Sprite Packer~
- *Required to specify a Packing Tag* in the Texture Importer to enable packing for Sprites of that Texture.

[[file:img/screenshot_2017-05-02_09-55-41.png]]

[[file:img/screenshot_2017-05-02_09-56-05.png]]

* Details
** Execution Order
- https://docs.unity3d.com/Manual/ExecutionOrder.html

[[file:img/screenshot_2017-05-02_16-38-10.png]]

** Awake vs Start
- http://answers.unity3d.com/questions/8794/Difference-of-assigning-a-variable-outside-any-function-in-Awake-or-in-Start.html?_ga=1.171475872.1885432898.1491733403
- ~Awake~ and ~Start~ are called only once in thier lifetime
- ~Awake~ is called when the script instance is being loaded(whther or not the script ~enabled~)
- ~Start~ is called on the frame when a script is enabled(before ~Update~)
- ~Awake~ is called on all objects in the scene before any object's ~Start~ is called.

** Layer vs Sorting Layer
- http://answers.unity3d.com/questions/726726/which-is-the-difference-between-layer-and-sorting.html
- *Layers* can be used for selective rendering from cameras or ignoring raycasts
- *Sorting Layers* and *Order in Layer* are to determine the render order of sprites in a scene.
- *Lower numbers are rendered first*

[[file:img/screenshot_2017-05-02_10-00-27.png]]

* Use Cases
** Pixel Perfect
- https://blogs.unity3d.com/2015/06/19/pixel-perfect-2d/

[[file:img/screenshot_2017-05-02_17-07-54.png]]

So on a screen height of ~1080~ with orthographic size of ~5~,
each world space unit will take up ~108~ pixels ~(1080 / (5*2))~.
It's ~5 * 2~ because orthographic size specifies the size going
from the center of the screen to the top.

Therefore if your Sprite’s *Pixels Per Unit (PPU)* settings is ~108~, it will be rendered nicely.

#+BEGIN_EXAMPLE
  Orthographic size = ((Vert Resolution)/(PPUScale * PPU)) * 0.5
#+END_EXAMPLE

** Make Input Axis discrete
- https://docs.unity3d.com/Manual/ConventionalGameInput.html
- ~GetAxis()~ things have a joy-stick like input handling
- By tweaking ~Gravity~, ~Dead~, ~Sensitivity~, can make axes work just like buttons or keys.

[[file:img/screenshot_2017-05-02_16-46-41.png]]

** WebGL doen't work in chrome locally
- https://docs.unity3d.com/Manual/webgl-building.html
- Use Unity’s ~Build & Run~ command; the file is then temporarily hosted in a local web server and opened from a local host URL.
- Run Chrome with the ~--allow-file-access-from-files~ command line option which allows it to load content from local file URLs.

* Troubleshootings
** Coroutine named Main
*Don't define a coroutine named ~Main~.*

I wrote a coroutine named ~Main~.
It executed twice, in an unexpected way.

I've tweaked many times to understand why.
~Main~ executed even I didn't explicitly call ~StartCoroutine~.

At last, I renamed ~Main~ to ~Main2~, and it worked all the way I expected.
