#+TITLE: AWS

* Table of Contents :TOC_2_gh:
 - [[#resources][Resources]]
   - [[#aws_eip][aws_eip]]
   - [[#aws_elasticsearch_domain][aws_elasticsearch_domain]]
   - [[#aws_elb][aws_elb]]
   - [[#aws_iam_role][aws_iam_role]]
   - [[#aws_lambda_function][aws_lambda_function]]
   - [[#aws_rds_cluster][aws_rds_cluster]]
   - [[#aws_rds_cluster_instance][aws_rds_cluster_instance]]
 - [[#use-cases][Use Cases]]
   - [[#setting-up-vpc][Setting up VPC]]

* Resources
** aws_eip
- https://www.terraform.io/docs/providers/aws/r/eip.html
- https://github.com/hashicorp/terraform/issues/4944#issuecomment-248884637

#+BEGIN_SRC terraform
  resource "aws_eip" "main" {
    count    = "${var.num_hosts_eip}"
    instance = "${aws_instance.main.*.id}"

    # terraform tries to modify all eips when `count` changes.
    # This is a workaround for this.
    # SEE: https://github.com/hashicorp/terraform/issues/4944#issuecomment-248884637
    lifecycle {
      ignore_changes = ["instance"]
    }
  }
#+END_SRC

** aws_elasticsearch_domain
- https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain.html
- https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain_policy.html

#+BEGIN_SRC terraform
  resource "aws_elasticsearch_domain" "main" {
    domain_name           = "my-domain"
    elasticsearch_version = "5.1"

    cluster_config {
      instance_type  = "m3.medium.elasticsearch"
      instance_count = 3
    }

    ebs_options {
      ebs_enabled = true
      volume_type = "gp2"
      volume_size = "30" # in GBs per data instance
    }
  }
#+END_SRC

** aws_elb
- https://www.terraform.io/docs/providers/aws/r/elb.html

#+BEGIN_SRC terraform
  resource "aws_elb" "endpoint" {
    name            = "my-elb"
    subnets         = ["${var.subnet_ids}"]
    security_groups = ["${var.security_groups}"]
    instances       = ["${aws_instance.cluster.*.id}"]

    internal = true

    listener {
      instance_port     = 8080
      instance_protocol = "http"
      lb_port           = 80
      lb_protocol       = "http"
    }

    health_check {
      target              = "HTTP:8080/"
      timeout             = 5
      interval            = 30
      unhealthy_threshold = 2
      healthy_threshold   = 10
    }

    tags {
      Cluster = "${var.cluster}"
    }
  }
#+END_SRC

** aws_iam_role
- https://www.terraform.io/docs/providers/aws/d/iam_role.html

#+BEGIN_SRC terraform
  resource "aws_iam_role" "main" {
    name = "${var.name}"

    assume_role_policy = <<EOF
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Service": "lambda.amazonaws.com"
          },
          "Action": "sts:AssumeRole"
        }
      ]
    }
    EOF
  }

  resource "aws_iam_role_policy" "kinesis" {
    name = "${aws_iam_role.main.name}-kinesis"
    role = "${aws_iam_role.main.id}"

    policy = <<EOF
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:DescribeStream",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:ListStreams",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "${var.kinesis_arn}"
        }
      ]
    }
    EOF
  }

  resource "aws_iam_role_policy" "cloudwatch" {
    name = "${aws_iam_role.main.name}-cloudwatch"
    role = "${aws_iam_role.main.id}"

    policy = <<EOF
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    }
    EOF
  }

  # Needs a few seconds to replicate your new role through all regions.
  # SEE: http://stackoverflow.com/questions/37503075/invalidparametervalueexception-the-role-defined-for-the-function-cannot-be-assu
  resource "null_resource" "sleep" {
    triggers {
      role = "${aws_iam_role.main.arn}"
    }

    provisioner "local-exec" {
      command = "sleep 15"
    }
  }
#+END_SRC

** aws_lambda_function
- https://www.terraform.io/docs/providers/aws/r/lambda_function.html
- https://www.terraform.io/docs/providers/aws/r/lambda_event_source_mapping.html

#+BEGIN_SRC terraform
  data "archive_file" "code" {
    type        = "zip"
    source_file = "${path.module}/main.py"
    output_path = "${path.module}/lambda.zip"
  }

  resource "aws_lambda_function" "main" {
    function_name    = "lambda-kinesis"
    filename         = "${data.archive_file.code.output_path}"
    source_code_hash = "${data.archive_file.code.output_base64sha256}"
    handler          = "main.handle"
    runtime          = "python2.7"
    role             = "${var.role_arn}"
    memory_size      = 128
    timeout          = 10

    environment {
      variables {
        MY_ENV = "test"
      }
    }
  }

  resource "aws_lambda_event_source_mapping" "kinesis" {
    function_name     = "${aws_lambda_function.main.arn}"
    event_source_arn  = "${var.kinesis_arn}"
    batch_size        = 1000
    starting_position = "LATEST"
  }
#+END_SRC
** aws_rds_cluster
** aws_rds_cluster_instance
#+BEGIN_SRC terraform
  resource "aws_rds_cluster" "cluster" {
    db_cluster_parameter_group_name = "default.aurora5.6"
    cluster_identifier              = "mydb"

    db_subnet_group_name   = "default-vpc-abcd1234"
    vpc_security_group_ids = ["${data.terraform_remote_state.vpc.sg_default}"]
    availability_zones     = ["ap-northeast-1a", "ap-northeast-1c"]

    skip_final_snapshot = true

    database_name   = "mydb"
    master_username = "root"
    master_password = "1234"
  }

  resource "aws_rds_cluster_instance" "node" {
    count          = 2
    instance_class = "db.t2.medium"
    identifier     = "mydb-${count.index}"

    cluster_identifier   = "${aws_rds_cluster.cluster.id}"
    db_subnet_group_name = "default-vpc-abcd1234"
  }
#+END_SRC

* Use Cases
** Setting up VPC
#+BEGIN_SRC terraform
  resource "aws_vpc" "main" {
    cidr_block = "10.0.0.0/16"

    tags {
      Name = "main"
    }
  }

  resource "aws_subnet" "main_public_a" {
    vpc_id            = "${aws_vpc.main.id}"
    cidr_block        = "10.0.0.0/20"
    availability_zone = "eu-west-1a"

    tags {
      Name = "main-public-a"
    }
  }

  resource "aws_internet_gateway" "main" {
    vpc_id = "${aws_vpc.main.id}"

    tags {
      Name = "main"
    }
  } 
  resource "aws_route_table" "main" {
    vpc_id = "${aws_vpc.main.id}"

    route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.main.id}"
    }

    tags {
      Name = "main"
    }
  }

  resource "aws_main_route_table_association" "main" {
    vpc_id         = "${aws_vpc.main.id}"
    route_table_id = "${aws_route_table.main.id}"
  }
#+END_SRC
