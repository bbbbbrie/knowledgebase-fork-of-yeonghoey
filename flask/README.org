#+TITLE: flask

* Table of Contents :TOC_1_gh:
- [[#reference][Reference]]
- [[#patterns][Patterns]]

* Reference
** Flask
- http://flask.pocoo.org/docs/0.12/api/#application-object

#+BEGIN_SRC python
  app = Flask('yourapplication')
  app = Flask(__name__.split('.')[0])
#+END_SRC

#+BEGIN_QUOTE
If you are using a single module, ~name~ is always the correct value.
If you however are using a package, itâ€™s usually recommended to *hardcode the name of your package* there.
#+END_QUOTE

** request
- http://flask.pocoo.org/docs/0.12/api/#flask.Request
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.args
- http://flask.pocoo.org/docs/0.12/api/#flask.Request.get_json

#+BEGIN_SRC python
  # A MultiDict with the parsed contents of the query string.(The part in the URL after the question mark).
  request.args.get('value', type=int)
#+END_SRC

#+BEGIN_SRC python
  # force  if set to True the mimetype is ignored.
  # silent  if set to True this method will fail silently and return None.
  # cache  if set to True the parsed JSON data is remembered on the request.
  request.get_json(force=False, silent=False, cache=True)
#+END_SRC

** MultiDict
- http://werkzeug.pocoo.org/docs/0.12/datastructures/#werkzeug.datastructures.MultiDict

#+BEGIN_SRC python
  >>> d = TypeConversionDict(foo='42', bar='blub')
  >>> d.get('foo', type=int)
  42
  >>> d.get('bar', -1, type=int)
  -1
#+END_SRC

* Patterns
** Application Factories
- http://flask.pocoo.org/docs/0.12/patterns/appfactories/
- More flexible, more organized, but more complicated

#+BEGIN_SRC python
  def create_app(config_filename):
      app = Flask(__name__)
      app.config.from_pyfile(config_filename)

      from yourapplication.model import db
      db.init_app(app)

      from yourapplication.views.admin import admin
      from yourapplication.views.frontend import frontend
      app.register_blueprint(admin)
      app.register_blueprint(frontend)

      return app
#+END_SRC
