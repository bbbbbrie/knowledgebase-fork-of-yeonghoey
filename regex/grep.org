#+TITLE: grep

* Table of Contents :TOC_2_gh:
 - [[#use-cases][Use Cases]]
 - [[#regex][Regex]]
   - [[#common-expressions][Common Expressions]]

* Use Cases
- https://www.gnu.org/software/grep/manual/grep.html#Usage

#+BEGIN_SRC shell
  $ tail *.txt
  ==> foo.txt <==
  foo
  FOO

  ==> foobar.txt <==
  foo
  bar
  foobar
#+END_SRC

#+BEGIN_SRC shell
  $ grep foo foo.txt
  foo

  $ grep -i foo foo.txt  # -i, --ignore-case
  foo
  FOO

  $ grep -n foo foobar.txt  # -n, --line-number
  1:foo
  3:foobar

  $ grep -o foo foobar.txt  # -o, --only-matching
  foo
  foo

  $ grep -v foo foobar.txt  # -v, --invert-match
  bar

  $ grep -l foo *  # -l, --files-with-matches
  foo.txt
  foobar.txt

  $ grep -H foo *  # -H, Always print filename headers
  foo.txt:foo
  foobar.txt:foo
  foobar.txt:foobar

  $ grep -r foo .  # -R, -r, --recursive, Prints filename headers by default
  ./foo.txt:foo
  ./foobar.txt:foo
  ./foobar.txt:foobar

  $ grep -rh foo .  # -h, --no-filename
  ./foo.txt:foo
  ./foobar.txt:foo
  ./foobar.txt:foobar

  $ grep -w foo foobar.txt  # -w, --word-regexp
  foo

  $ grep -C2 bar foobar.txt  # -C[num, --context=num], num=2 by default, See also -A(after), -B(before)
  foo
  bar
  foobar

  $ grep -q foo foo.txt; echo $?  # -q, --quiet, --silent
  0
  $ grep -q bar foo.txt; echo $?
  1

  $ grep -e '--foo' foo.txt  # -e [pattern], --regexp=pattern, Indicate following argument as regexp explicitly

  $ grep -Z foo foobar.tar.gz; echo $?  # -Z, -z, --decompress, Behave as zgrep
  Binary file foobar.tar.gz matches
  0
  $ grep -Z baz foobar.tar.gz; echo $?
  1
#+END_SRC

* Regex
** Common Expressions
- https://www.gnu.org/software/grep/manual/grep.html#Regular-Expressions

| ~.~          |                                                                                            |
| ~?~          |                                                                                            |
| ~*~          |                                                                                            |
| ~+~          |                                                                                            |
| ~{n}~        |                                                                                            |
| ~{n,}~       |                                                                                            |
| ~{,m}~       |                                                                                            |
| ~{n,m}~      |                                                                                            |
| ~[:upper:]~  | ~A B C D E F G H I J K L M N O P Q R S T U V W X Y Z~                                      |
| ~[:lower:]~  | ~a b c d e f g h i j k l m n o p q r s t u v w x y z~                                      |
| ~[:digit:]~  | ~0 1 2 3 4 5 6 7 8 9~                                                                      |
| ~[:xdigit:]~ | ~0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f~                                              |
| ~[:punct:]~  | ~! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { ¦ } ~~ (Punctuation characters) |
| ~[:blank:]~  | ~space~ and ~tab~                                                                          |
| ~[:space:]~  | ~tab~, ~newline~, ~vertical tab~, ~form feed~, ~carriage return~, and ~space~              |
| ~[:alpha:]~  | ~[:lower:]~ and ~[:upper:]~; same as ~[A-Za-z]~                                            |
| ~[:alnum:]~  | ~[:alpha:]~ and ~[:digit:]~, same as ~[0-9A-Za-z]~                                         |
| ~[:graph:]~  | ~[:alnum:]~ and ~[:punct:]~ (Graphical characters)                                         |
| ~[:print:]~  | ~[:alnum:]~, ~[:punct:]~, and ~space~                                                      |
| ~[:cntrl:]~  | Octal codes ~000~ through ~037~, and ~177~ (DEL)                                           |
| ~\b~         | Match the empty string at the edge of a word                                               |
| ~\B~         | Match the empty string provided it’s not at the edge of a word.                            |
| ~\<~         | Match the empty string at the beginning of word.                                           |
| ~\>~         | Match the empty string at the end of word.                                                 |
| ~\w~         | A synonym for ~[_[:alnum:]]~                                                               |
| ~\W~         | A synonym for ~[^_[:alnum:]]~                                                              |
| ~\s~         | A synonym for ~[[:space:]]~                                                                    |
| ~\S~         | A synonym for ~[^[:space:]]~                                                               |
| ~(a)\1~      | Matches ~aa~ (Back references)                                                             |
| ~a(.)¦b\1~   | will not match ~ba~ (Only groups participated in the match can be back-referenced)         |

- ~\<~, ~\>~ is specific, while ~\b~ can be placed at both ends
- Meta-characters like ~?~, ~+~, ~{~, ~|~, ~(~, ~)~ should be escaped with backslash
  - ~egrep~ or ~grep -E~ will make these characters have meta meaning by default.
