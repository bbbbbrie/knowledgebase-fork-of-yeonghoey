#+TITLE: Jinja2

* Table of Contents :TOC_3_gh:
- [[#syntax][Syntax]]
  - [[#variables][Variables]]
  - [[#filters][Filters]]
  - [[#tests][Tests]]
  - [[#comments][Comments]]
  - [[#whitespace-control][Whitespace Control]]
  - [[#escaping][Escaping]]
  - [[#line-statements][Line Statements]]
  - [[#template-inheritance][Template Inheritance]]
  - [[#block-nesting-and-scope][Block Nesting and Scope]]
  - [[#for][For]]
  - [[#macros][Macros]]
  - [[#filters-section][Filters (section)]]
  - [[#assignments][Assignments]]
  - [[#include][Include]]
  - [[#import][Import]]
- [[#topics][Topics]]
  - [[#environment][Environment]]
  - [[#sandbox][Sandbox]]

* Syntax
- http://jinja.pocoo.org/docs/2.10/templates/

** Variables
#+BEGIN_EXAMPLE
  {{ foo.bar }}
  {{ foo['bar'] }}
#+END_EXAMPLE
- Both work the same whether 'foo' is a dict or an object.

** Filters
- http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters

#+BEGIN_EXAMPLE
     {{ name|striptags|title }}
  == {{ title(striptags(name)) }}

     {{ listx|join(', ') }}
  == {{ str.join(', ', listx) }}
#+END_EXAMPLE

** Tests
- http://jinja.pocoo.org/docs/2.10/templates/#builtin-tests

#+BEGIN_EXAMPLE
  {% if variable is defined %}
      value of variable: {{ variable }}
  {% else %}
      variable is not defined
  {% endif %}
#+END_EXAMPLE

** Comments
#+BEGIN_EXAMPLE
  {# note: commented-out template because we no longer use this
      {% for user in users %}
          ...
      {% endfor %}
  #}
#+END_EXAMPLE

** Whitespace Control
#+BEGIN_EXAMPLE
  # default
  {% if True %}

  # strip
  {%- if True %}

  # don't strip
  {% if True %+}
#+END_EXAMPLE

- a single trailing newline is stripped if present
- other whitespace (spaces, tabs, newlines etc.) is returned unchanged
- ~+/-~ can be placed right after ~{%~ and/or right before ~%}~  of a block

** Escaping
#+BEGIN_EXAMPLE
  {{ '{{' }}

  {% raw %}
      <ul>
      {% for item in seq %}
          <li>{{ item }}</li>
      {% endfor %}
      </ul>
  {% endraw %}
#+END_EXAMPLE

** Line Statements
#+BEGIN_EXAMPLE
  # for item in seq:
      <li>{{ item }}</li>     ## this comment is ignored
  # endfor
#+END_EXAMPLE

** Template Inheritance
- ~base.html~ ::
#+BEGIN_EXAMPLE
  <!DOCTYPE html>
  <html lang="en">
  <head>
      {% block head %}
      <link rel="stylesheet" href="style.css" />
      <title>{% block title %}{% endblock %} - My Webpage</title>
      {% endblock %}
  </head>
  <body>
      <div id="content">{% block content %}{% endblock %}</div>
      <div id="footer">
          {% block footer %}
          &copy; Copyright 2008 by <a href="http://domain.invalid/">you</a>.
          {% endblock %}
      </div>
  </body>
  </html>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% extends "base.html" %}
  {% block title %}Index{% endblock %}
  {% block head %}
      {{ super() }}
      <style type="text/css">
          .important { color: #336699; }
      </style>
  {% endblock %}
  {% block content %}
      <h1>Index</h1>
      <p class="important">
        Welcome to my awesome homepage.
      </p>
  {% endblock %}
#+END_EXAMPLE

- ~{% block something %}~ can be replaced by child templates
- ~{{ super() }}~ gives back the results of the parent block

** Block Nesting and Scope
- http://jinja.pocoo.org/docs/2.10/templates/#block-nesting-and-scope

#+BEGIN_EXAMPLE
  {% for item in seq %}
      <li>{% block loop_item scoped %}{{ item }}{% endblock %}</li>
  {% endfor %}
#+END_EXAMPLE

- In some cases, ~scoped~ keyword required

** For
- http://jinja.pocoo.org/docs/2.10/templates/#for

#+BEGIN_EXAMPLE
  <ul>
  {% for user in users %}
      <li>{{ user.username|e }}</li>
  {% else %}
      <li><em>no users found</em></li>
  {% endfor %}
  </ul>
#+END_EXAMPLE

- Jinja loops cannot break anyway,
- ~{% else %}~ with ~{% for %}~ means 'no iteration occurred'

#+BEGIN_EXAMPLE
  <ul class="sitemap">
  {%- for item in sitemap recursive %}
      <li><a href="{{ item.href|e }}">{{ item.title }}</a>
      {%- if item.children -%}
          <ul class="submenu">{{ loop(item.children) }}</ul>
      {%- endif %}</li>
  {%- endfor %}
  </ul>
#+END_EXAMPLE

- Note ~recursive~ and ~loop()~

** Macros
#+BEGIN_EXAMPLE
  {% macro input(name, value='', type='text', size=20) -%}
      <input type="{{ type }}" name="{{ name }}" value="{{
          value|e }}" size="{{ size }}">
  {%- endmacro %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  <p>{{ input('username') }}</p>
  <p>{{ input('password', type='password') }}</p>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% macro render_dialog(title, class='dialog') -%}
      <div class="{{ class }}">
          <h2>{{ title }}</h2>
          <div class="contents">
              {{ caller() }}
          </div>
      </div>
  {%- endmacro %}

  {% call render_dialog('Hello World') %}
      This is a simple dialog rendered by using a macro and
      a call block.
  {% endcall %}
#+END_EXAMPLE

- Note ~caller()~

#+BEGIN_EXAMPLE
  {% macro dump_users(users) -%}
      <ul>
      {%- for user in users %}
          <li><p>{{ user.username|e }}</p>{{ caller(user) }}</li>
      {%- endfor %}
      </ul>
  {%- endmacro %}

  {% call(user) dump_users(list_of_user) %}
      <dl>
          <dl>Realname</dl>
          <dd>{{ user.realname|e }}</dd>
          <dl>Description</dl>
          <dd>{{ user.description }}</dd>
      </dl>
  {% endcall %}
#+END_EXAMPLE

- an argumented version

** Filters (section)
#+BEGIN_EXAMPLE
  {% filter upper %}
      This text becomes uppercase
  {% endfilter %}
#+END_EXAMPLE

** Assignments
#+BEGIN_EXAMPLE
  {% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}
  {% set key, value = call_something() %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% set navigation %}
      <li><a href="/">Index</a>
      <li><a href="/downloads">Downloads</a>
  {% endset %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% set reply | wordwrap %}
      You wrote:
      {{ message }}
  {% endset %}
#+END_EXAMPLE

** Include
#+BEGIN_EXAMPLE
  {% include 'header.html' %}
      Body
  {% include 'footer.html' %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% include "sidebar.html" ignore missing %}
  {% include "sidebar.html" ignore missing with context %}
  {% include "sidebar.html" ignore missing without context %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  % include ['page_detailed.html', 'page.html'] %}
  {% include ['special_sidebar.html', 'sidebar.html'] ignore missing %}
#+END_EXAMPLE

** Import
- ~forms.html~ ::
#+BEGIN_EXAMPLE
  {% macro input(name, value='', type='text') -%}
      <input type="{{ type }}" value="{{ value|e }}" name="{{ name }}">
  {%- endmacro %}

  {%- macro textarea(name, value='', rows=10, cols=40) -%}
      <textarea name="{{ name }}" rows="{{ rows }}" cols="{{ cols
          }}">{{ value|e }}</textarea>
  {%- endmacro %}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% import 'forms.html' as forms %}
  <dl>
      <dt>Username</dt>
      <dd>{{ forms.input('username') }}</dd>
      <dt>Password</dt>
      <dd>{{ forms.input('password', type='password') }}</dd>
  </dl>
  <p>{{ forms.textarea('comment') }}</p>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  {% from 'forms.html' import input as input_field, textarea %}
  <dl>
      <dt>Username</dt>
      <dd>{{ input_field('username') }}</dd>
      <dt>Password</dt>
      <dd>{{ input_field('password', type='password') }}</dd>
  </dl>
  <p>{{ textarea('comment') }}</p>
#+END_EXAMPLE

- Macros and variables starting with one or more underscores are private and cannot be imported.


* Topics
** Environment
- http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment

#+BEGIN_SRC python
  from jinja2 import Environment, PackageLoader, select_autoescape
  env = Environment(
      loader=PackageLoader('yourapplication', 'templates'),
      autoescape=select_autoescape(['html', 'xml'])
  )
#+END_SRC

- Most apps will create one ~Environment~
- Configures things like ~{%~, ~{{~, ~{#~
- Consider ~Environment~ as a factory of templates

** Sandbox
- http://jinja.pocoo.org/docs/2.10/sandbox/

#+BEGIN_SRC python
  # Assuming env is a SandboxedEnvironment
  >>> env.from_string("{{ func.func_code }}").render(func=lambda: None)
  u''
  >>> env.from_string("{{ func.func_code.do_something }}").render(func=lambda: None)
  Traceback (most recent call last):
    ...
  SecurityError: access to attribute 'func_code' of 'function' object is unsafe.
#+END_SRC

- Can be used to evaluate untrusted code.
- If the template tries to access insecure code a ~SecurityError~ is raised

