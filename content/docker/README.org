#+TITLE: Docker

* Table of Contents :TOC_1_gh:
- [[#overview][Overview]]
- [[#reference][Reference]]
- [[#terminology][Terminology]]
- [[#topics][Topics]]
- [[#how-to][How-to]]
- [[#links][Links]]

* Overview
* Reference
** Dockerfile
- https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/

*** LABEL
- https://docs.docker.com/engine/reference/builder/#label
- https://docs.docker.com/engine/userguide/labels-custom-metadata/

#+BEGIN_EXAMPLE
  LABEL <key>=<value> <key>=<value> <key>=<value> ...
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  LABEL "com.example.vendor"="ACME Incorporated"
  LABEL com.example.label-with-value="foo"
  LABEL version="1.0"
  LABEL description="This text illustrates \
  that label-values can span multiple lines."
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  LABEL multi.label1="value1" multi.label2="value2" other="value3"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  LABEL multi.label1="value1" \
        multi.label2="value2" \
        other="value3"
#+END_EXAMPLE

*** MAINTAINER (deprecated)
- Use ~LABEL~

#+BEGIN_EXAMPLE
  LABEL maintainer="SvenDowideit@home.org.au"
#+END_EXAMPLE

*** RUN
- https://docs.docker.com/engine/reference/builder/#run

- ~RUN <command>~
  - shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
  - You can use a ~\~ (backslash) to continue a single ~RUN~ instruction onto the next line.

- ~RUN ["executable", "param1", "param2"]~
  - This, exec form, makes it possible to avoid shell string munging,
    and to ~RUN~ commands using a base image that does not contain the specified shell executable.

- Below is a well-formed RUN instruction that demonstrates all the apt-get recommendations.
#+BEGIN_EXAMPLE
  RUN apt-get update && apt-get install -y \
      aufs-tools \
      automake \
      build-essential \
      curl \
      dpkg-sig \
      libcap-dev \
      libsqlite3-dev \ mercurial \
      reprepro \
      ruby1.9.1 \
      ruby1.9.1-dev \
      s3cmd=1.1.* \
   && rm -rf /var/lib/apt/lists/*
#+END_EXAMPLE

*** CMD
- https://docs.docker.com/engine/reference/builder/#cmd
- ~CMD ["executable","param1","param2"]~ (exec form, this is the preferred form)
- ~CMD ["param1","param2"]~ (as default parameters to ENTRYPOINT)
- ~CMD command param1 param2~ (shell form)
- The main purpose of a CMD is to provide defaults for an executing container

*** COPY
- https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy

- If you have multiple ~Dockerfile~ steps that use different files from your context, ~COPY~ them individually, rather than all at once.
  This will ensure that each stepâ€™s build cache is only invalidated (forcing the step to be re-run) if the specifically required files change.

#+BEGIN_EXAMPLE
  COPY requirements.txt /tmp/
  RUN pip install --requirement /tmp/requirements.txt
  COPY . /tmp/
#+END_EXAMPLE

* Terminology
* Topics
** Dockerfile: ADD vs COPY
- https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy
- https://stackoverflow.com/questions/24958140/what-is-the-difference-between-the-copy-and-add-commands-in-a-dockerfile

- Although ~ADD~ and ~COPY~ are functionally similar, generally speaking, ~COPY~ is preferred. 

- ~ADD~ allows ~<src>~ to be an URL
- If the ~<src>~ parameter of ~ADD~ is an archive in a recognised compression format, it will be unpacked

* How-to
** Install docker with a single command
- https://get.docker.com/

#+BEGIN_SRC shell
  curl -sSL https://get.docker.com/ | sh
#+END_SRC

** Install docker on Amazon Linux instance
- http://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker

#+BEGIN_SRC shell
  sudo yum update -y
  sudo yum install -y docker
  sudo service docker start
  sudo usermod -a -G docker ec2-user
#+END_SRC

** Access internet from containers when private DNS intrudes
- https://github.com/moby/moby/issues/13381#issuecomment-159836002
- https://github.com/docker/docker/issues/9889

In private network with private DNS, the network administrator often blocks access to common DNS like ~8.8.8.8~.
This may cause to block access to internet within the docker container.

In this case, the private DNS is used within docker containers with ~--dns~ option.
To use this option by default, put the following line in ~/etc/default/docker~:
#+BEGIN_SRC shell
  # Use DOCKER_OPTS to modify the daemon startup options.
  DOCKER_OPTS="--dns 10.10.0.1 --dns 10.10.0.2"
#+END_SRC

Additionally, ~systemd~ script for ~docker~ doesn't read ~/etc/default/docker~ and ~$DOCKER_OPTS~.
To fix it, add following lines to ~/lib/systemd/system/docker.service~:
#+BEGIN_EXAMPLE
  [Service]
  // ...
  EnvironmentFile=-/etc/default/docker
  ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS
#+END_EXAMPLE

* Links
- [[https://github.com/wsargent/docker-cheat-sheet#table-of-contents][docker-cheat-sheet]]
