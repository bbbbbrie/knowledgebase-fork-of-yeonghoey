#+TITLE: Lesson 6

* Table of Contents :TOC_2_gh:
 - [[#lesson-6][Lesson 6]]
   - [[#concept-inventory][Concept Inventory]]
   - [[#finding-words][Finding Words]]
   - [[#regression-tests][Regression Tests]]
   - [[#quiz-readwordlist][Quiz: Readwordlist]]
   - [[#quiz-extend-prefix][Quiz: Extend Prefix]]
   - [[#quiz-adding-suffixes][Quiz: Adding Suffixes]]
   - [[#quiz-longest-words][Quiz: Longest words]]
   - [[#quiz-top-n-hands][Quiz: Top N Hands]]
   - [[#crosswords][Crosswords]]
   - [[#quiz-anchors][Quiz: Anchors]]
   - [[#anchor-class][Anchor Class]]
   - [[#row-plays][Row Plays]]
   - [[#quiz-legal-prefixes][Quiz: Legal Prefixes]]
   - [[#life-is-good][Life is Good]]
   - [[#quiz-increasing-efficiency][Quiz: Increasing Efficiency]]
   - [[#quiz-show-and-spell][Quiz: Show And Spell]]
   - [[#quiz-horizontal-plays][Quiz: Horizontal Plays]]
   - [[#quiz-all-plays][Quiz: All Plays]]
   - [[#the-final-birds][The Final Birds]]
   - [[#scoring-2][Scoring 2]]
   - [[#quiz-making-plays][Quiz: Making Plays]]
   - [[#quiz-best-play][Quiz: Best Play]]
 - [[#problem-set-6][Problem Set 6]]
   - [[#quiz-anagrams][Quiz: Anagrams]]
   - [[#quiz-blank-tiles][Quiz: Blank Tiles]]
   - [[#quiz-boggle][Quiz: Boggle]]
 - [[#office-hours-6][Office Hours 6]]

* Lesson 6
** Concept Inventory
[[file:img/screenshot_2017-01-01_15-37-15.png]]
He emphasized the importance of *pacing*.  It's about focusing on small pieces of the large problem, not all at once.

** Finding Words
The simplest implementation

[[file:img/screenshot_2017-01-01_15-42-20.png]]

[[file:img/screenshot_2017-01-01_15-42-35.png]]

** Regression Tests
[[file:img/screenshot_2017-01-01_15-45-48.png]]

[[file:img/screenshot_2017-01-01_15-46-03.png]]

** Quiz: Readwordlist
*** My Solution
#+BEGIN_SRC python
  def readwordlist(filename):
      """Read the words from a file and return a set of the words
      and a set of the prefixes."""
      file = open(filename) # opens file
      text = file.read()    # gets file into string
      wordset = set(text.upper().split())
      prefixset = set(p for w in wordset for p in prefixes(w))
      file.close()
      return wordset, prefixset
#+END_SRC

*** His Solution
Exactly same as mine

*** Using ~PREFIXES~
[[file:img/screenshot_2017-01-01_15-52-10.png]]

[[file:img/screenshot_2017-01-01_15-52-25.png]]

** Quiz: Extend Prefix
Three versions of implementing ~extend_prefix~

[[file:img/screenshot_2017-01-01_16-12-09.png]]

[[file:img/screenshot_2017-01-01_16-12-29.png]]

Make the shared state(~results~ in this case) as an argument to make it flat.


[[file:img/screenshot_2017-01-01_16-13-17.png]]

By giving default values for initial states(~pre~, ~results~), it was able to make two functions into one.

** Quiz: Adding Suffixes
[[file:img/screenshot_2017-01-01_16-22-02.png]]

** Quiz: Longest words
*** My Solution
#+BEGIN_SRC python
  def longest_words(hand, board_letters):
      "Return all word plays, longest first."
      return sorted(list(word_plays(hand, board_letters)), key=lambda w: len(w), reverse=True)
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-01_16-35-33.png]]

*** Feedback
I didn't need to make the set into a list.
I didn't need to make a lambda.  Just putting ~len~ is enough.
Moreover, give an explicit name(~words~) is more clear.

** Quiz: Top N Hands
[[file:img/screenshot_2017-01-02_12-55-25.png]]

** Crosswords
[[file:img/screenshot_2017-01-02_12-56-58.png]]

** Quiz: Anchors
[[file:img/screenshot_2017-01-02_13-01-53.png]]
[[file:img/screenshot_2017-01-02_13-02-07.png]]

[[file:img/screenshot_2017-01-02_13-06-27.png]]

[[file:img/screenshot_2017-01-02_13-08-15.png]]

[[file:img/screenshot_2017-01-02_13-10-47.png]]

** Anchor Class
[[file:img/screenshot_2017-01-03_07-56-49.png]]

[[file:img/screenshot_2017-01-03_07-57-24.png]]

** Row Plays

[[file:img/screenshot_2017-01-03_08-01-10.png]]

[[file:img/screenshot_2017-01-03_08-03-38.png]]

** Quiz: Legal Prefixes
[[file:img/screenshot_2017-01-03_12-03-18.png]]

** Life is Good
[[file:img/screenshot_2017-01-03_12-11-53.png]]

[[file:img/screenshot_2017-01-03_12-12-19.png]]

** Quiz: Increasing Efficiency
[[file:img/screenshot_2017-01-03_12-17-55.png]]

His cares on complicating the interface is great.

*** My Solution
I always get incorrect results.
And I found out that even the exact copy of his solution causes an incorrect result.

*** His Solution
[[file:img/screenshot_2017-01-03_12-58-42.png]]

** Quiz: Show And Spell
[[file:img/screenshot_2017-01-04_16-54-49.png]]

Great way to define 2d array

** Quiz: Horizontal Plays
#+BEGIN_SRC python
  def find_cross_word(board, i, j):
      """Find the vertical word that crosses board[j][i]. Return (j2, w),
      where j2 is the starting row, and w is the word"""
      sq = board[j][i]
      w = sq if is_letter(sq) else '.'
      for j2 in range(j, 0, -1):
          sq2 = board[j2-1][i]
          if is_letter(sq2): w = sq2 + w
          else: break
      for j3 in range(j+1, len(board)):
          sq3 = board[j3][i]
          if is_letter(sq3): w = w + sq3
          else: break
      return (j2, w)

  def neighbors(board, i, j):
      """Return a list of the contents of the four neighboring squares,
      in the order N,S,E,W."""
      return [board[j-1][i], board[j+1][i],
              board[j][i+1], board[j][i-1]]

  def set_anchors(row, j, board):
      """Anchors are empty squares with a neighboring letter. Some are resticted
      by cross-words to be only a subset of letters."""
      for (i, sq) in enumerate(row[1:-1], 1):
          neighborlist = (N,S,E,W) = neighbors(board, i, j)
          # Anchors are squares adjacent to a letter.  Plus the '*' square.
          if sq == '*' or (is_empty(sq) and any(map(is_letter, neighborlist))):    
              if is_letter(N) or is_letter(S):   
                  # Find letters that fit with the cross (vertical) word
                  (j2, w) = find_cross_word(board, i, j)
                  row[i] = anchor(L for L in LETTERS if w.replace('.', L) in WORDS)
              else: # Unrestricted empty square -- any letter will fit.
                  row[i] = ANY
#+END_SRC

It seems that he skipped to explain this code because it's rather too complicated.

** Quiz: All Plays

*** My Solution
#+BEGIN_SRC python
  def all_plays(hand, board):
      """All plays in both directions. A play is a (pos, dir, word) tuple,
      where pos is an (i, j) pair, and dir is ACROSS or DOWN."""
      hplays = horizontal_plays(hand, board)            # set of ((i, j), word)
      vplays = horizontal_plays(hand, transpose(board)) # set of ((j, i), word)
      results = set()
      for (i, j), word in hplays:
          results.add(((i, j), ACROSS, word))
      for (j, i), word in vplays:
          results.add(((i, j), DOWN, word))
      return results
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-04_17-15-50.png]]

*** Feedback
His solution is an immutable one which is generally better for readability and correctness.

** The Final Birds
[[file:img/screenshot_2017-01-04_17-26-29.png]]

** Scoring 2
[[file:img/screenshot_2017-01-04_17-33-15.png]]

** Quiz: Making Plays
*** My Solution
#+BEGIN_SRC python
  def make_play(play, board):
      "Put the word down on the board."
      (score, (i, j), (di, dj), word) = play
      for wi, L in enumerate(word):
          x, y = i + di*wi, j + dj*wi
          board[y][x] = L
      return board
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-04_17-46-04.png]]

*** Feedback
~n~ is better than ~wi~

** Quiz: Best Play
*** My Solution
#+BEGIN_SRC python
  def best_play(hand, board):
      "Return the highest-scoring play.  Or None."
      plays = all_plays(hand, board)
      if not plays:
          return None
      else:
          return max(plays, key=lambda p: p[0])
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-04_17-49-58.png]]

* Problem Set 6
** Quiz: Anagrams
*** My Solution
#+BEGIN_SRC python
  def anagrams(phrase, shortest=2):
      """Return a set of phrases with words from WORDS that form anagram
      of phrase. Spaces can be anywhere in phrase or anagram. All words 
      have length >= shortest. Phrases in answer must have words in 
      lexicographic order (not all permutations)."""
      phrase = ''.join(phrase.split())
      letters = Counter(phrase)
      words = sorted([w for w in find_words(phrase) if len(w) >= shortest])

      def valid(used, letters):
          return all([used[L] <= c for L, c in letters.viewitems()])
      def done(used, letters):
          return all([used[L] == c for L, c in letters.viewitems()])

      results = set()
      def find_picks(n, pick=[]):
          used = Counter(''.join(pick))
          if not valid(used, letters):
              return
          if done(used, letters):
              results.add(' '.join(pick))
              return results
          for i in range(n, len(words)):
              find_picks(i+1, pick + [words[i]])
          return results
      return find_picks(0) 
#+END_SRC

It's ugly.

*** His Solution
[[file:img/screenshot_2017-01-04_18-33-00.png]]

*** Feedback
To avoid duplications, I sorted ~words~ and kept current index to pick only bigger words.
But he put the predicate ~w > previous_word~ and called ~find_words~ multiple times.
This may be redundant calculations but makes the logic clear.

Using ~str.replace(' ', '')~ to remove blanks is better than ~\''.join(str.split())~

** Quiz: Blank Tiles
*** My Solution
#+BEGIN_SRC python
  def blank_placed(board, pos, direction, hand, word, pre='', results=None):
      if results is None:
          results = set()

      if pre.upper() == word.upper():
          results.add(pre)
          return results

      i, j = pos
      di, dj = direction
      npos = (i+di, j+dj)

      sq = board[j][i]
      if is_letter(sq):
          return blank_placed(board, npos, direction, hand, word, pre+sq, results)

      i = len(pre)
      L = word[i]
      if L in hand:
          blank_placed(board, npos, direction, hand.replace(L, '', 1), word, pre + L, results)
      if '_' in hand:
          blank_placed(board, npos, direction, hand.replace('_', '', 1), word, pre + L.lower(), results)
      return results
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-04_20-58-59.png]]

[[file:img/screenshot_2017-01-04_20-59-14.png]]

*** Feedback
I solved it almost same as his solution.
But I pick a wrong choice.  I decided to use the uppercase representation to pick the word,  
and to backtrack the answer for scoring.  This was figured out to lead duplicated logic.

I thought that using mixed case representation would lead to more complicated logic on solving.
But it lead to more complicated logic on scoring.

** Quiz: Boggle
[[file:img/screenshot_2017-01-04_21-14-03.png]]

[[file:img/screenshot_2017-01-04_21-15-31.png]]

I didn't think about 1d representation.  But it sounds not so weird.

*** My Solution
#+BEGIN_SRC python
  def boggle_words(board, minlength=3):
      "Find all the words on this Boggle board; return as a set of words."
      results = set()
      for i, sq in enumerate(board):
          used = [False] * len(board)
          used[i] = True
          words = find_boggle_words(board, minlength, used, i, sq)
          results = results | words
      return results


  def find_boggle_words(board, minlength, used, pos, pre, results=None):
      if results is None:
          results = set()
      if pre in WORDS and len(pre) >= minlength:
          results.add(pre)
      if pre not in PREFIXES:
          return results

      N = size(board)
      for n in neighbors(pos, N):
          if not used[n]:
              used[n] = True
              find_boggle_words(board, minlength, used, n, pre+board[n], results)
              used[n] = False
      return results
#+END_SRC

*** His Solution
[[file:img/screenshot_2017-01-04_21-37-35.png]]

*** Feedback
There are some design decisions.  One of them is nesting the recursion function.  As he mentioned about it,
it simplifies the recursion because it reduces the number of arguments significantly.

The other one is using ~path~ for checking revisiting, while I used ~used~ flags.
It just simplifies the logic and improves the readability.

~j~ is better than ~n~,  I don't know why, but it was just hard to think of that name.

* Office Hours 6

[[file:img/screenshot_2017-01-04_22-02-11.png]]

[[file:img/screenshot_2017-01-04_22-04-37.png]]

[[file:img/screenshot_2017-01-04_22-04-52.png]]

[[file:img/screenshot_2017-01-04_22-05-52.png]]

[[file:img/screenshot_2017-01-04_22-06-03.png]]

[[file:img/screenshot_2017-01-04_22-06-18.png]]
