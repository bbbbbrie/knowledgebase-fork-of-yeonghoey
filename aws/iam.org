#+TITLE: AWS IAM

* Table of Contents :TOC_2_gh:
- [[#reference][Reference]]
  - [[#assume-role-policy][assume-role-policy]]
  - [[#kinesis][kinesis]]
  - [[#s3][s3]]
- [[#topics][Topics]]
  - [[#iam-role][IAM Role]]
  - [[#instance-profiles][Instance Profiles]]
  - [[#policy-elements][Policy Elements]]
  - [[#policies-evaluation-logic][Policies Evaluation Logic]]
- [[#how-to][How-to]]
  - [[#share-resources-with-an-external-aws-account-via-iam-role][Share resources with an external AWS account via IAM Role]]
- [[#links][Links]]
- [[#staging][Staging]]

* Reference
** assume-role-policy
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html
- http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html


- User (Replace ~root~ with an user name if restrict the role for a specific user) ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": {
      "Effect": "Allow",
      "Principal": {"AWS": "arn:aws:iam::123456789012:root"},
      "Action": "sts:AssumeRole",
    }
  }
#+END_SRC

- EC2 ::
To attach the role to EC2 instances, an *instance profile* must be created.
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {"Service": "ec2.amazonaws.com"},
        "Action": "sts:AssumeRole"
      }
    ]
  }
#+END_SRC

- Lambda ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "",
        "Effect": "Allow",
        "Principal": {"Service": "lambda.amazonaws.com"},
        "Action": "sts:AssumeRole"
      }
    ]
  }
#+END_SRC
** kinesis
- http://docs.aws.amazon.com/streams/latest/dev/controlling-access.html

- Readonly ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:Get*",
          "kinesis:DescribeStream"
        ],
        "Resource": [
          "arn:aws:kinesis:us-east-1:111122223333:stream/stream1"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  }
#+END_SRC

- Writeonly ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord"
        ],
        "Resource": [
          "arn:aws:kinesis:us-east-1:111122223333:stream/*"
        ]
      }
    ]
  }
  
#+END_SRC

- Fullaccess ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "kinesis:*",
        "Resource": [
          "arn:aws:kinesis:us-east-1:111122223333:stream/stream1"
        ]
      }
    ]
  }
#+END_SRC

- Fullaccess on all streams ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "kinesis:*",
        "Resource": [
          "arn:aws:kinesis:*:111122223333:stream/*"
        ]
      }
    ]
  }
#+END_SRC

** s3
- http://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html
- https://aws.amazon.com/ko/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket/


- Programmatic Access ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": ["s3:ListBucket"],
        "Resource": ["arn:aws:s3:::test"]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
        ],
        "Resource": ["arn:aws:s3:::test/*"]
      }
    ]
  }
#+END_SRC

- AWS Console Access ::
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": "arn:aws:s3:::*"
      },
      {
        "Effect": "Allow",
        "Action": ["s3:ListBucket"],
        "Resource": ["arn:aws:s3:::test"]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
        ],
        "Resource": ["arn:aws:s3:::test/*"]
      }
    ]
  }
#+END_SRC

* Topics
** IAM Role
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html
- With some AWS SDKs, can use temporary credentials transparently.
- Alternatively, can get the temporary credentials directly from the EC2 instance metadata

[[file:img/screenshot_2017-04-22_22-38-40.png]]

*** Assume Role Policy
- http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html

~Assume Role Policy~ describes how the role is used for.
This is related to AWS STS(Security Token Service);
Following is an example on a role for *EC2*:
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": {
      "Effect": "Allow",
      "Principal": {"Service": "ec2.amazonaws.com"},
      "Action": "sts:AssumeRole"
    }
  }
#+END_SRC

And it also requires its actual permissions:
#+BEGIN_SRC json
  {
    "Version": "2012-10-17",
    "Statement": {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::example_bucket"
    }
  }
#+END_SRC

** Instance Profiles
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html

The instance profile contains the role and can provide the role's credentials to an application that runs on the instance.
If you use the IAM console, the instance profile is managed for you and is mostly transparent to you.
if you use the AWS CLI or API to create and manage the role and EC2 instance,
then *you must create the instance profile and assign the role to it as separate steps.*
Then, when you launch the instance, *you must specify the instance profile name* instead of the role name.

[[file:img/screenshot_2017-08-17_19-33-27.png]]

** Policy Elements
- http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html

*** Id
- An optional identifier
- Using a UUID for the value is recommended
- Services like SQS or SNS might require this

: "Id": "cd3ad3d9-2776-4ef1-a904-4c229d1642ee"

*** Statement
- Required
- Contains an array of individual statements

#+BEGIN_SRC json
  "Statement": [{...},{...},{...}]
#+END_SRC

*** Effect
- Either ~Allow~ or ~Deny~

*** Sid
- An optional identifier
- The ~Sid~ value must be unique within a policy

#+BEGIN_SRC json
  "Sid": "1"
#+END_SRC

*** Principal
To specify the user (IAM user, federated user, or assumed-role user), AWS account, AWS service, or other principal entity that is allowed or denied access to a resource.

*** Action
*** Resource
*** Not-
*NotPrincipal*, *NotAction*, *NotResource* are dvanced policy elements that explicitly matches everything except the specified list of the elements.

*** Condition
- http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#AvailableKeys
- http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html

[[file:img/screenshot_2017-04-22_23-50-50.png]]

#+BEGIN_SRC json
  "Condition" :  {
        "DateGreaterThan" : {
           "aws:CurrentTime" : "2013-08-16T12:00:00Z"
         },
        "DateLessThan": {
           "aws:CurrentTime" : "2013-08-16T15:00:00Z"
         },
         "IpAddress" : {
            "aws:SourceIp" : ["192.0.2.0/24", "203.0.113.0/24"]
        }
  }
#+END_SRC
The two values for ~aws:SourceIp~ are evaluated using *OR*.
The three separate condition operators are evaluated using *AND*.

** Policies Evaluation Logic
- http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html

[[file:img/screenshot_2017-02-19_14-05-01.png]]

The enforcement code evaluates all user-based and resource-based policies
that are applicable to the request(based on the resource, principal, action, and conditions).
*The order in which the enforcement code evaluates the policies is not important*.

[[file:img/screenshot_2017-02-19_14-06-20.png]]

* How-to
** Share resources with an external AWS account via IAM Role
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html
- http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html

[[file:img/screenshot_2017-05-29_18-30-17.png]]

[[file:img/screenshot_2017-05-29_18-30-28.png]]

This creates an assume role policy like this:

[[file:img/screenshot_2017-05-29_18-32-21.png]]

~Principal~ is 3rd party's AWS account id. For example:
#+BEGIN_EXAMPLE
  "AWS": "arn:aws:iam::123456789012:root"
#+END_EXAMPLE

But ironically, it's unable to specify an ~ExternalID~ when switching roles on AWS Console.
They only can be specified through awscli or other programatic accesses.

An easy way to work around this is just delete that yellow line.
This allows all users belong to target AWS Account to switch to the role.
* Links
* Staging
