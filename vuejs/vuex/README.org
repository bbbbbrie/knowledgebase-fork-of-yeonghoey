#+TITLE: [[https://vuex.vuejs.org/en/][Vuex]]

* Table of Contents :TOC_2_gh:
- [[#overview][Overview]]
- [[#general][General]]

* [[https://vuex.vuejs.org/en/structure.html][Overview]]
#+BEGIN_SRC shell
  npm install vuex
#+END_SRC

- ~src/store/index.js~ ::
#+BEGIN_SRC js
  import Vue from 'vue';
  import Vuex from 'vuex';
  import * as getters from './getters'
  import * as actions from './actions'
  import * as mutations from './mutations'

  Vue.use(Vuex);

  const STRICT = process.env.NODE_ENV !== 'production';

  const store = new Vuex.Store({
    state,
    getters,
    actions,
    mutations,
    strict: STRICT,
  })

  if (module.hot) {
    module.hot.accept([
      './getters',
      './actions',
      './mutations',
    ], () => {
      store.hotUpdate({
        getters: require('./getters'),
        actions: require('./actions'),
        mutations: require('./mutations'),
      })
    })
  }
#+END_SRC
- [[https://vuex.vuejs.org/en/strict.html][strict]]

#+CAPTION: src/main.js
#+BEGIN_SRC js
  import Vue from 'vue'
  import store from './store'

  new Vue({
    el: '#app',
    store,
  })
#+END_SRC

-----
- https://github.com/vuejs/vuex/blob/dev/examples/counter-hot/store/index.js
- https://github.com/vuejs/vuex/blob/dev/examples/shopping-cart/store/index.js

* General
- Pass ~store~ to when ~new Vue({})~ to reference the store as ~this.$store~ from child components.
- Use [[https://vuex.vuejs.org/en/state.html#the-mapstate-helper][mapState]], [[https://vuex.vuejs.org/en/getters.html#the-mapgetters-helper][mapGetters]], as ~computed~ members and [[https://vuex.vuejs.org/en/mutations.html#committing-mutations-in-components][mapMutations]], [[https://vuex.vuejs.org/en/actions.html#dispatching-actions-in-components][mapActions]] as ~methods~ members.
- Use ~mapThing~ with object spread operator(~...obj~) as follows:
#+BEGIN_SRC js
  computed: {
    localComputed () { /* ... */ },
    // mix this into the outer object with the object spread operator
    ...mapState({
      // ...
    })
  }
#+END_SRC

- ~store~ ::
  - the single source of truth.
  - *Can exist only one store for each application
- ~state~ ::
  - like ~data~ in components
- ~getters~ :: like ~computed~ in components
- ~mutations~ is for methods which mutates the ~state~. *Must be synchronous*
- ~actions~ is for methods which commit mutations. *Can be asynchronous*
- ~modules~ for organizing things
