#+TITLE: Lesson 5

* Table of Contents :TOC_2_gh:
 - [[#lesson-5][Lesson 5]]
   - [[#porcine-probability][Porcine Probability]]
   - [[#concept-inventory][Concept Inventory]]
   - [[#quiz-hold-and-roll][Quiz: Hold And Roll]]
   - [[#named-tuples][Named Tuples]]
   - [[#quiz-hold-at-strategy][Quiz: Hold At Strategy]]
   - [[#quiz-play-pig][Quiz: Play Pig]]
   - [[#dependency-injection][Dependency Injection]]
   - [[#utility][Utility]]
   - [[#quiz-game-theory][Quiz: Game Theory]]
   - [[#optimal-pig][Optimal Pig]]
   - [[#pwin][Pwin]]
   - [[#quiz-maxwins][Quiz: Maxwins]]
   - [[#impressing-pig-scouts][Impressing Pig Scouts]]
   - [[#quiz-maximizing-differential][Quiz: Maximizing Differential]]
   - [[#being-careful][Being Careful]]
   - [[#quiz-legal-actions][Quiz: Legal Actions]]
   - [[#using-tools][Using Tools]]
   - [[#telling-a-story][Telling A Story]]
   - [[#conditional-probability][Conditional Probability]]
   - [[#quiz-tuesday][Quiz: Tuesday]]
   - [[#summary][Summary]]
 - [[#problem-set-5][Problem Set 5]]
   - [[#quiz-improving-optimal][Quiz: Improving Optimal]]
   - [[#quiz-doubling-pigs][Quiz: Doubling Pigs]]
   - [[#quiz-foxes-and-hens][Quiz: Foxes and Hens]]

* Lesson 5
** Porcine Probability
[[file:img/screenshot_2016-12-26_10-21-02.png]]

** Concept Inventory
[[file:img/screenshot_2016-12-26_10-31-01.png]]

** Quiz: Hold And Roll
*** My Solution
#+BEGIN_SRC python
  def hold(state):
      p, me, you, pending = state
      p2 = (p + 1) % 2
      me2 = me + pending
      return (p2, you, me2, 0)


  def roll(state, d):
      p, me, you, pending = state
      if d == 1:
          p2 = (p + 1) % 2
          me2 = me + 1
          return (p2, you, me2, 0)
      else:
          return (p, me, you, pending + d)
#+END_SRC
*** His Solution
[[file:img/screenshot_2016-12-26_10-41-29.png]]

*** Feedback
I gave unnecessary names for parts of the next state (~p2~, ~me2~, ...).
I thought that giving names is generally better, but in this case, his way is better in the matter of conciseness.

His way of turning over the next player is great. (~other = {1:0, 0:1}~).  It's just more readable.
By this way, he could write the next state as one-liner, without losing readability.

** Named Tuples
[[file:img/screenshot_2016-12-26_10-51-13.png]]

** Quiz: Hold At Strategy
*** My Solution
#+BEGIN_SRC python
  def strategy(state):
      (p, me, you, pending) = state
      if pending >= x:
          return 'hold'
      elif (me + pending) >= goal:
          return 'hold'
      else:
          return 'roll'
#+END_SRC

*** His Solution
[[file:img/screenshot_2016-12-26_11-02-01.png]]

*** Feedback
Even though his solution is a simple one-liner, I think my solution is more readable.

** Quiz: Play Pig

[[file:img/screenshot_2016-12-26_11-05-43.png]]

*** My Solution
#+BEGIN_SRC python
  def play_pig(A, B):
      state = (0, 0, 0, 0)
      turn = {0:A, 1:B}
      while True:
          (p, me, you, pending) = state
          if me >= goal:
              return turn[p]
          if you >= goal:
              return turn[other[p]]
          action = turn[p](state)
          if action == 'hold':
              state = hold(state)
          elif action == 'roll':
              d = random.randint(1, 6)
              state = roll(state, d)
#+END_SRC

*** His solution
[[file:img/screenshot_2016-12-26_11-17-16.png]]

*** Feedback
The name ~strategies~ is better than ~turn~.
Additionally, it needn't have to be a ~dict~.  Just ~list~ is okay.

** Dependency Injection
[[file:img/screenshot_2016-12-26_11-22-44.png]]

[[file:img/screenshot_2016-12-26_11-23-02.png]]

*** Feedback
The interface of injecting ~dierolls~ is great.  He made it not just a function, but an iterable.
This makes easier for testing.  Also, he used a generator for keeping the same logic of using ~randint~.

** Utility
Concepts from Game Theory
[[file:img/screenshot_2016-12-26_11-38-23.png]]

** Quiz: Game Theory
[[file:img/screenshot_2016-12-28_11-59-53.png]]

[[file:img/screenshot_2016-12-28_12-02-29.png]]

For most people, the utility functions of money is not linear but logarithmic.
It's amazing how the code expresses this naturally.

** Optimal Pig
[[file:img/screenshot_2016-12-28_12-12-37.png]]

** Pwin
[[file:img/screenshot_2016-12-28_12-15-51.png]]

** Quiz: Maxwins
*** My Solution
#+BEGIN_SRC python
  def max_wins(state):
      "The optimal pig strategy chooses an action with the highest win probability."
      return max(pig_actions(state), key=lambda a: Q_pig(state, a, Pwin))
#+END_SRC

*** His Solution
[[file:img/screenshot_2016-12-28_12-20-31.png]]

*** Feedback
I forgot to use ~best_action~.

** Impressing Pig Scouts
[[file:img/screenshot_2016-12-28_12-25-14.png]]
I wonder how he implemented ~play_tournament~

** Quiz: Maximizing Differential
[[file:img/screenshot_2016-12-28_12-27-57.png]]

** Being Careful
[[file:img/screenshot_2016-12-28_12-30-58.png]]

He mentioned about these function names are prone to error.
It's hard to differentiate between ~utility function~ and ~strategy function~.

[[file:img/screenshot_2016-12-28_12-32-45.png]]

Here is the code uses ~strategy function~.  It will silently pass when ~A~ or ~B~ were a ~utility function~.

** Quiz: Legal Actions
[[file:img/screenshot_2016-12-28_12-37-36.png]]

** Using Tools
[[file:img/screenshot_2016-12-30_13-25-35.png]]

He expected that ~max_diffs~ would be more aggressive, but it didn't.  Why is that?

** Telling A Story
[[file:img/screenshot_2016-12-30_13-27-55.png]]

For various ~pendings~, counts only ~rolls~ when the action of strategies diverged

[[file:img/screenshot_2016-12-30_13-30-11.png]]

[[file:img/screenshot_2016-12-30_13-32-28.png]]

** Conditional Probability
[[file:img/screenshot_2016-12-30_13-39-36.png]]
[[file:img/screenshot_2016-12-30_13-39-54.png]]

Good to know about ~fractions~ module

** Quiz: Tuesday
[[file:img/screenshot_2016-12-30_13-43-04.png]]

[[file:img/screenshot_2016-12-30_13-43-46.png]]

[[file:img/screenshot_2016-12-30_13-59-54.png]]

[[file:img/screenshot_2016-12-30_13-58-57.png]]

The fact that the weekday of a boy's birthday matters the probability is counterintuitive.
And he explains the reason why is that the problem wants to count the pair of boys, and a single boy,
which breaks our intuition.

** Summary
[[file:img/screenshot_2016-12-30_14-06-16.png]]

* Problem Set 5
** Quiz: Improving Optimal
[[file:img/screenshot_2016-12-31_05-26-58.png]]

*** My Solution
#+BEGIN_SRC python
  @memo
  def Pwin3(me, you, pending):
      if me >= goal:
          return 1
      if you >= goal:
          return 0

      holdp = (1-Pwin3(you, me+pending, 0)) if pending > 0 else 0
      if holdp < 1:
          ps = [1-Pwin3(you, me+1, 0)]
          ps.extend([Pwin3(me, you, pending+d) for d in range(2, 7)])
          rollp = float(sum(ps)) / len(ps)
          return max(holdp, rollp)
      else:
          return holdp
#+END_SRC

*** His Solution
#+BEGIN_SRC python
  from functools import update_wrapper

  def decorator(d):
      "Make function d a decorator: d wraps a function fn."
      def _d(fn):
          return update_wrapper(d(fn), fn)
      update_wrapper(_d, d)
      return _d

  @decorator
  def memo(f):
      """Decorator that caches the return value for each call to f(args).
      Then when called again with same args, we can just look it up."""
      cache = {}
      def _f(*args):
          try:
              return cache[args]
          except KeyError:
              cache[args] = result = f(*args)
              return result
          except TypeError:
              # some element of args refuses to be a dict key
              return f(args)
      _f.cache = cache
      return _f
#+END_SRC
[[file:img/screenshot_2016-12-31_05-24-08.png]]
*** Feedback
I solved this without looking up the previous ~Pwin~ implementation.
I found it hard because where was no quiz on implementing ~Pwin~.
But based on the understanding, I finally figured out how,
and solved it with somewhat equivalent to his solution.

** Quiz: Doubling Pigs
[[file:img/screenshot_2016-12-31_05-32-11.png]]

*** My Solution
#+BEGIN_SRC python
  def pig_actions_d(state):
      (p, me, you, pending, double) = state
      if double == 'double':
          return ['accept', 'decline']
      actions = ['roll', 'hold']
      if pending == 0:
          actions.remove('hold')
      if double == 1:
          actions.append('double')
      return actions


  def strategy_d(state):
      (p, me, you, pending, double) = state
      actions = pig_actions_d(state)
      if 'double' in actions and me+pending >= goal:
          return 'double'
      else:
          return hold_20_d(state)
#+END_SRC

*** His Solution
[[file:img/screenshot_2016-12-31_05-55-53.png]]

*** Feedback
His way of using ~if expression~ makes code concise and readable.

I wanted to implement ~strategy_d~ as simple as possible.
By using the fact that ~hold_20_d~ always accepts double request,
I implemented the strategy to make double request when I convince to win.

** Quiz: Foxes and Hens
[[file:img/screenshot_2016-12-31_07-18-19.png]]

*** My Solution
#+BEGIN_SRC python
  def do(action, state):
      "Apply action to state, returning a new state."
      # Make sure you always use up one card.
      (score, yard, cards) = state
      draw = random.choice(cards)
      if action == 'gather' and draw == 'F':
          return (score+yard, 0, cards[1:])
      if action == 'gather' and draw == 'H':
          return (score+yard, 0, cards[:-1])
      if action == 'wait' and draw == 'F':
          return (score, 0, cards[1:])
      if action == 'wait' and draw == 'H':
          return (score, yard+1, cards[:-1])


  def strategy(state):
      return max(['wait', 'gather'], key=lambda a: Q(state, a))


  @memo
  def expect_value(state):
      return max(Q(state, 'wait'), Q(state, 'gather'))


  def Q(state, action):
      (score, yard, cards) = state
      if not cards:
          return score+yard

      remains = Counter(cards)
      total = len(cards)
      fp = float(remains['F']) / total
      hp = float(remains['H']) / total

      ev = 0
      if action == 'gather':
          ev += expect_value((score+yard, 0, cards[1:])) * fp if fp > 0 else 0
          ev += expect_value((score+yard, 0, cards[:-1])) * hp if hp > 0 else 0
      if action == 'wait':
          ev += expect_value((score, 0, cards[1:])) * fp if fp > 0 else 0
          ev += expect_value((score, yard+1, cards[:-1])) * hp if hp > 0 else 0
      return ev
#+END_SRC

*** His Solution
[[file:img/screenshot_2016-12-31_07-16-57.png]]

[[file:img/screenshot_2016-12-31_07-17-34.png]]

*** Feedback
His way of implementing ~cards_left~ is way better than mine(~cards[1:]~).
It generalizes both cases, which makes the logic simple.

The name ~cards_left~ is better than ~remains~.

My implementation of ~strategy~ is a optimal one.  I tried to implement it for practicing.
The average score is almost same as his simple strategy:

[[file:img/screenshot_2016-12-31_07-22-34.png]]
