#+TITLE: Object Detection

* Detection algorithms
** Object Localization
[[file:img/screenshot_2017-11-24_23-33-19.png]]

[[file:img/screenshot_2017-11-24_23-33-47.png]]

[[file:img/screenshot_2017-11-24_23-35-51.png]]
** Landmark Detection
[[file:img/screenshot_2017-11-24_23-37-23.png]]
** Object Detection
[[file:img/screenshot_2017-11-24_23-59-56.png]]

** Convolutional Implementation of Sliding Windows
[[file:img/screenshot_2017-11-25_00-23-41.png]]

[[file:img/screenshot_2017-11-25_10-00-09.png]]

[[file:img/screenshot_2017-11-25_10-00-38.png]]
** Bounding Box Predictions
[[file:img/screenshot_2017-11-25_10-01-39.png]]

[[file:img/screenshot_2017-11-25_10-01-57.png]]

** Intersection Over Union
[[file:img/screenshot_2017-11-25_10-02-34.png]]

** Non-max Suppression
[[file:img/screenshot_2017-11-25_10-03-03.png]]

[[file:img/screenshot_2017-11-25_10-03-29.png]]

** Anchor Boxes
[[file:img/screenshot_2017-11-25_10-04-02.png]]

[[file:img/screenshot_2017-11-25_10-04-20.png]]

[[file:img/screenshot_2017-11-25_10-04-49.png]]

- Anchor boxes are not only for dealing with multiple mid points in one grid.
- Anchor boxes specialize each detecting object.

** YOLO Algorithm
[[file:img/screenshot_2017-11-25_10-08-01.png]]

[[file:img/screenshot_2017-11-25_10-08-15.png]]

[[file:img/screenshot_2017-11-25_10-08-37.png]]

** (Optional) Region Proposals
[[file:img/screenshot_2017-11-25_10-09-08.png]]

[[file:img/screenshot_2017-11-25_10-09-27.png]]

* Programming assignments
** Car detection with YOLOv2
[[file:img/screenshot_2017-11-25_10-23-48.png]]

[[file:img/screenshot_2017-11-25_10-25-44.png]]

[[file:img/screenshot_2017-11-25_10-27-20.png]]

[[file:img/screenshot_2017-11-25_10-28-40.png]]

[[file:img/screenshot_2017-11-25_10-29-42.png]]

- https://keras.io/backend/#argmax
- https://www.tensorflow.org/api_docs/python/tf/boolean_mask

#+BEGIN_SRC python
  def yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = .6):
      """Filters YOLO boxes by thresholding on object and class confidence.

      Arguments:
      box_confidence -- tensor of shape (19, 19, 5, 1)
      boxes -- tensor of shape (19, 19, 5, 4)
      box_class_probs -- tensor of shape (19, 19, 5, 80)
      threshold -- real value, if [ highest class probability score < threshold], then get rid of the corresponding box

      Returns:
      scores -- tensor of shape (None,), containing the class probability score for selected boxes
      boxes -- tensor of shape (None, 4), containing (b_x, b_y, b_h, b_w) coordinates of selected boxes
      classes -- tensor of shape (None,), containing the index of the class detected by the selected boxes

      Note: "None" is here because you don't know the exact number of selected boxes, as it depends on the threshold.
      For example, the actual output size of scores would be (10,) if there are 10 boxes.
      """
      return scores, boxes, classes
#+END_SRC
