#+TITLE: webpack

* Concepts
#+BEGIN_SRC javascript
  const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
  const webpack = require('webpack'); //to access built-in plugins
  const path = require('path');

  const config = {
    entry: './path/to/my/entry/file.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'my-first-webpack.bundle.js'
    },
    module: {
      rules: [
        { test: /\.txt$/, use: 'raw-loader' }
      ]
    },
    plugins: [
      new webpack.optimize.UglifyJsPlugin(),
      new HtmlWebpackPlugin({template: './src/index.html'})
    ]
  };

  module.exports = config;
#+END_SRC

- ~entry~ indicates which module webpack should use to begin building out its internal dependency graph.
- ~output~ tells webpack where to emit the bundles it creates and how to name these files.
- ~module~ (loaders) is used to more than just JavaScript files
- ~plugins~ can be leveraged to perform a wider range of tasks.

:REFERENCES:
- https://webpack.js.org/concepts/
:END:

* Entry
#+BEGIN_SRC javascript
  const config = {
    entry: {
      app: './src/app.js',
      vendors: './src/vendors.js'
    }
  };
#+END_SRC

#+BEGIN_SRC javascript
  const config = {
    entry: {
      pageOne: './src/pageOne/index.js',
      pageTwo: './src/pageTwo/index.js',
      pageThree: './src/pageThree/index.js'
    }
  };
#+END_SRC

* Ouptut
** substitutions
:REFERENCES:
- https://webpack.js.org/configuration/output/#output-filename
:END:
#+BEGIN_SRC js
  filename: "bundle.js"
  filename: "[name].bundle.js"
  filename: "[id].bundle.js"
  filename: "[name].[hash].bundle.js"
  filename: "[chunkhash].bundle.js"
#+END_SRC

* Loaders
Loaders can be chained by passing multiple loaders,
which will be applied from *right to left* (last to first configured).

:REFERENCES:
- https://webpack.js.org/concepts/loaders/
- https://webpack.js.org/loaders/
- https://webpack.js.org/configuration/module/#module-rules
:END:

** css-loader
The ~css-loader~ interprets ~@import~ and ~url()~ like ~import/require()~ and will resolve them.
Actually do nothing with it.

:REFERENCES:
- https://github.com/webpack-contrib/css-loader
:END:

** style-loader
- Adds CSS to the DOM by injecting a ~<style>~ tag

:REFERENCES:
- https://github.com/webpack-contrib/style-loader
- https://stackoverflow.com/questions/34039826/webpack-style-loader-vs-css-loader
:END:

** babel-loader
- Note the version compatibility

#+BEGIN_SRC shell
  # webpack 3.x | babel-loader 8.x | babel 7.x
  npm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack

  # webpack 3.x babel-loader 7.x | babel 6.x
  npm install babel-loader babel-core babel-preset-env webpack
#+END_SRC

:REFERENCES:
- https://github.com/babel/babel-loader
:END:

* Plugins
#+BEGIN_SRC javascript
  function ConsoleLogOnBuildWebpackPlugin() {

  };

  ConsoleLogOnBuildWebpackPlugin.prototype.apply = function(compiler) {
    compiler.plugin('run', function(compiler, callback) {
      console.log("The webpack build process is starting!!!");

      callback();
    });
  };
#+END_SRC

:REFERENCES:
- https://webpack.js.org/concepts/plugins/
:END:

** HtmlWebpackPlugin
Automatically generate a ~html~ file for serving your bundle. Within ~dist/index.html~:
#+BEGIN_SRC html
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="UTF-8">
      <title>webpack App</title>
    </head>
    <body>
      <script src="index_bundle.js"></script>
    </body>
  </html>
#+END_SRC

:REFERENCES:
- https://webpack.js.org/plugins/html-webpack-plugin/
:END:

** DefinePlugin
:REFERENCES:
- https://webpack.js.org/plugins/define-plugin/
:END:
- Each ~key~ passed into DefinePlugin is an identifier or multiple identifiers joined with ~.~
- If the value is a ~string~ it *will be used as a code fragment.*
- If the value isn't a ~string~, it ~will be stringified~ (including functions).
- If the value is an ~object~ *all keys are defined the same way.*
- If you prefix ~typeof~ to the key, it's only defined for typeof calls. ([[https://stackoverflow.com/questions/32598971/whats-the-purpose-of-if-typeof-window-undefined][typeof window]])

#+BEGIN_SRC js
  new webpack.DefinePlugin({
    PRODUCTION: JSON.stringify(true),
    VERSION: JSON.stringify("5fa3b9"),
    BROWSER_SUPPORTS_HTML5: true,
    TWO: "1+1",
    "typeof window": JSON.stringify("object")
  })
#+END_SRC

** CleanWebpackPlugin
#+BEGIN_SRC js
  plugins: [
    new CleanWebpackPlugin(['dist'], {
      root: path.join(__dirname, '..')
    }),
    ...
  ]
#+END_SRC

:REFERENCES:
- https://github.com/johnagan/clean-webpack-plugin
:END:

* CLI
#+BEGIN_SRC shell
  webpack [--config webpack.config.js]
#+END_SRC

:REFERENCES:
- https://webpack.js.org/api/cli/
:END:

* Configuration
:REFERENCES:
- https://webpack.js.org/configuration/
:END:

** mode
webpack 4 now ships with two sets of defaults. ~development~ and ~production~.
These are the two values to which mode can be set to.

#+BEGIN_SRC shell
  # Overrides "mode" field in config
  webpack --mode production
#+END_SRC

:REFERENCES:
- https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a
- https://medium.com/webpack/webpack-4-released-today-6cdb994702d4
:END:

* Development
#+BEGIN_SRC json
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
  +     "watch": "webpack --watch",
        "build": "webpack"
      },
#+END_SRC

Or,

#+BEGIN_SRC json
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "watch": "webpack --watch",
  +     "start": "webpack-dev-server --open",
        "build": "webpack"
      },
#+END_SRC

:REFERENCES:
- https://webpack.js.org/guides/development/
:END:

* Production
:REFERENCES:
- https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9
:END:

* Topics
** dependencies vs devDependencies
Theoretically speaking, Since a webpack project builds a kind of package as a product,
all dependencies required to build the project must be installed as ~dependencies~, not ~devDependencies~.

:REFERENCES:
- https://github.com/webpack/webpack/issues/520
:END:
