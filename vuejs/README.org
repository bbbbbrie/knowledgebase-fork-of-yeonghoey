#+TITLE: Vue.js

* Table of Contents :TOC_3_gh:
- [[#overview][Overview]]
  - [[#getting-started][Getting Started]]
  - [[#data-and-methods][Data and Methods]]
  - [[#lifecycle][Lifecycle]]
    - [[#mounted][mounted]]
  - [[#computed-and-watch][computed and watch]]
- [[#project-structure][Project Structure]]
- [[#template-syntax][Template Syntax]]
- [[#api][API]]
  - [[#vueoptions][Vue(options)]]
  - [[#v-bind][v-bind]]
  - [[#v-for][v-for]]
- [[#special-attributes][Special Attributes]]
- [[#lifecycle-hooks][Lifecycle Hooks]]
- [[#list-rendering][List Rendering]]
- [[#components][Components]]
  - [[#name-casing][Name Casing]]
  - [[#global-components][Global Components]]
  - [[#local-components][Local Components]]
  - [[#composing-components][Composing Components]]
  - [[#props][Props]]
  - [[#slots][Slots]]
  - [[#single-file-components-vue][Single File Components (.vue)]]
- [[#how-to][How-to]]
  - [[#configure-different-environment-variables-by-stage][Configure different environment variables by stage]]
  - [[#use-axios-with-vuejs][Use axios with Vue.js]]
- [[#topics][Topics]]
  - [[#v-if-vs-v-show][v-if vs v-show]]
- [[#testing][Testing]]
- [[#links][Links]]

* Overview
:REFERENCES:
- https://vuejs.org/v2/guide/installation.html#CLI
:END:

** Getting Started
#+BEGIN_SRC shell
  # install vue-cli
  $ npm install --global vue-cli
  # create a new project using the "webpack" template
  $ vue init webpack my-project
  # install dependencies and go!
  $ cd my-project
  $ npm run dev
#+END_SRC

** Data and Methods
#+BEGIN_QUOTE
*When a Vue instance is created*, it adds all the properties found in its ~data~ object to Vue’s reactivity system.
#+END_QUOTE

#+BEGIN_QUOTE
Vue instances expose a number of useful instance properties and methods.
These properties and methods are prefixed with ~$~ to differentiate from proxied data properties. For example:
#+END_QUOTE

#+BEGIN_SRC javascript
  var data = { a: 1 }
  var vm = new Vue({
    el: '#example',
    data: data
  })
  vm.$data === data // -> true
  vm.$el === document.getElementById('example') // -> true
  // $watch is an instance method
  vm.$watch('a', function (newVal, oldVal) {
    // this callback will be called when `vm.a` changes
  })
#+END_SRC

** Lifecycle
- https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram

#+BEGIN_QUOTE
Don’t use arrow functions on an options property or callback, such as ~created: () => console.log(this.a)~ or ~vm.$watch('a', newValue => this.myMethod())~. Since arrow functions are bound to the parent context, this will not be the Vue instance as you’d expect, often resulting in errors
#+END_QUOTE

[[file:_img/screenshot_2018-03-07_11-48-43.png]]
[[file:_img/screenshot_2018-03-07_11-04-42.png]]

*** mounted
- https://vuejs.org/v2/api/#mounted

** computed and watch
:REFERENCES:
- https://vuejs.org/v2/guide/computed.html
:END:

- computed ::
  - caches the value when first calculated
  - updates automatically when its dependent variables changed

  #+BEGIN_SRC js
    var vm = new Vue({
      el: '#example',
      data: {
        message: 'Hello'
      },
      computed: {
        // a computed getter
        reversedMessage: function () {
          // `this` points to the vm instance
          return this.message.split('').reverse().join('')
        }
      }
    })
  #+END_SRC

- watch ::
  - call back of data field's change event
  #+BEGIN_SRC js
    var vm = new Vue({
      el: '#demo',
      data: {
        firstName: 'Foo',
        lastName: 'Bar',
        fullName: 'Foo Bar'
      },
      watch: {
        firstName: function (val) {
          this.fullName = val + ' ' + this.lastName
        },
        lastName: function (val) {
          this.fullName = this.firstName + ' ' + val
        }
      }
    })
  #+END_SRC

* [[https://vuejs-templates.github.io/webpack/structure.html][Project Structure]]
#+BEGIN_EXAMPLE
  .
  ├── build/                      # webpack config files
  │   └── ...
  ├── config/
  │   ├── index.js                # main project config
  │   └── ...
  ├── src/
  │   ├── main.js                 # app entry file
  │   ├── App.vue                 # main app component
  │   ├── components/             # ui components
  │   │   └── ...
  │   └── assets/                 # module assets (processed by webpack)
  │       └── ...
  ├── static/                     # pure static assets (directly copied)
  ├── test/
  │   └── unit/                   # unit tests
  │   │   ├── specs/              # test spec files
  │   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests
  │   │   ├── index.js            # test build entry file
  │   │   ├── jest.conf.js        # Config file when using Jest for unit tests
  │   │   └── karma.conf.js       # test runner config file when using Karma for unit tests
  │   │   ├── setup.js            # file that runs before Jest runs your unit tests
  │   └── e2e/                    # e2e tests
  │   │   ├── specs/              # test spec files
  │   │   ├── custom-assertions/  # custom assertions for e2e tests
  │   │   ├── runner.js           # test runner script
  │   │   └── nightwatch.conf.js  # test runner config file
  ├── .babelrc                    # babel config
  ├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor
  ├── .eslintrc.js                # eslint config
  ├── .eslintignore               # eslint ignore rules
  ├── .gitignore                  # sensible defaults for gitignore
  ├── .postcssrc.js               # postcss config
  ├── index.html                  # index.html template
  ├── package.json                # build scripts and dependencies
  └── README.md                   # Default README file
#+END_EXAMPLE

* Template Syntax
:REFERENCES:
- https://vuejs.org/v2/guide/syntax.html
:END:

- The ~v-~ prefix serves as a visual cue for identifying Vue-specific attributes in your templates.

- In templates, the context of ~this~, which is the corresponding ~Vue~ object can be referred without ~this~.
#+BEGIN_SRC html
  <!-- msg is data property of the Vue object-->
  <span>Message: {{ msg }}</span>
  <span v-once>This will never change: {{ msg }}</span>
#+END_SRC

#+BEGIN_SRC html
  <p>Using mustaches: {{ rawHtml }}</p>
  <p>Using v-html directive: <span v-html="rawHtml"></span></p>
#+END_SRC

[[file:_img/screenshot_2018-03-29_12-46-08.png]]

#+BEGIN_SRC html
  <!-- remove/insert the <p> element based on whether or not 'seen' is true. -->
  <p v-if="seen">Now you see me</p>
#+END_SRC

#+BEGIN_SRC html
  <!-- .prevent modifier tells the v-on directive to call event.preventDefault() on the triggered event: -->
  <form v-on:submit.prevent="onSubmit"> ... </form>
#+END_SRC

#+BEGIN_SRC html
  <!-- full syntax -->
  <a v-bind:href="url"> ... </a>
  <!-- shorthand -->
  <a :href="url"> ... </a>

  <!-- full syntax -->
  <a v-on:click="doSomething"> ... </a>
  <!-- shorthand -->
  <a @click="doSomething"> ... </a>
#+END_SRC

* API
** Vue(options)
- [[https://vuejs.org/v2/api/#name][name]] ::
  - Only respected when used as a component option.
  - Allow the component to /recursively invoke itself/ in its template.
  - When a component is registered globally with ~Vue.component()~, the global ID is automatically set as its name.

- [[https://vuejs.org/v2/api/#data][data]] ::
  - Only accepts ~Function~ when used in a component definition.
  - The object must be plain

- [[https://vuejs.org/v2/api/#el][el]] ::
  - Only respected in instance creation via new.
  - Provide the Vue instance *an existing DOM element to mount on.*
    - It can be a CSS selector string or an actual HTMLElement.
    - It doesn't need to specify when using ~.vue~ files.

** v-bind
:REFERENCES:
- https://vuejs.org/v2/api/#v-bind
- https://vuejs.org/v2/guide/class-and-style.html
:END:

Dynamically bind one or more attributes, or a component prop to an expression.

#+BEGIN_SRC html
  <!-- bind an attribute -->
  <img v-bind:src="imageSrc">

  <!-- shorthand -->
  <img :src="imageSrc">

  <!-- with inline string concatenation -->
  <img :src="'/path/to/images/' + fileName">

  <!-- class binding -->
  <div :class="{ red: isRed }"></div>
  <div :class="[classA, classB]"></div>

  <!-- class binding ('key' is included if 'value' is true -->
  <div :class="[classA, { classB: isB, classC: isC }]">

  <!-- style binding -->
  <div :style="{ fontSize: size + 'px' }"></div>
  <div :style="[styleObjectA, styleObjectB]"></div>

  <!-- binding an object of attributes -->
  <div v-bind="{ id: someProp, 'other-attr': otherProp }"></div>

  <!-- prop binding. "prop" must be declared in my-component. -->
  <my-component :prop="someThing"></my-component>

  <!-- pass down parent props in common with a child component -->
  <child-component v-bind="$props"></child-component>
#+END_SRC

** [[https://vuejs.org/v2/api/#v-for][v-for]]
- ~:key~ ::
  Specify this to give an ordering hint.
#+BEGIN_SRC html
  <ul>
      <li v-for="(item, index) in items" :key="index"></li>
  </ul>
  <div v-for="item in items" :key="item.id">
    {{ item.text }}
  </div>
#+END_SRC

* Special Attributes
- [[https://vuejs.org/v2/api/#key][key]] ::
  - can be used as a hint for Vue's virtual DOM algorithm
  - can be used to force replacement of an element/component instead of reusing it.
#+BEGIN_SRC html
  <!-- When text changes, the <span> will always be replaced instead of patched,
       so a transition will be triggered. -->
  <transition>
    <span :key="text">{{ text }}</span>
  </transition>
#+END_SRC

* Lifecycle Hooks
- [[https://vuejs.org/v2/api/#created][created]] ::
  - The instance has finished processing options
  - ~data~, ~computed~, ~methods~, ~watch~, ~event~ are now accessible

* List Rendering
:REFERENCES:
- https://vuejs.org/v2/guide/list.html
- https://vuejs.org/v2/guide/list.html#key
:END:

#+BEGIN_SRC vue
  <ul id="example-1">
    <li v-for="item in items">
      {{ item.message }}
    </li>
  </ul>

  <div v-for="(value, key) in object">
    {{ key }}: {{ value }}
  </div>

  <!-- It is recommended to provide a key with v-for whenever possible -->
  <div v-for="item in items" :key="item.id">
    <!-- content -->
  </div>
#+END_SRC

* [[https://vuejs.org/v2/guide/components.html][Components]]
** Name Casing
According to [[./style-guide]], ~PascalCase~ naming is preferred when it is possible.

#+BEGIN_QUOTE
When defining a component with PascalCase, you can use either case when referencing its custom element.
That means both ~<my-component-name>~ and ~<MyComponentName>~ are acceptable.
Note, however, that only kebab-case names are valid directly in the DOM (i.e. non-string templates).
#+END_QUOTE

Non-string templates are things when you use Vue.js within actual ~.html~ files, consider following code:
#+BEGIN_SRC html
  <body>
    <div id="app"> <!-- your App is runnning in this div --->
      <my-component></my-component>
    </div>

    <template id="template-for-my-component">
      {{ message }}
    </template>
  </body>
#+END_SRC

This HTML will be controlled by the browser before Vue can work with it,
and therefore Vue is limited by the caveats explained in the linked documentation

-----
- https://vuejs.org/v2/guide/components-registration.html#Name-Casing
- https://forum.vuejs.org/t/confused-about-dom-template-and-string-template/1797/2

** Global Components
#+BEGIN_SRC html
  <div id="example">
    <my-component></my-component>
  </div>
#+END_SRC

#+BEGIN_SRC javascript
  // register
  Vue.component('my-component', {
    template: '<div>A custom component!</div>'
  })

  // create a root instance
  new Vue({
    el: '#example'
  })
#+END_SRC

** Local Components
:REFERENCES:
- https://v1.vuejs.org/guide/components.html#Component-Option-Caveats
:END:

- ~data~ and ~el~ should be functions, otherwise the state of components is all shared.

#+BEGIN_SRC javascript
  var Child = {
    template: '<div>A custom component!</div>'
  }

  new Vue({
    // ...
    components: {
      // <my-component> will only be available in parent's template
      'my-component': Child,
      //  Using it as <Child/>
      Child,

    }
  })
#+END_SRC

** Composing Components
[[file:_img/screenshot_2018-03-07_14-04-10.png]]

The API for a Vue component comes in three parts - ~props~, ~events~, and ~slots~:
- Props allow the external environment to pass data into the component
- Events allow the component to trigger side effects in the external environment
- Slots allow the external environment to compose the component with extra content.

#+BEGIN_SRC html
  <my-component
    :foo="baz"
    :bar="qux"
    @event-a="doThis"
    @event-b="doThat"
  >
    <img slot="icon" src="...">
    <p slot="main-text">Hello!</p>
  </my-component>
#+END_SRC

** [[https://vuejs.org/v2/guide/components-props.html][Props]]
- A ~prop~ is a field on a component’s ~data~ that is expected to be passed down from its parent component.
- So, a ~prop~ can be referenced as ~this.<prop>~ or ~{{ <prop> }}~
- When you’re using in-DOM templates(See /Name Casing/ above), ~camelCased~ prop names need to use their ~kebab-cased~ equivalents

#+BEGIN_SRC js
  Vue.component('blog-post', {
    // camelCase in JavaScript
    props: ['postTitle'],
    template: '<h3>{{ postTitle }}</h3>'
  })
#+END_SRC

#+BEGIN_SRC html
  <!-- Vue (string templates) -->
  <blog-post postTitle="hello!"></blog-post>

  <!-- Vue with dynamic props (string templates) -->
  <blog-post :postTitle="hello!"></blog-post>

  <!-- HTML (non-string templates) -->
  <blog-post post-title="hello!"></blog-post>
#+END_SRC

#+BEGIN_SRC js
  Vue.component('my-component', {
    props: {
      // Basic type check (`null` matches any type)
      propA: Number,
      // Multiple possible types
      propB: [String, Number],
      // Required string
      propC: {
        type: String,
        required: true
      },
      // Number with a default value
      propD: {
        type: Number,
        default: 100
      },
      // Object with a default value
      propE: {
        type: Object,
        // Object or array defaults must be returned from
        // a factory function
        default: function () {
          return { message: 'hello' }
        }
      },
      // Custom validator function
      propF: {
        validator: function (value) {
          // The value must match one of these strings
          return ['success', 'warning', 'danger'].indexOf(value) !== -1
        }
      }
    }
  })
#+END_SRC

-----
- https://vuejs.org/v2/guide/components.html#Props

** [[https://v1.vuejs.org/guide/components.html#Single-Slot][Slots]]
The content between child component tags is passed to where ~<slot>~ tags placed within the child component.

- ~<child>DATA</child>~ ::
  - ~DATA~ is put into the single existing ~<slot></slot>~.
- ~<template slot="name">DATA</template>~ ::
  - ~DATA~ is put into the named slot ~<slot name="name"></slot>~
- ~<template slot="name" slot-scope="data">{{ data.DATA }}</template>~ ::
  - Access to data from the child

#+BEGIN_SRC html
  <div>
    <h1>This is my component!</h1>
    <slot>
      This will only be displayed if there is no content
      to be distributed.
    </slot>
  </div>
#+END_SRC

#+BEGIN_SRC html
  <my-component>
    <p>This is some original content</p>
    <p>This is some more original content</p>
  </my-component>
#+END_SRC

Rendered as:
#+BEGIN_SRC html
  <div>
    <h1>This is my component!</h1>
    <p>This is some original content</p>
    <p>This is some more original content</p>
  </div>
#+END_SRC

** [[https://vuejs.org/v2/guide/single-file-components.html][Single File Components]] (.vue)
#+BEGIN_QUOTE
In many Vue projects, global components will be defined using ~Vue.component~, followed by ~new Vue({ el: '#container' })~ to target a container element in the body of every page.
#+END_QUOTE

* How-to
** Configure different environment variables by stage
:REFERENCES:
- https://vuejs.org/v2/guide/deployment.html
- https://vuejs-templates.github.io/webpack/env.html
:END:

- Use ~webpack.DefinePlugin~ to configure ~process.env~

If you use vue template is easier to configure:
#+BEGIN_SRC js
  // config/prod.env.js
  module.exports = {
    NODE_ENV: '"production"',
    DEBUG_MODE: false,
    API_KEY: '"..."' // this is shared between all environments
  }

  // config/dev.env.js
  module.exports = merge(prodEnv, {
    NODE_ENV: '"development"',
    DEBUG_MODE: true // this overrides the DEBUG_MODE value of prod.env
  })

  // config/test.env.js
  module.exports = merge(devEnv, {
    NODE_ENV: '"testing"'
  })
#+END_SRC

#+BEGIN_SRC js
  Vue.config.productionTip = process.env.NODE_ENV === 'production'
#+END_SRC

** Use axios with Vue.js
- http://vuejs.kr/update/2017/01/04/http-request-with-axios/

#+BEGIN_SRC javascript
  import Vue from 'vue'
  import App from './App'
  import axios from 'axios'

  // Use axios globally
  Vue.prototype.$http = axios

  // Or, just import axios in each component
#+END_SRC

* Topics
** v-if vs v-show
#+BEGIN_QUOTE
Generally speaking, ~v-if~ has higher toggle costs while ~v-show~ has higher initial render costs.
So prefer ~v-show~ if you need to toggle something very often, and prefer ~v-if~ if the condition is unlikely to change at runtime.
#+END_QUOTE

-----
- https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show

* Testing
- Components ::
  - [[https://github.com/vuejs/vue-test-utils][vue-test-utils]]
  - [[https://facebook.github.io/jest/docs/en/jest-platform.html][jest]]
  - [[https://github.com/babel/babel-jest][babel-jest]] (for ES2015+ features in tests)
  - [[https://github.com/vuejs/vue-jest][vue-jest]] (for handling ~*.vue~ files in tests)
  - [[https://github.com/eddyerburgh/jest-serializer-vue][jest-serializer-vue]] (for snapshot tests)

- Guides ::
  - [[https://alexjoverm.github.io/series/Unit-Testing-Vue-js-Components-with-the-Official-Vue-Testing-Tools-and-Jest/][Unit Testing Vue.js Components with the Official Vue Testing Tools and Jest]]

* Links
- [[https://codesandbox.io/s/o29j95wx9][Simple Todo App]]
- https://monterail.github.io/vuelidate/#examples
