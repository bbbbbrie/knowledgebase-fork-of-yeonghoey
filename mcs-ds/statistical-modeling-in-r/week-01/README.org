#+TITLE: STAT 420: Week 01

* Table of Contents :TOC_2_gh:
- [[#r-and-rstudio][R and RStudio]]
  - [[#basic-r][Basic R]]
  - [[#vectors][Vectors]]
  - [[#logical-operators][Logical Operators]]
  - [[#vertorization][Vertorization]]
  - [[#programming-basics][Programming Basics]]
- [[#data][Data]]
  - [[#data-types][Data Types]]
  - [[#matrices][Matrices]]
  - [[#lists][Lists]]
  - [[#data-frames][Data Frames]]
  - [[#data-frames-and-tibbles][Data Frames and Tibbles]]
  - [[#importing-data][Importing Data]]
- [[#summerizing-data][Summerizing Data]]
  - [[#basic-statistics-in-r][Basic Statistics in R]]
  - [[#visualization-in-r][Visualization in R]]
- [[#rmarkdown][RMarkdown]]

* R and RStudio
** Basic R
#+BEGIN_SRC R :results output :exports both
  1 + 2 - 3 * 4 / (5 ^ 6)
  sqrt(2)
  pi
  exp(1)
  log(1)
  log(exp(1))
#+END_SRC

#+RESULTS:
: [1] 2.999232
: [1] 1.414214
: [1] 3.141593
: [1] 2.718282
: [1] 0
: [1] 1

#+BEGIN_SRC R
  ?log  # open the reference document
#+END_SRC

#+BEGIN_SRC R
  # Two assignments, be consistent with yourself
  a = 1
  b <- 2
#+END_SRC

#+BEGIN_SRC R
  install.packages("mosaicData")
  mosaicData::Galton   # access elements inside package

  library(mosaicData)  # like 'from mosaicData import *' in Python
  Galton
#+END_SRC

** Vectors
#+BEGIN_SRC R :results output :exports both
  is.numeric(42.5)
  is.double(42.5)
  is.logical(TRUE)
  is.character("Statistics")
#+END_SRC

#+RESULTS:
: [1] TRUE
: [1] TRUE
: [1] TRUE
: [1] TRUE

*Vector*: 1d, homogenous
#+BEGIN_SRC R :results output :exports both
  2                   # a vector of length 1
  c(1, 3, 5, 7, 8, 9) # 'c' stands for 'combine'
  (y = 1:100)         # assign to 'y' and output it
#+END_SRC

#+RESULTS:
: [1] 2
: [1] 1 3 5 7 8 9
:   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
:  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
:  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
:  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
:  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
:  [91]  91  92  93  94  95  96  97  98  99 100

Numbers like ~[1]~, ~[19]~ indicate element indexes.
It designates that the following element printed is the ~n~ th element.

#+BEGIN_SRC R :results output :exports both
  # type coercion
  c(42, "Statistics", TRUE)
  c(42, TRUE)
#+END_SRC

#+RESULTS:
: [1] "42"         "Statistics" "TRUE"
: [1] 42  1

#+BEGIN_SRC R :results output :exports both
  seq(from = 1.5, to = 2.2, by = 0.1)
  seq(1, 9, 2)

  rep("A", times = 10)
#+END_SRC

#+RESULTS:
: [1] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2
: [1] 1 3 5 7 9
:  [1] "A" "A" "A" "A" "A" "A" "A" "A" "A" "A"

#+BEGIN_SRC R :results output :exports both
  x = c(1, 2, 3, 4, 5)
  x[1]
  x[3]
  x[-2]      # everything except the 2nd element
  x[1:3]     # 1st - 3rd elements
  x[c(1, 4)] # 1st, and 4th elements

  z = c(TRUE, FALSE, TRUE, FALSE, TRUE)
  x[z]  # corresponding TRUE elements
#+END_SRC

#+RESULTS:
: [1] 1
: [1] 3
: [1] 1 3 4 5
: [1] 1 2 3
: [1] 1 4
: [1] 1 3 5

** Logical Operators
#+BEGIN_SRC R :results output :exports both
  x = c(1, 3, 5, 7, 9)

  x > 3
  x < 3
  x == 3
  x != 3

  x == 3 & x != 3
  x == 3 | x != 3
#+END_SRC

#+RESULTS:
: [1] FALSE FALSE  TRUE  TRUE  TRUE
: [1]  TRUE FALSE FALSE FALSE FALSE
: [1] FALSE  TRUE FALSE FALSE FALSE
: [1]  TRUE FALSE  TRUE  TRUE  TRUE
: [1] FALSE FALSE FALSE FALSE FALSE
: [1] TRUE TRUE TRUE TRUE TRUE

#+BEGIN_SRC R :results output :exports both
  x = c(1, 3, 5, 7, 9)

  x[x > 3]
  x[x != 3]
#+END_SRC

#+RESULTS:
: [1] 5 7 9
: [1] 1 5 7 9

#+BEGIN_SRC R :results output :exports both
  x = c(1, 3, 5, 7, 9)

  sum(x > 3)              # logical -> (0 or 1) coercion occurred
  sum(as.numeric(x > 3))  # equivalent to above

  which(x > 3)     # get indexes of elements that > 3
  x[which(x > 3)]
  x[x > 3]         # same effect as above

  max(x)             # value
  which(x == max(x)) # index
  which.max(x)       # same as above
#+END_SRC

#+RESULTS:
: [1] 3
: [1] 3
: [1] 3 4 5
: [1] 5 7 9
: [1] 5 7 9
: [1] 9
: [1] 5
: [1] 5

** Vertorization
#+BEGIN_SRC R :results output :exports both
  x = c(1, 3, 5, 7, 9)
  y = c(2, 4, 6)

  log(x)
  sqrt(x)
  x + 2  # vectorization c(2) -> c(2, 2, 2, 2, 2)
  x + y  # warning, vectors' lengths are not compatible
#+END_SRC

#+RESULTS:
: [1] 0.000000 1.098612 1.609438 1.945910 2.197225
: [1] 1.000000 1.732051 2.236068 2.645751 3.000000
: [1]  3  5  7  9 11
: [1]  3  7 11  9 13

#+BEGIN_SRC R :results output :exports both
  all(c(TRUE, TRUE))
  all(c(TRUE, FALSE))
  identical(c(1, 2, 3), c(1, 2, 3) + c(0, 0, 0))
#+END_SRC

#+RESULTS:
: [1] TRUE
: [1] FALSE
: [1] TRUE

** Programming Basics
#+BEGIN_SRC R :results output :exports both
  if (2 > 1) {
    print("Hi")
  } else {
    print("Bye")
  }
#+END_SRC

#+RESULTS:
: [1] "Hi"

#+BEGIN_SRC R :results output :exports both
  ifelse(4 > 3, 1, 0)
  ifelse(1:3 %% 2 == 1, "Odd", "Even")
#+END_SRC

#+RESULTS:
: [1] 1
: [1] "Odd"  "Even" "Odd"

#+BEGIN_SRC R :results output :exports both
  x = seq(1, 10, 2)
  for (i in 1:5) {
    x[i] = x[i] * 2
  }
  x
#+END_SRC

#+RESULTS:
: [1]  2  6 10 14 18

#+BEGIN_SRC R :results output :exports both
  f = function(arg1, arg2 = 99) {
    a = arg1 + arg2
    c(a, 0)  # last line returned
  }
  f(c(1, 2, 3))
#+END_SRC

#+RESULTS:
: [1] 100 101 102   0

* Data
** Data Types
[[file:./_img/screenshot_2018-05-17_16-53-47.png]]

[[file:./_img/screenshot_2018-05-17_16-55-01.png]]

Examples:
| HDL (mg/dL)    | 40.5, 60.7, 45.6 | Numerical, Continuous |
| Age (Years)    | 22, 13, 60, 45   | Numerical, Discrete   |
| Genotype       | AA, Aa,          | Categorical, Nominal  |
| Grade (Letter) | A, B, C, F       | Categorical, Ordinal  |
** Matrices
#+BEGIN_SRC R :results output :exports both
  x = 1:9
  X = matrix(x, nrow = 3, ncol = 3)  # R is case sensitive
  X
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    4    7
: [2,]    2    5    8
: [3,]    3    6    9

#+BEGIN_SRC R :results output :exports both
  Y = matrix(1:9, 3, 3, byrow = TRUE)
  Y
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    2    3
: [2,]    4    5    6
: [3,]    7    8    9

#+BEGIN_SRC R :results output :exports both
  X = matrix(1:9, 3, 3)
  X
  X[1, 2]
  X[1, ]         # 1st row
  X[, 2]         # 2nd col
  X[2, c(1, 3)]  # 2nd row, 1st and 3rd element
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    4    7
: [2,]    2    5    8
: [3,]    3    6    9
: [1] 4
: [1] 1 4 7
: [1] 4 5 6
: [1] 2 8

#+BEGIN_SRC R :results output :exports both
  # column bind
  x = 1:3
  y = 1:3 * 10
  z = 1:3 * 100
  cbind(x, y, z)                      # column named are bound as their variable name
  cbind(col1 = x, col2 = y, col3 = z) # specify column names explicitly
#+END_SRC

#+RESULTS:
:      x  y   z
: [1,] 1 10 100
: [2,] 2 20 200
: [3,] 3 30 300
:      col1 col2 col3
: [1,]    1   10  100
: [2,]    2   20  200
: [3,]    3   30  300

#+BEGIN_SRC R :results output :exports both
  X = matrix(1:9, 3, 3)
  Y = matrix(1:9, 3, 3, byrow = TRUE)

  X + Y
  X - Y
  X * Y  # element-wise
  X / Y
  X %*% Y  # dot product
#+END_SRC

#+RESULTS:
#+begin_example
     [,1] [,2] [,3]
[1,]    2    6   10
[2,]    6   10   14
[3,]   10   14   18
     [,1] [,2] [,3]
[1,]    0    2    4
[2,]   -2    0    2
[3,]   -4   -2    0
     [,1] [,2] [,3]
[1,]    1    8   21
[2,]    8   25   48
[3,]   21   48   81
          [,1] [,2]     [,3]
[1,] 1.0000000 2.00 2.333333
[2,] 0.5000000 1.00 1.333333
[3,] 0.4285714 0.75 1.000000
     [,1] [,2] [,3]
[1,]   66   78   90
[2,]   78   93  108
[3,]   90  108  126
#+end_example

#+BEGIN_SRC R :results output :exports both
  Z = matrix(c(1, 2, 3, 0, 1, 4, 5, 6, 0), 3, 3)
  solve(Z)  # inverse
  I = solve(Z) %*% Z
  all.equal(I, diag(3))  # nearly equal
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]  -24   20   -5
: [2,]   18  -15    4
: [3,]    5   -4    1
: [1] TRUE

#+BEGIN_SRC R :results output :exports both
  I = diag(3)
  I
  dim(I)
  nrow(I)
  ncol(I)
  rowSums(I)
  colMeans(I)
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    0    0
: [2,]    0    1    0
: [3,]    0    0    1
: [1] 3 3
: [1] 3
: [1] 3
: [1] 1 1 1
: [1] 0.3333333 0.3333333 0.3333333
** Lists
Can contain elements of different data types.

#+BEGIN_SRC R :results output :exports both
  list(42, "Hello", TRUE)
#+END_SRC

#+RESULTS:
: [[1]]
: [1] 42
:
: [[2]]
: [1] "Hello"
:
: [[3]]
: [1] TRUE
:

- Numbers in double brackets are the element index of the list
- Numbers in single brackets are the same as before, the element index of the vector

#+BEGIN_SRC R :results output :exports both
  x = list(
    a = 1:4,
    b = TRUE,
    c = function(x) {
      x + 1
    }
  )

  x
  x$a             # vector
  x[1]            # list
  x["a"]          # list
  x[["a"]]        # vector
  x[1:2]          # list
  x[c("a", "b")]  # list
#+END_SRC

#+RESULTS:
#+begin_example
$a
[1] 1 2 3 4

$b
[1] TRUE

$c
function (x)
{
    x + 1
}

[1] 1 2 3 4
$a
[1] 1 2 3 4

$a
[1] 1 2 3 4

[1] 1 2 3 4
$a
[1] 1 2 3 4

$b
[1] TRUE

$a
[1] 1 2 3 4

$b
[1] TRUE

#+end_example

** Data Frames
- A kind of a list of vector, but keep rows and columns structure.

#+BEGIN_SRC R :results output :exports both
  d = data.frame(
    x = 1:3,
    y = c("Hi", "Bye", "Hi"),
    z = c(TRUE, FALSE, TRUE)
  )
  d
  str(d) # structure
#+END_SRC

#+RESULTS:
:   x   y     z
: 1 1  Hi  TRUE
: 2 2 Bye FALSE
: 3 3  Hi  TRUE
: 'data.frame':	3 obs. of  3 variables:
:  $ x: int  1 2 3
:  $ y: Factor w/ 2 levels "Bye","Hi": 2 1 2
:  $ z: logi  TRUE FALSE TRUE

** Data Frames and Tibbles
#+BEGIN_SRC R :results output :exports both
  Galton = mosaicData::Galton

  # View(Galton) RStudio(GUI, required) show a quick overview of the data
  Galton = head(Galton, n = 10) # first 10 rows
  Galton

  # Data Frame converts character vectors to factor(kind of an enum type) vectors
  # There is an option to turn this off
  Galton$sex
  levels(Galton$sex)

  # returns vectors
  Galton[7, 3]  # 7th row, 3rd col(mother)
  Galton[, 2]   # 2nd col(father)
  Galton[1, 2]  # 1st row, 2nd col(father)
  Galton$father
  Galton[["father"]]

  # returns Data Frames
  Galton[1,]          # 1st row
  Galton[5]           # 5th col(height)
  Galton[1:5]         # 1~5 cols
  Galton["father"]

  # complex
  Galton[Galton$sex == "F",]$height
  subset(Galton, subset = height > 70)  # 'height' is referenced within Galton data set
#+END_SRC

#+RESULTS:
#+begin_example
   family father mother sex height nkids
1       1   78.5   67.0   M   73.2     4
2       1   78.5   67.0   F   69.2     4
3       1   78.5   67.0   F   69.0     4
4       1   78.5   67.0   F   69.0     4
5       2   75.5   66.5   M   73.5     4
6       2   75.5   66.5   M   72.5     4
7       2   75.5   66.5   F   65.5     4
8       2   75.5   66.5   F   65.5     4
9       3   75.0   64.0   M   71.0     2
10      3   75.0   64.0   F   68.0     2
[1] 66.5
 [1] 78.5 78.5 78.5 78.5 75.5 75.5 75.5 75.5 75.0 75.0
[1] 78.5
 [1] 78.5 78.5 78.5 78.5 75.5 75.5 75.5 75.5 75.0 75.0
 [1] 78.5 78.5 78.5 78.5 75.5 75.5 75.5 75.5 75.0 75.0
  family father mother sex height nkids
1      1   78.5     67   M   73.2     4
   height
1    73.2
2    69.2
3    69.0
4    69.0
5    73.5
6    72.5
7    65.5
8    65.5
9    71.0
10   68.0
   family father mother sex height
1       1   78.5   67.0   M   73.2
2       1   78.5   67.0   F   69.2
3       1   78.5   67.0   F   69.0
4       1   78.5   67.0   F   69.0
5       2   75.5   66.5   M   73.5
6       2   75.5   66.5   M   72.5
7       2   75.5   66.5   F   65.5
8       2   75.5   66.5   F   65.5
9       3   75.0   64.0   M   71.0
10      3   75.0   64.0   F   68.0
   father
1    78.5
2    78.5
3    78.5
4    78.5
5    75.5
6    75.5
7    75.5
8    75.5
9    75.0
10   75.0
[1] 69.2 69.0 69.0 65.5 65.5 68.0
  family father mother sex height nkids
1      1   78.5   67.0   M   73.2     4
5      2   75.5   66.5   M   73.5     4
6      2   75.5   66.5   M   72.5     4
9      3   75.0   64.0   M   71.0     2
#+end_example

#+BEGIN_SRC R :results output :exports both
  library(tibble)
  Galton = as_tibble(head(mosaicData::Galton, n = 10))

  # tibbles show more informantion
  # tibbles don't convert characters into factors by default
  Galton

  # returns vectors
  Galton$height
  Galton[["height"]]

  # returns tibbles
  Galton["height"]
  Galton[,5]
  Galton[1, 5]
#+END_SRC

#+RESULTS:
#+begin_example
# A tibble: 10 x 6
   family father mother sex   height nkids
 ,* <fct>   <dbl>  <dbl> <fct>  <dbl> <int>
 1 1        78.5   67   M       73.2     4
 2 1        78.5   67   F       69.2     4
 3 1        78.5   67   F       69       4
 4 1        78.5   67   F       69       4
 5 2        75.5   66.5 M       73.5     4
 6 2        75.5   66.5 M       72.5     4
 7 2        75.5   66.5 F       65.5     4
 8 2        75.5   66.5 F       65.5     4
 9 3        75     64   M       71       2
10 3        75     64   F       68       2
 [1] 73.2 69.2 69.0 69.0 73.5 72.5 65.5 65.5 71.0 68.0
 [1] 73.2 69.2 69.0 69.0 73.5 72.5 65.5 65.5 71.0 68.0
# A tibble: 10 x 1
   height
    <dbl>
 1   73.2
 2   69.2
 3   69
 4   69
 5   73.5
 6   72.5
 7   65.5
 8   65.5
 9   71
10   68
# A tibble: 10 x 1
   height
    <dbl>
 1   73.2
 2   69.2
 3   69
 4   69
 5   73.5
 6   72.5
 7   65.5
 8   65.5
 9   71
10   68
# A tibble: 1 x 1
  height
   <dbl>
1   73.2
#+end_example

- NEVER use ~attach()~

** Importing Data
#+BEGIN_SRC R :results output :exports both
  library(readr)
  d = read_csv("example-data.csv")  # from 'readr', faster, returns 'tibble'
  d = read.csv("example-data.csv")  # standard,     slower, returns 'data.frame'
#+END_SRC

* Summerizing Data
** Basic Statistics in R
#+BEGIN_SRC R :results output :exports both
  mpg = ggplot2::mpg
  # View(mpg)      # GUI
  # ?mpg

  mean(mpg$cty)
  median(mpg$cty)
  var(mpg$cty)
  sd(mpg$cty)
  range(mpg$cty)  # min max
  IQR(mpg$cty)    # Interquartile range

  summary(mpg$cty)
  table(mpg$drv)  # counts for each factor level
#+END_SRC

#+RESULTS:
#+begin_example
[1] 16.85897
[1] 17
[1] 18.11307
[1] 4.255946
[1]  9 35
[1] 5
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   9.00   14.00   17.00   16.86   19.00   35.00

  4   f   r
103 106  25
#+end_example

** Visualization in R
- Summerize numeric data: use ~histogram~

#+BEGIN_SRC R :file _img/hist1.png :results graphics :exports both
  mpg = ggplot2::mpg
  hist(mpg$cty)
#+END_SRC

#+RESULTS:
[[file:_img/hist1.png]]

#+BEGIN_SRC R :file _img/hist2.png :results graphics :exports both
  mpg = ggplot2::mpg
  hist(mpg$cty,
       xlab = "Miles Per Gallon (City)",
       main = "Histogram of MPG (City)",
       breaks = 12,
       col = "darkorange",
       border = "dodgerblue")
#+END_SRC

#+RESULTS:
[[file:_img/hist2.png]]

- Summerize categorical data: use ~barplot~

#+BEGIN_SRC R :file _img/barplot.png :results graphics :exports both
  mpg = ggplot2::mpg
  barplot(table(mpg$drv))
#+END_SRC

#+RESULTS:
[[file:_img/barplot.png]]

- Relationship between two variables: use ~boxplot~
#+BEGIN_SRC R :file _img/boxplot.png :results graphics :exports both
  mpg = ggplot2::mpg
  # 'hwy', 'drv' is under 'mpg'
  # like 'y ~ x'
  boxplot(hwy ~ drv, data = mpg)
#+END_SRC

#+RESULTS:
[[file:_img/boxplot.png]]

[[file:_img/screenshot_2018-05-17_18-58-03.png]]

#+BEGIN_SRC R :file _img/plot.png :results graphics :exports both
  mpg = ggplot2::mpg
  # scatter plot
  plot(hwy ~ displ, data = mpg)
#+END_SRC

#+RESULTS:
[[file:_img/plot.png]]
* RMarkdown
There are a header of meta informantion for the document
#+BEGIN_SRC markdown
  ---
  title: "RMarkdown"
  author: "Yeongho Kim"
  ---
#+END_SRC

RMarkdown supports R blocks as follows:
#+BEGIN_SRC markdown
  ```{r}
  # R code here
  x = 1:10
  ```

  You can configure some options
  ```{r, echo=FALSE, fig.height=10, fig.width=10, eval=TRUE}
  # Blocks are run in the order of appearance
  y = x + 2
  ```

  You can reference this chunk with name `example_chunk`
  ```{r example_chunk}
  z = x + y
  ```

  You can put inline R code like: `r mean(data)`
#+END_SRC

Supports LaTex with MathJax
#+BEGIN_SRC markdown
  $$
  LaTex here
  $x = y$
#+END_SRC
