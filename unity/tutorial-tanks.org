#+TITLE: Tanks tutorial

* Table of Contents :TOC_1_gh:
 - [[#scene-setup][Scene Setup]]
 - [[#tank-creation--control][Tank Creation & Control]]
 - [[#camera-control][Camera Control]]
 - [[#tank-health][Tank Health]]
 - [[#shell-creation][Shell Creation]]

* Scene Setup 
- https://unity3d.com/learn/tutorials/projects/tanks-tutorial/scene-setup?playlist=20081

[[file:img/screenshot_2017-04-29_17-16-54.png]]

[[file:img/screenshot_2017-04-29_17-18-10.png]]

[[file:img/screenshot_2017-04-29_17-21-43.png]]


[[file:img/screenshot_2017-04-29_17-22-52.png]]


[[file:img/screenshot_2017-04-29_17-27-00.png]]

[[file:img/screenshot_2017-04-29_17-24-54.png]]

[[file:img/screenshot_2017-04-29_17-33-05.png]]

[[file:img/screenshot_2017-04-29_17-34-22.png]]

[[file:img/screenshot_2017-04-29_17-35-32.png]]
* Tank Creation & Control
- https://unity3d.com/learn/tutorials/projects/tanks-tutorial/tank-creation-control?playlist=20081


[[file:img/screenshot_2017-04-29_17-40-28.png]]

[[file:img/screenshot_2017-04-29_17-43-56.png]]

[[file:img/screenshot_2017-04-29_17-46-55.png]]

[[file:img/screenshot_2017-04-29_17-47-15.png]]

[[file:img/screenshot_2017-04-29_17-47-23.png]]

[[file:img/screenshot_2017-04-29_17-50-14.png]]

[[file:img/screenshot_2017-04-29_17-53-48.png]]

[[file:img/screenshot_2017-04-29_17-55-31.png]]

[[file:img/screenshot_2017-04-29_17-58-53.png]]

[[file:img/screenshot_2017-04-29_18-00-08.png]]

[[file:img/screenshot_2017-04-29_18-11-16.png]]

[[file:img/screenshot_2017-04-29_18-11-52.png]]

[[file:img/screenshot_2017-04-29_18-13-23.png]]

[[file:img/screenshot_2017-04-29_18-13-39.png]]

[[file:img/screenshot_2017-04-29_18-14-24.png]]

[[file:img/screenshot_2017-04-29_18-14-36.png]]

[[file:img/screenshot_2017-04-29_18-14-55.png]]


[[file:img/screenshot_2017-04-29_18-16-45.png]]

[[file:img/screenshot_2017-04-29_18-16-32.png]]

#+BEGIN_SRC csharp
  private void EngineAudio()
  {
      // Play the correct audio clip based on whether or not the tank is moving and what audio is currently playing.
      if (Mathf.Abs (m_MovementInputValue) < 0.1f && Mathf.Abs (m_TurnInputValue) < 0.1f) {
        if (m_MovementAudio.clip == m_EngineDriving) {
          m_MovementAudio.clip = m_EngineIdling;
          m_MovementAudio.pitch = Random.Range (m_OriginalPitch - m_PitchRange, m_OriginalPitch + m_PitchRange);
          m_MovementAudio.Play ();
        }
      } else {
        if (m_MovementAudio.clip == m_EngineIdling)
        {
          m_MovementAudio.clip = m_EngineDriving;
          m_MovementAudio.pitch = Random.Range (m_OriginalPitch - m_PitchRange, m_OriginalPitch + m_PitchRange);
          m_MovementAudio.Play ();
        }
      }
  }


  private void FixedUpdate()
  {
      // Move and turn the tank.
      Move();
      Turn ();
  }


  private void Move()
  {
      Vector3 movement = transform.forward * m_MovementInputValue * m_Speed * Time.deltaTime;
      m_Rigidbody.MovePosition(m_Rigidbody.position + movement);
  }


  private void Turn()
  {
      float turn = m_TurnInputValue * m_TurnSpeed * Time.deltaTime;
      Quaternion turnRotation = Quaternion.Euler (0f, turn, 0f);
      m_Rigidbody.MoveRotation (m_Rigidbody.rotation * turnRotation);
  }
#+END_SRC

[[file:img/screenshot_2017-04-29_18-33-53.png]]

[[file:img/screenshot_2017-04-29_18-38-27.png]]
* Camera Control
- https://unity3d.com/learn/tutorials/projects/tanks-tutorial/camera-control?playlist=20081

[[file:img/screenshot_2017-04-29_18-43-36.png]]

[[file:img/screenshot_2017-04-29_18-44-09.png]]

[[file:img/screenshot_2017-04-29_18-45-15.png]]

[[file:img/screenshot_2017-04-29_18-45-54.png]]

[[file:img/screenshot_2017-04-29_18-46-11.png]]

[[file:img/screenshot_2017-04-29_18-47-15.png]]

[[file:img/screenshot_2017-04-29_18-47-29.png]]

[[file:img/screenshot_2017-04-29_18-48-17.png]]


[[file:img/screenshot_2017-04-29_18-53-12.png]]

#+BEGIN_SRC csharp
  [HideInInspector] public Transform[] m_Targets; 

  private void Move()
  {
      FindAveragePosition();
      transform.position = Vector3.SmoothDamp(transform.position, m_DesiredPosition, ref m_MoveVelocity, m_DampTime);

  }
  private void FindAveragePosition()
  {
      Vector3 averagePos = new Vector3();
      int numTargets = 0;

      for (int i = 0; i < m_Targets.Length; i++)
      {
          if (!m_Targets[i].gameObject.activeSelf)
              continue;
          averagePos += m_Targets[i].position;
          numTargets++;
      }

      if (numTargets > 0)
          averagePos /= numTargets;
      averagePos.y = transform.position.y;
      m_DesiredPosition = averagePos;
  }
#+END_SRC

[[file:img/screenshot_2017-04-29_18-57-14.png]]

#+BEGIN_SRC csharp
  private void Zoom()
  {
      float requiredSize = FindRequiredSize();
      m_Camera.orthographicSize = Mathf.SmoothDamp(m_Camera.orthographicSize, requiredSize, ref m_ZoomSpeed, m_DampTime);
  }

  private float FindRequiredSize()
  {
      Vector3 desiredLocalPos = transform.InverseTransformPoint(m_DesiredPosition);
      float size = 0f;
      for (int i = 0; i < m_Targets.Length; i++)
      {
          if (!m_Targets[i].gameObject.activeSelf)
              continue;

          Vector3 targetLocalPos = transform.InverseTransformPoint(m_Targets[i].position);
          Vector3 desiredPosToTarget = targetLocalPos - desiredLocalPos;
          size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.y));
          size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.x) / m_Camera.aspect);
      }
      size += m_ScreenEdgeBuffer;
      size = Mathf.Max(size, m_MinSize);
      return size;
  }

#+END_SRC

- ~InverseTransformPoint~ : Transforms position from world space to local space.

[[file:img/screenshot_2017-04-29_19-03-41.png]]
* Tank Health
- https://unity3d.com/learn/tutorials/projects/tanks-tutorial/tank-health?playlist=20081


[[file:img/screenshot_2017-04-29_22-40-48.png]]

[[file:img/screenshot_2017-04-29_22-41-35.png]]

[[file:img/screenshot_2017-04-29_22-42-35.png]]


[[file:img/screenshot_2017-04-29_22-43-54.png]]

[[file:img/screenshot_2017-04-29_22-44-06.png]]

[[file:img/screenshot_2017-04-29_22-45-05.png]]

[[file:img/screenshot_2017-04-29_22-47-33.png]]

[[file:img/screenshot_2017-04-29_22-48-55.png]]

[[file:img/screenshot_2017-04-29_22-51-15.png]]

[[file:img/screenshot_2017-04-29_22-53-55.png]]

[[file:img/screenshot_2017-04-29_22-55-58.png]]

[[file:img/screenshot_2017-04-29_22-57-13.png]]

#+BEGIN_SRC csharp
  using UnityEngine;

  public class UIDirectionControl : MonoBehaviour
  {
      public bool m_UseRelativeRotation = true;  


      private Quaternion m_RelativeRotation;     


      private void Start()
      {
          m_RelativeRotation = transform.parent.localRotation;
      }


      private void Update()
      {
          if (m_UseRelativeRotation)
              transform.rotation = m_RelativeRotation;
      }
  }
#+END_SRC

[[file:img/screenshot_2017-04-29_23-00-21.png]]

[[file:img/screenshot_2017-04-29_23-01-26.png]]

#+BEGIN_SRC csharp
  using UnityEngine;
  using UnityEngine.UI;

  public class TankHealth : MonoBehaviour
  {
      public float m_StartingHealth = 100f;
      public Slider m_Slider;
      public Image m_FillImage;
      public Color m_FullHealthColor = Color.green;
      public Color m_ZeroHealthColor = Color.red;
      public GameObject m_ExplosionPrefab;

      private AudioSource m_ExplosionAudio;
      private ParticleSystem m_ExplosionParticles;
      private float m_CurrentHealth;
      private bool m_Dead;


      private void Awake()
      {
          m_ExplosionParticles = Instantiate(m_ExplosionPrefab).GetComponent<ParticleSystem>();
          m_ExplosionAudio = m_ExplosionParticles.GetComponent<AudioSource>();

          m_ExplosionParticles.gameObject.SetActive(false);
      }


      private void OnEnable()
      {
          m_CurrentHealth = m_StartingHealth;
          m_Dead = false;

          SetHealthUI();
      }

      public void TakeDamage(float amount)
      {
          m_CurrentHealth -= amount;

          SetHealthUI ();

          if (m_CurrentHealth <= 0f && !m_Dead) {
            OnDeath ();
          }
      }


      private void SetHealthUI()
      {
          m_Slider.value = m_CurrentHealth;
          m_FillImage.color = Color.Lerp (m_ZeroHealthColor, m_FullHealthColor, m_CurrentHealth / m_StartingHealth);
      }


      private void OnDeath()
      {
          m_Dead = true;
          m_ExplosionParticles.transform.position = transform.position;
          m_ExplosionParticles.gameObject.SetActive (true);
          m_ExplosionParticles.Play ();
          m_ExplosionAudio.Play ();
          gameObject.SetActive (false);
      }
  }
#+END_SRC
* Shell Creation
- https://unity3d.com/learn/tutorials/projects/tanks-tutorial/shell-creation?playlist=20081

[[file:img/screenshot_2017-04-29_23-15-29.png]]

[[file:img/screenshot_2017-04-29_23-18-16.png]]

[[file:img/screenshot_2017-04-29_23-20-06.png]]

#+BEGIN_SRC csharp
  using UnityEngine;

  public class ShellExplosion : MonoBehaviour
  {
      public LayerMask m_TankMask;
      public ParticleSystem m_ExplosionParticles;
      public AudioSource m_ExplosionAudio;
      public float m_MaxDamage = 100f;
      public float m_ExplosionForce = 1000f;
      public float m_MaxLifeTime = 2f;
      public float m_ExplosionRadius = 5f;


      private void Start()
      {
          Destroy(gameObject, m_MaxLifeTime);
      }


      private void OnTriggerEnter(Collider other)
      {
          Collider[] colliders = Physics.OverlapSphere (transform.position, m_ExplosionRadius, m_TankMask);

          for (int i = 0; i < colliders.Length; i++)
          {
            Rigidbody targetRigidbody = colliders[i].GetComponent<Rigidbody> ();
            if (!targetRigidbody)
              continue;

            targetRigidbody.AddExplosionForce (m_ExplosionForce, transform.position, m_ExplosionRadius);
            TankHealth targetHealth = targetRigidbody.GetComponent<TankHealth> ();

            if (!targetHealth)
              continue;

            float damage = CalculateDamage (targetRigidbody.position);
            targetHealth.TakeDamage (damage);
          }

          // Unparent because the shell is gonna be destoryed
          m_ExplosionParticles.transform.parent = null;
          m_ExplosionParticles.Play();
          m_ExplosionAudio.Play();

          // Once the particles have finished, destroy the gameobject they are on.
          Destroy (m_ExplosionParticles.gameObject, m_ExplosionParticles.duration);
          // Destroy Shell
          Destroy (gameObject);
      }

      private float CalculateDamage(Vector3 targetPosition)
      {
          Vector3 explosionToTarget = targetPosition - transform.position;
          float explosionDistance = explosionToTarget.magnitude;
          float relativeDistance = (m_ExplosionRadius - explosionDistance) / m_ExplosionRadius;
          float damage = relativeDistance * m_MaxDamage;

          damage = Mathf.Max (0f, damage);
          return damage;
      }
  }
#+END_SRC

[[file:img/screenshot_2017-04-29_23-30-53.png]]

[[file:img/screenshot_2017-04-29_23-33-14.png]]
