#+TITLE: Rust

* Concepts
** Ownership
#+BEGIN_SRC rust
  let s1 = String::from("hello");
  let s2 = s1;

  println!("{}", s1);
#+END_SRC

#+BEGIN_EXAMPLE
  error[E0382]: use of moved value: `s1`
   --> src/main.rs:4:27
    |
  3 |     let s2 = s1;
    |         -- value moved here
  4 |     println!("{}, world!",s1);
    |                           ^^ value used here after move
    |
    = note: move occurs because `s1` has type `std::string::String`,
  which does not implement the `Copy` trait
#+END_EXAMPLE

[[file:_img/screenshot_2017-06-22_22-51-15.png]]

- Rust invalidates the first variable, instead of calling this a shallow copy, itâ€™s known as a *move*

#+BEGIN_SRC rust
  fn main() {
      let s1 = gives_ownership();         // gives_ownership moves its return
                                          // value into s1.

      let s2 = String::from("hello");     // s2 comes into scope.

      let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                          // takes_and_gives_back, which also
                                          // moves its return value into s3.
  } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
    // moved, so nothing happens. s1 goes out of scope and is dropped.

  fn gives_ownership() -> String {             // gives_ownership will move its
                                               // return value into the function
                                               // that calls it.

      let some_string = String::from("hello"); // some_string comes into scope.

      some_string                              // some_string is returned and
                                               // moves out to the calling
                                               // function.
  }

  // takes_and_gives_back will take a String and return one.
  fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                        // scope.

      a_string  // a_string is returned and moves out to the calling function.
  }
#+END_SRC

#+BEGIN_SRC rust
  fn main() {
      let s = String::from("hello");

      change(&s);
  }

  fn change(some_string: &String) {
      some_string.push_str(", world");
  }
#+END_SRC

#+BEGIN_EXAMPLE
  error: cannot borrow immutable borrowed content `*some_string` as mutable
   --> error.rs:8:5
    |
  8 |     some_string.push_str(", world");
    |     ^^^^^^^^^^^
#+END_EXAMPLE

#+BEGIN_SRC rust
  fn main() {
      let mut s = String::from("hello");

      change(&mut s);
  }

  fn change(some_string: &mut String) {
      some_string.push_str(", world");
  }
#+END_SRC

- Can only have one mutable reference to a particular piece of data in a particular scope. This code will fail:
#+BEGIN_SRC rust
  let mut s = String::from("hello");

  let r1 = &mut s;
  let r2 = &mut s;
#+END_SRC

#+BEGIN_EXAMPLE
  error[E0499]: cannot borrow `s` as mutable more than once at a time
   --> borrow_twice.rs:5:19
    |
  4 |     let r1 = &mut s;
    |                   - first mutable borrow occurs here
  5 |     let r2 = &mut s;
    |                   ^ second mutable borrow occurs here
  6 | }
    | - first borrow ends here
#+END_EXAMPLE
At any given time, *you can have either but not both of*:
- One mutable reference.
- Any number of immutable references.
- References must always be valid.

#+BEGIN_SRC rust
  fn main() {
      let mut s = String::from("hello world");

      let word = first_word(&s); // word will get the value 5.

      s.clear(); // This empties the String, making it equal to "".

      // word still has the value 5 here, but there's no more string that
      // we could meaningfully use the value 5 with. word is now totally invalid!
  }
#+END_SRC

#+BEGIN_SRC rust
  let s = String::from("hello");

  let len = s.len();

  let slice = &s[0..len];
  let slice = &s[..];
#+END_SRC

#+BEGIN_SRC rust
  fn first_word(s: &String) -> &str {
      let bytes = s.as_bytes();

      for (i, &item) in bytes.iter().enumerate() {
          if item == b' ' {
              return &s[0..i];
          }
      }

      &s[..]
  }
#+END_SRC

#+BEGIN_SRC rust
  fn main() {
      let mut s = String::from("hello world");

      let word = first_word(&s);

      s.clear(); // Error!
  }
#+END_SRC

#+BEGIN_EXAMPLE
  17:6 error: cannot borrow `s` as mutable because it is also borrowed as
              immutable [E0502]
      s.clear(); // Error!
      ^
  15:29 note: previous borrow of `s` occurs here; the immutable borrow prevents
              subsequent moves or mutable borrows of `s` until the borrow ends
      let word = first_word(&s);
                             ^
  18:2 note: previous borrow ends here
  fn main() {

  }
  ^
#+END_EXAMPLE

-  if we have an immutable reference to something, we cannot also take a mutable reference.

:REFERENCES:
- https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html
:END:
