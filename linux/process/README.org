#+TITLE: Linux Process Concepts

* Table of Contents :TOC_2_gh:
- [[#parent-and-child-process][Parent and Child Process]]
- [[#process-group-session-and-controlling-terminal][Process Group, Session and Controlling Terminal]]
  - [[#process-group][Process Group]]
  - [[#session][Session]]
- [[#zombie-and-orphan-process][Zombie and Orphan Process]]
- [[#double-fork][Double Fork]]
- [[#terminal][Terminal]]
  - [[#what-happens-when-you-press-ctrlc][What happens when you press ~Ctrl+C~]]
  - [[#pseudo-terminals][Pseudo Terminals]]

* Parent and Child Process
* Process Group, Session and Controlling Terminal
:REFERENCES:
- https://stackoverflow.com/questions/6548823/use-and-meaning-of-session-and-process-group-in-unix
- http://pubs.opengroup.org/onlinepubs/9699919799/
- http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html
:END:

** Process Group
:REFERENCES:
- https://unix.stackexchange.com/questions/363126/why-is-process-not-part-of-expected-process-group
- http://kirste.userpage.fu-berlin.de/chemnet/use/info/libc/libc_24.html
:END:

- A collection of processes that *permits the signaling of related processes*.
- A newly created process joins the process group of its creator.
- When shells like ~bash~ run a command, it forks and call ~setpgid()~ to allocate a new process group,
  and make it the foreground process group if the shell was in foreground.

** Session
- *A collection of process groups*
- When attached to a terminal,
  - The terminal is now called as a controlling terminal
  - The session now has the foreground process group, which associated and interacts with the terminal

*** setsid
:REFERENCES:
- https://linux.die.net/man/2/setsid
:END:

The calling process is 
- the leader of the new session
- the process group leader of the new process group
- has no controlling terminal.

* Zombie and Orphan Process
* Double Fork
* Terminal
** What happens when you press ~Ctrl+C~
** Pseudo Terminals
:REFERENCES:
- https://www.quora.com/What-is-the-purpose-of-a-pseudo-tty
:END:

As an example, ~ssh~ works as follows:
- ~ssh <host>~ ::
  connect to ~host~ and allocate a ~pty~ (pseudo terminal).
- ~ssh <host> <cmd>~ ::
  Just let ~host~ run ~<cmd>~, since it generally doesn't need to allocate ~pty~.
- ~ssh <host> tmux~ ::
  commands like ~tmux~ or ~screen~ need ~pty~ to work properly, but the default won't do this.
  In this case, specify ~-t~ to explicitly allocate ~pty~ for the command.
