#+TITLE: setuptools

* Table of Contents :TOC_2_gh:
- [[#which-tool-should-use][Which tool should use?]]
- [[#python-packaging-user-guide][Python Packaging User Guide]]
- [[#setuppy][setup.py]]
  - [[#install_requires-vs-requirementstxt][install_requires vs requirements.txt]]
  - [[#scripts-vs-console_scripts][scripts vs console_scripts]]
- [[#setuppy-minimal][setup.py (minimal)]]

* Which tool should use?
- http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2

#+BEGIN_QUOTE
So in conclusion, out of all these options, I would recommend Setuptools, unless your requirements are very basic and you only need Distutils. Setuptools works very well with Virtualenv and Pip, tools that I highly recommend. Virtualenv and Pip could both be considered official, as they're part of PyPA, and Python 3 now ships ensurepip (which helps you install pip on some systems).
#+END_QUOTE

* Python Packaging User Guide
- https://packaging.python.org/
- https://github.com/pypa/sampleproject

* setup.py
- https://packaging.python.org/distributing/#setup-args

#+BEGIN_SRC python
  from setuptools import setup, find_packages


  setup(
      name='sample',

      # Versions should comply with PEP440.  For a discussion on single-sourcing
      # the version across setup.py and the project code, see
      # https://packaging.python.org/en/latest/single_source_version.html
      version='1.2.0',

      description='A sample Python project',
      long_description=long_description,

      # The project's main homepage.
      url='https://github.com/pypa/sampleproject',

      # Author details
      author='The Python Packaging Authority',
      author_email='pypa-dev@googlegroups.com',

      # Choose your license
      license='MIT',

      # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
      classifiers=[
          # How mature is this project? Common values are
          'Development Status :: 3 - Alpha',

          # Indicate who your project is intended for
          'Intended Audience :: Developers',
          'Topic :: Software Development :: Build Tools',

          # Pick your license as you wish (should match "license" above)
          'License :: OSI Approved :: MIT License',

          # Specify the Python versions you support here. In particular, ensure
          # that you indicate whether you support Python 2, Python 3 or both.
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 2.6',
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3',
          'Programming Language :: Python :: 3.3',
          'Programming Language :: Python :: 3.4',
          'Programming Language :: Python :: 3.5',
      ],

      # What does your project relate to?
      keywords='sample setuptools development',

      # You can just specify the packages manually here if your project is
      # simple. Or you can use find_packages().
      packages=find_packages(exclude=['contrib', 'docs', 'tests']),

      # Alternatively, if you want to distribute just a my_module.py, uncomment
      # this:
      #   py_modules=["my_module"],

      # List run-time dependencies here.
      # These will be installed by pip when your project is installed.
      install_requires=['peppercorn'],

      # List additional groups of dependencies here (e.g. development
      # dependencies). You can install these using the following syntax,
      # for example:
      # $ pip install -e .[dev,test]
      extras_require={
          'dev': ['check-manifest'],
          'test': ['coverage'],
      },

      # If there are data files included in your packages that need to be
      # installed, specify them here.  If using Python 2.6 or less, then these
      # have to be included in MANIFEST.in as well.
      package_data={
          'sample': ['package_data.dat'],
      },

      # Although 'package_data' is the preferred approach, in some case you may
      # need to place data files outside of your packages. See:
      data_files=[('my_data', ['data/data_file'])],
      entry_points={
          'console_scripts': [
              'sample=sample.__main__:main',
          ],
      },
  )
#+END_SRC


** install_requires vs requirements.txt
- https://packaging.python.org/requirements/#requirements-files
- https://caremad.io/posts/2013/07/setup-vs-requirement/

~install_requires~ is mostly required when the project is a python library.
For just a python application, it seems okay to just have ~requirements.txt~.

[[file:_img/screenshot_2017-01-29_09-46-07.png]]

** scripts vs console_scripts
- http://python-packaging.readthedocs.io/en/latest/command-line-scripts.html
#+BEGIN_EXAMPLE
  funniest/
      funniest/
          __init__.py
          ...
      setup.py
      bin/
          funniest-joke
#+END_EXAMPLE

#+BEGIN_SRC python
  setup(
      ...
      scripts=['bin/funniest-joke'],
      ...
  )
#+END_SRC

#+BEGIN_EXAMPLE
  funniest/
      funniest/
          __init__.py
          command_line.py
          ...
      setup.py
      ...
#+END_EXAMPLE

#+BEGIN_SRC python
  setup(
      ...
      entry_points = {
          'console_scripts': ['funniest-joke=funniest.command_line:main'],
      }
      ...
  )
#+END_SRC
* setup.py (minimal)
#+BEGIN_SRC python
  from setuptools import setup

  setup(
      name='yourapplication',
      packages=['yourapplication'],
      include_package_data=True,
      install_requires=['flask'],
  )
#+END_SRC
