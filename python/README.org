#+TITLE: Python


* Table of Contents                                                :TOC_2_gh:
- [[#how-to][How-to]]
- [[#reference][Reference]]
  - [[#decorator][decorator]]
  - [[#dict][dict]]
  - [[#docstring][docstring]]
  - [[#exceptions][exceptions]]
  - [[#import][import]]
  - [[#itertools][itertools]]
  - [[#list][list]]
  - [[#logging][logging]]
  - [[#multiprocessing][multiprocessing]]
  - [[#re][re]]
  - [[#set][set]]
  - [[#str][str]]
  - [[#string][string]]
  - [[#subprocesses][subprocesses]]
- [[#topics][Topics]]
  - [[#__new__-vs-__init__][__new__ vs __init__]]
  - [[#comparison][Comparison]]
  - [[#double-underscores][Double underscores]]
  - [[#eafp-lbyl][EAFP, LBYL]]
  - [[#final-class][Final class]]
  - [[#meta-class][Meta Class]]
  - [[#descriptor][Descriptor]]
  - [[#__getattr__-vs-__getattribute__][__getattr__ vs. __getattribute__]]
  - [[#getattr-setattr-why-need-them][getattr, setattr, Why need them?]]
  - [[#source-code-encodings][Source Code Encodings]]
- [[#how-to-1][How-to]]
  - [[#read-a-file-except-the-first-line][Read a file except the first line]]
- [[#terminology][Terminology]]
- [[#staging][Staging]]
  - [[#2017-03-24-fri-python-defining-bound-method][<2017-03-24 Fri> Python, defining bound method]]
  - [[#2017-02-13-mon-isinstance-vs-issubclass][<2017-02-13 Mon> isinstance vs issubclass?]]
  - [[#2017-03-21-tue-generator-and-throw][<2017-03-21 Tue> generator and throw]]
  - [[#2017-05-18-thu-python-int-long-int64][<2017-05-18 Thu> python int, long, int64]]
  - [[#2017-06-09-fri-python-textwrap][<2017-06-09 Fri> python textwrap]]
  - [[#2017-07-11-tue-python27-re-raise-nonetype][<2017-07-11 Tue> python2.7 re-raise, NoneType]]

* How-to
* Reference
** decorator
*** class decorator
- https://www.python.org/dev/peps/pep-3129/

#+BEGIN_SRC python
  class A:
    pass
  A = foo(bar(A))

  @foo
  @bar
  class A:
    pass
#+END_SRC

** dict
- https://docs.python.org/2/library/stdtypes.html#mapping-types-dict

#+BEGIN_EXAMPLE
  dict()
  dict(mapping)
  dict(iterable)
  dict(**kwargs)

  len(d)
  d[key]
  d[key] = value
  del d[key]
  key in d
  key not in d
  iter(d)

  D.items()  D.iteritems()  D.viewitems()
  D.keys()   D.iterkeys()   D.viewkeys()
  D.values() D.itervalues() D.viewvalues()

  D.clear()
  D.copy()               a shallow copy of D
  D.fromkeys(S[,v])      new dict with keys from S and values equal to v(None).
  D.get(k[,d])           D[k] if k in D, else d(None)
  D.has_key(k)           True if D has a key k, else False
  D.pop(k[,d]) -> v      remove specified key and return the corresponding value.
                         d(KeyError) if key is not found
  D.popitem() -> (k, v)  remove and return a (key, value) KeyError if empty
  D.setdefault(k[,d])    D.get(k,d), also set D[k]=d if k not in D
  D.update([E, ]**F)
      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
      In either case, this is followed by: for k in F: D[k] = F[k]
#+END_EXAMPLE

*** items, iteritems, viewitems
- https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems

**** Py2
- ~items()~: returns a list of tuples(copied elements)
- ~iteritems()~: returns an iterator, can't iterate if ~dict~ changed *after iterator created*
- ~viewitems()~: returns a [[https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects][view object]], can't iterate if ~dict~ changed *during iteration*

#+BEGIN_SRC python
  >>> d = {'a': 0}
  >>> it = d.iteritems()
  >>> d['b'] = 1
  >>> next(it)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  RuntimeError: dictionary changed size during iteration
  >>> view = d.viewitems()
  >>> d['c'] = 2
  >>> it = iter(view)
  >>> next(it)
  ('a', 0)
  >>> d['d'] = 3
  >>> next(it)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  RuntimeError: dictionary changed size during iteration
#+END_SRC

**** Py3
- ~dict.items()~ == ~dict.viewitems()~ of Py2

** docstring
- https://www.python.org/dev/peps/pep-0257/
- http://epydoc.sourceforge.net/manual-docstring.html
- [[sphinx.org][Sphinx]] reStructuredText based .
- [[docstring-google.py][Google]] and [[docstring-numpy.py][Numpy]] Styles

Specific syntax for variable docstring:
#+BEGIN_SRC python
  #: docstring for x
  x = 22
  x = 22  #: docstring for x
#+END_SRC

** exceptions
- https://docs.python.org/2/library/exceptions.html
- https://docs.python.org/2/faq/design.html#how-fast-are-exceptions
- ~else:~ must be placed after ~except:~, which block will be executed if no exception raised
- ~finally:~ will always be executed whether any exception raised or not

*** How fast are exceptions?
- A ~try~ / ~except~ block is extremely efficient if no exceptions are raised
- Actually catching an exception is expensive.
- Following code only makes sense when you expected the ~dict~ to have the ~key~ almost all the time.
#+BEGIN_SRC python
  try:
      value = mydict[key]
  except KeyError:
      mydict[key] = getvalue(key)
      value = mydict[key]
#+END_SRC

*** Casts to string
If ~str()~ or ~unicode()~ is called on an instance of this class(~BaseException~),
*the representation of the argument(s) to the instance are returned*,
or the empty string when there were no arguments.

~BaseException.args~: The tuple of arguments given to the exception constructor.

*** Built-in Exceptions
- https://docs.python.org/2/library/exceptions.html

#+BEGIN_EXAMPLE
  BaseException
   +-- SystemExit
   +-- KeyboardInterrupt
   +-- GeneratorExit
   +-- Exception
        +-- StopIteration
        +-- StandardError
        |    +-- BufferError
        |    +-- ArithmeticError
        |    |    +-- FloatingPointError
        |    |    +-- OverflowError
        |    |    +-- ZeroDivisionError
        |    +-- AssertionError
        |    +-- AttributeError
        |    +-- EnvironmentError
        |    |    +-- IOError
        |    |    +-- OSError
        |    |         +-- WindowsError (Windows)
        |    |         +-- VMSError (VMS)
        |    +-- EOFError
        |    +-- ImportError
        |    +-- LookupError
        |    |    +-- IndexError
        |    |    +-- KeyError
        |    +-- MemoryError
        |    +-- NameError
        |    |    +-- UnboundLocalError
        |    +-- ReferenceError
        |    +-- RuntimeError
        |    |    +-- NotImplementedError
        |    +-- SyntaxError
        |    |    +-- IndentationError
        |    |         +-- TabError
        |    +-- SystemError
        |    +-- TypeError
        |    +-- ValueError
        |         +-- UnicodeError
        |              +-- UnicodeDecodeError
        |              +-- UnicodeEncodeError
        |              +-- UnicodeTranslateError
        +-- Warning
             +-- DeprecationWarning
             +-- PendingDeprecationWarning
             +-- RuntimeWarning
             +-- SyntaxWarning
             +-- UserWarning
             +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning
#+END_EXAMPLE

**** SystemExit
- https://docs.python.org/2/library/exceptions.html#exceptions.SystemExit

#+BEGIN_SRC python
  raise SystemExit()       # exit status: 0
  raise SystemExit(99)     # exit status: 99
  raise SystemExit('foo')  # print 'foo', exit status: 1
#+END_SRC

*** raise MyException vs raise MyException()
- http://stackoverflow.com/questions/16706956/is-there-a-difference-between-raise-exception-and-raise-exception-without
- The short answer is that both ~raise MyException~ and ~raise MyException()~ do the same thing.
- This first form auto instantiates your exception.
- So, use ~raise MyException~ when there are no arguments.

*** Catching multiple exceptions
Because ~except TypeError,e~ is equivalent to ~exception TypeError as e~, you must use ~tuple~ to catch multiple exceptions
like ~except (TypeError, ValueError) as e~

** import
*** Absolute import vs implicit, explicit relative import
- https://www.python.org/dev/peps/pep-0328/
- https://stackoverflow.com/questions/4209641/absolute-vs-explicit-relative-import-of-python-module
- ~from __future__ import absolute_import~ for ~py2~
- Default in ~py3~

#+BEGIN_EXAMPLE
  foo
    |--__init__.py
    |--bar.py
    |--baz.py
  bar.py
  baz.py
#+END_EXAMPLE

- In ~implicit relative import~, which is legacy and not recommended, the semantic of ~import bar~ is different among where it used.
  - In ~baz.py~ it will imports ~bar.py~,
  - In ~foo/baz.py~ it will imports ~foo/bar.py~

This would cause subtle bugs. At this point, we need ~absolute_import~

#+BEGIN_SRC python
  from __future__ import absolute_import
  import bar
#+END_SRC
With this code, ~import bar~ always imports ~bar.py~, not things like ~foo/bar.py~.
To import ~foo/bar.py~, there are two ways. One is absoulte import and the other is explicit relative import.

#+BEGIN_SRC python
  from __future__ import absolute_import

  # Absolute import
  import foo.bar

  # Explicit relative import
  # This is valid only when this file is in 'foo' package
  # This way is discouraged; PEP8 prefers absolute imports
  import .bar
#+END_SRC

*** Import in function
- https://stackoverflow.com/questions/128478/should-python-import-statements-always-be-at-the-top-of-a-module
- https://stackoverflow.com/questions/11990556/python-how-to-make-global-imports-from-a-function
- ~import~ will cache the module. So ~import in function~ won't cause reload and severe overhead.
- But ~import in function~ would still have addtional overhead for checking and resolving the cache, etc.
- So, use ~import in function~ only for optional library support or resolving circular dependency problem.
- ~import~ statement is just loading a module and giving a name for it. So we can perform a module level import within a function:

#+BEGIN_SRC python
  def foo():
      global math
      import math
#+END_SRC

*** Sorting imports
- https://pypi.python.org/pypi/isort
- https://stackoverflow.com/questions/20762662/whats-the-correct-way-to-sort-python-import-x-and-from-x-import-y-statement

** itertools
- https://docs.python.org/2/library/itertools.html

#+BEGIN_SRC python
  # Generates a break or new group every time the value of the key function changes
  [k for k, g in groupby('AAAABBBCCDAABBB')]   # --> A B C D A B
  [list(g) for k, g in groupby('AAAABBBCCD')]  # --> AAAA BBB CC D
#+END_SRC

** list
- https://docs.python.org/2/library/stdtypes.html#mutable-sequence-types
- https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange

#+BEGIN_EXAMPLE
  x in s
  x not in s
  s + t         the concatenation of s and t
  s * n, n * s  equivalent to adding s to itself n times
  s[i]
  s[i:j]
  s[i:j:k]
  s[i] = x
  s[i:j] = t    slice of s from i to j is replaced by the contents of the iterable t
  del s[i:j]    same as s[i:j] = []
  s[i:j:k] = t  the elements of s[i:j:k] are replaced by those of t
  del s[i:j:k]  removes the elements of s[i:j:k] from the list
  s *= n        updates s with its contents repeated n times
  len(s)
  min(s)
  max(s)

  L.append(object)
  L.count(value) -> integer
  L.extend(iterable)
  L.index(value, [start, [stop]]) -> integer  return first index of value; ValueError on failure
  L.insert(index, object)                     insert object before index
  L.pop([index]) -> item                      remove and return item at index (default last); IndexError on failure
  L.remove(value)                             remove first occurrence of value; ValueError on failure
  L.reverse()                                 reverse *IN PLACE*
  L.sort(cmp=None, key=None, reverse=False)   stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1
#+END_EXAMPLE

** logging
- https://docs.python.org/2/library/logging.html
- https://docs.python.org/2/howto/logging.html#logging-basic-tutorial
- https://docs.python.org/2/howto/logging-cookbook.html#logging-cookbook

[[file:img/screenshot_2017-06-30_22-28-31.png]]
** multiprocessing
- https://docs.python.org/2/library/multiprocessing.html

#+BEGIN_SRC python :results output
  from multiprocessing import Pool
  import time

  def f(id_):
      for _ in range(2):
          print id_
          time.sleep(1)


  # pool must be created AFTER defining functions to apply
  pool = Pool(processes=3)

  for i in range(4):
      pool.apply_async(f, (i,))

  pool.close()  # Prevents any more tasks from being submitted to the pool
  pool.join()
#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 1
: 0
: 2
: 3
: 3

** re
- https://docs.python.org/2/library/re.html
#+BEGIN_EXAMPLE
  The special characters are:
      "."      Matches any character except a newline.
      "^"      Matches the start of the string.
      "$"      Matches the end of the string or just before the newline at
                the end of the string.
      "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
                Greedy means that it will match as many repetitions as possible.
      "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
      "?"      Matches 0 or 1 (greedy) of the preceding RE.
      ,*?,+?,?? Non-greedy versions of the previous three special characters.
      {m,n}    Matches from m to n repetitions of the preceding RE.
      {m,n}?   Non-greedy version of the above.
      "\\"     Either escapes special characters or signals a special sequence.
      []       Indicates a set of characters.
                A "^" as the first character indicates a complementing set.
      "|"      A|B, creates an RE that will match either A or B.
      (...)    Matches the RE inside the parentheses.
                The contents can be retrieved or matched later in the string.
      (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
      (?:...)  Non-grouping version of regular parentheses.
      (?P<name>...) The substring matched by the group is accessible by name.
      (?P=name)     Matches the text matched earlier by the group named name.
      (?#...)  A comment; ignored.
      (?=...)  Matches if ... matches next, but doesn't consume the string.
      (?!...)  Matches if ... doesn't match next.
      (?<=...) Matches if preceded by ... (must be fixed length).
      (?<!...) Matches if not preceded by ... (must be fixed length).
      (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                          the (optional) no pattern otherwise.

  The special sequences consist of "\\" and a character from the list
  below.  If the ordinary character is not on the list, then the
  resulting RE will match the second character.
      \number  Matches the contents of the group of the same number.
      \A       Matches only at the start of the string.
      \Z       Matches only at the end of the string.
      \b       Matches the empty string, but only at the start or end of a word.
      \B       Matches the empty string, but not at the start or end of a word.
      \d       Matches any decimal digit; equivalent to the set [0-9].
      \D       Matches any non-digit character; equivalent to the set [^0-9].
      \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v].
      \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\f\v].
      \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
                With LOCALE, it will match the set [0-9_] plus characters defined
                as letters for the current locale.
      \W       Matches the complement of \w.
      \\       Matches a literal backslash.

  This module exports the following functions:
      match    Match a regular expression pattern to the beginning of a string.
      search   Search a string for the presence of a pattern.
      sub      Substitute occurrences of a pattern found in a string.
      subn     Same as sub, but also return the number of substitutions made.
      split    Split a string by the occurrences of a pattern.
      findall  Find all occurrences of a pattern in a string.
      finditer Return an iterator yielding a match object for each match.
      compile  Compile a pattern into a RegexObject.
      purge    Clear the regular expression cache.
      escape   Backslash all non-alphanumerics in a string.

  Some of the functions in this module takes flags as optional parameters:
      I  IGNORECASE  Perform case-insensitive matching.
      L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
      M  MULTILINE   "^" matches the beginning of lines (after a newline)
                      as well as the string.
                      "$" matches the end of lines (before a newline) as well
                      as the end of the string.
      S  DOTALL      "." matches any character at all, including the newline.
      X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
      U  UNICODE     Make \w, \W, \b, \B, dependent on the Unicode locale.
#+END_EXAMPLE

** set
- https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset

#+BEGIN_EXAMPLE
  x in set
  x not in set
  set.isdisjoint(other)
  set <= other           set.issubset(other)
  set < other            set <= other and set != other
  set >= other           set.issuperset(other)
  set > other            set >= other and set != other
  set | other | ...      set.union(*others)
  set & other & ...      set.intersection(*others)
  set - other - ...      set.difference(*others)
  set ^ other            set.symmetric_difference(other)
                         (either the set or other but not both)
  set.copy()             (a shallow copy of s)

  # only for set, not frozenset
  set |= other | ...     set.update(*others)
  set &= other & ...     set.intersection_update(*others)
  set -= other | ...     set.difference_update(*others)
  set ^= other           set.symmetric_difference_update(other)
  set.add(elem)
  set.remove(elem)       (remove elem. KeyError if elem doesn't exist)
  set.discard(elem)      (remove elem if it is present)
  set.pop()              (remove and return an arbitrary elem. KeyError if empty)
  clear()
#+END_EXAMPLE

#+BEGIN_QUOTE
non-operator versions of union(), intersection(), difference(), and symmetric_difference(), issubset(), and issuperset()
methods *will accept any iterable* as an argument.
In contrast, their *operator based counterparts require their arguments to be sets*.
#+END_QUOTE

#+BEGIN_QUOTE
~set('abc') == frozenset('abc')~ returns ~True~ and so does ~set('abc') in set([frozenset('abc')])~.
#+END_QUOTE

** str
** string
- https://docs.python.org/2/library/stdtypes.html#string-methods

#+BEGIN_EXAMPLE
  S.capitalize() -> string
  S.center(width[, fillchar]) -> string             fillchar=' '
  S.count(sub[, start[, end]]) -> int
  S.decode([encoding[,errors]]) -> object
  S.encode([encoding[,errors]]) -> object
  S.endswith(suffix[, start[, end]]) -> bool        suffix can also be a tuple of strings
  S.expandtabs([tabsize]) -> string                 tabsize=8
  S.find(sub [,start [,end]]) -> int                return -1 on failure
  S.format(*args, **kwargs) -> string
  S.index(sub [,start [,end]]) -> int               raise ValueError on failure
  S.isalnum() -> bool
  S.isalpha() -> bool
  S.isdigit() -> bool
  S.islower() -> bool
  S.isspace() -> bool
  S.istitle() -> bool
  S.isupper() -> bool
  S.join(iterable) -> string
  S.ljust(width[, fillchar]) -> string              fillchar=' '
  S.lower() -> string
  S.lstrip([chars]) -> string or unicode            like S.strip()
  S.partition(sep) -> (head, sep, tail)             If sep is not found, return (S, '', '')
  S.replace(old, new[, count]) -> string
  S.rfind(sub [,start [,end]]) -> int               like S.find()
  S.rindex(sub [,start [,end]]) -> int              like S.index()
  S.rjust(width[, fillchar]) -> string              fillchar=' '
  S.rpartition(sep) -> (head, sep, tail)            like S.partition()
  S.rsplit([sep [,maxsplit]]) -> list of strings    sep=' '
  S.rstrip([chars]) -> string or unicode            like S.strip()
  S.split([sep [,maxsplit]]) -> list of strings     like S.rsplit()
  S.splitlines(keepends=False) -> list of strings
  S.startswith(prefix[, start[, end]]) -> bool      like S.endswith()
  S.strip([chars]) -> string or unicode             remove leading whitespace(or chars)
  S.swapcase() -> string
  S.title() -> string
  S.translate(table [,deletechars]) -> string
  S.upper() -> string                               see also string.maketrans()
  S.zfill(width) -> string                          zero padding for numeric string
#+END_EXAMPLE

*** format
- https://pyformat.info/

#+BEGIN_SRC python
  >>> '%s %s' % ('one', 'two')
  >>> '{} {}'.format('one', 'two')    # one two
  >>> '%d %d' % (1, 2)
  >>> '{} {}'.format(1, 2)            # 1 2
  >>> '{1} {0}'.format('one', 'two')  # two one


  class Data(object):
      def __str__(self):
          return 'str'
      def __repr__(self):
          return 'repr'
  >>> '%s %r' % (Data(), Data())
  >>> '{0!s} {0!r}'.format(Data())  # str repr

  class Data(object):
      def __repr__(self):
          return 'räpr'
  # '%a', '{0!a}' for ascii()
  >>> '%r %a' % (Data(), Data())
  >>> '{0!r} {0!a}'.format(Data())  # räpr r\xe4pr


  >>> '%10s' % ('test',)
  >>> '{:>10}'.format('test')   # test
  >>> '%-10s' % ('test',)
  >>> '{:10}'.format('test')    # test      $
  >>> '{:_<10}'.format('test')  # test______
  >>> '{:^10}'.format('test')   # test   $
  >>> '{:^6}'.format('zip')     # zip  $  (extra character on the right)


  >>> '%.5s' % ('xylophone',)
  >>> '{:.5}'.format('xylophone')    # xylop
  >>> '%-10.5s' % ('xylophone',)
  >>> '{:10.5}'.format('xylophone')  # xylop     $


  >>> '%d' % (42,)
  >>> '{:d}'.format(42)        # 42
  >>> '%4d' % (42,)
  >>> '{:4d}'.format(42)       #   42
  >>> '%04d' % (42,)
  >>> '{:04d}'.format(42)      # 0042
  >>> '%+d' % (42,)
  >>> '{:+d}'.format(42)       # +42
  >>> '% d' % ((- 23),)
  >>> '{: d}'.format((- 23))   # -23
  >>> '% d' % (42,)
  >>> '{: d}'.format(42)       #  42
  >>> '{:=5d}'.format((- 23))  # -  23
  >>> '{:=+5d}'.format(23)     # +  23


  >>> '%f' % (3.141592653589793,)
  >>> '{:f}'.format(3.141592653589793)      # 3.141593
  >>> '%06.2f' % (3.141592653589793,)
  >>> '{:06.2f}'.format(3.141592653589793)  # 003.14


  data = {'first': 'Hodor', 'last': 'Hodor!'}
  >>> '%(first)s %(last)s' % data
  >>> '{first} {last}'.format(**data)  # Hodor Hodor!
  >>> '{first} {last}'.format(first='Hodor', last='Hodor!')  # Hodor Hodor!

  person = {'first': 'Jean-Luc', 'last': 'Picard'}
  >>> '{p[first]} {p[last]}'.format(p=person)  # Jean-Luc Picard

  data = [4, 8, 15, 16, 23, 42]
  >>> '{d[4]} {d[5]}'.format(d=data)  # 23 42

  class Plant(object):
      type = 'tree'
  >>> '{p.type}'.format(p=Plant())  # tree

  class Plant(object):
      type = 'tree'
      kinds = [{'name': 'oak'}, {'name': 'maple'}]
  >>> '{p.type}: {p.kinds[0][name]}'.format(p=Plant())  # tree: oak

  from datetime import datetime
  >>> '{:%Y-%m-%d %H:%M}'.format(datetime(2001, 2, 3, 4, 5))  # 2001-02-03 04:05


  >>> '{:{align}{width}}'.format('test', align='^', width='10')      # test   $
  >>> '%.*s = %.*f' % (3, 'Gibberish', 3, 2.7182)
  >>> '{:.{prec}} = {:.{prec}f}'.format('Gibberish', 2.7182, prec=3) # Gib = 2.718
  >>> '%*.*f' % (5, 2, 2.7182)
  >>> '{:{width}.{prec}f}'.format(2.7182, width=5, prec=2)           # 2.72
  >>> '{:{prec}} = {:{prec}}'.format('Gibberish', 2.7182, prec='.3') # Gib = 2.72

  from datetime import datetime
  dt = datetime(2001, 2, 3, 4, 5)
  >>> '{:{dfmt} {tfmt}}'.format(dt, dfmt='%Y-%m-%d', tfmt='%H:%M')   # 2001-02-03 04:05

  >>> '{:{}{}{}.{}}'.format(2.7182818284, '>', '+', 10, 3)           # +2.72
  >>> '{:{}{sign}{}.{}}'.format(2.7182818284, '>', 10, 3, sign='+')  # +2.72


  class HAL9000(object):
      def __format__(self, format):
          if (format == 'open-the-pod-bay-doors'):
              return "I'm afraid I can't do that."
          return 'HAL 9000'
  >>> '{:open-the-pod-bay-doors}'.format(HAL9000())  # I'm afraid I can't do that.
#+END_SRC

** subprocesses
- https://docs.python.org/2/library/subprocess.html

*** Calling an external command in Python
- http://stackoverflow.com/questions/89228/calling-an-external-command-in-python
- https://docs.python.org/2/library/subprocess.html#subprocess.call

#+BEGIN_SRC python
  # Simply exectus shell commands
  os.system("some_command < input_file | another_command > output_file")

  # Deprecated.  Use subprocess
  stream = os.popen("some_command with args")

  # Better, but a little bit complicated
  print subprocess.Popen("echo Hello World",
                         shell=True,
                         stdout=subprocess.PIPE).stdout.read()

  # Same as above, but simply waits until the command completes.
  # Just gives you the return code.
  >>> subprocess.call('exit 1', shell=True)
  1

  # raises an exception on non-zero exit code
  >>> subprocess.check_call('exit 1', shell=True)
  ...
  subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1  output = subpro

  # Gives the output as a string, raises an exception on no-zero exit code
  >>> subprocess.check_output(['echo', 'hi'])
  'hi\n'

#+END_SRC

*** Use PIPE along with communicate()
- http://stackoverflow.com/questions/16768290/understanding-popen-communicate
- Accessing piped streams directly may cause a deadlock because of stream buffering.

#+BEGIN_QUOTE
Warning This will deadlock when using stdout=PIPE and/or stderr=PIPE and
the child process generates enough output to a pipe such that
it blocks waiting for the OS pipe buffer to accept more data. Use communicate() to avoid that.

Use communicate() rather than .stdin.write, .stdout.read or .stderr.read
to avoid deadlocks due to any of the other OS pipe buffersfilling up and blocking the child process.
#+END_QUOTE

*** When to use shell=True
- http://stackoverflow.com/questions/30830642/when-to-use-shell-true-for-python-subprocess-module

- with ~shell=False~, the first argument should be *a list*.
- with ~shell=True~, the first argument should be *a string*.
  - The string for the first argument is like the command you put into the shell prompt.
  - The command can use environment variables, globs, pipes.
  - It's very dangerous, not recommended.

* Topics
** __new__ vs __init__
- https://docs.python.org/2/reference/datamodel.html#basic-customization
- https://stackoverflow.com/questions/674304/pythons-use-of-new-and-init
- ~__init__~ is called after the instance has been created (by ~__new__~), but before it is returned to the caller.
- In general, you shouldn't need to override ~__new__~ unless you're subclassing an immutable type like ~str~, ~int~, ~unicode~ or ~tuple~.

** Comparison
- https://docs.python.org/2/library/stdtypes.html#comparisons
- http://michael-yxf.appspot.com/?p=251002

#+BEGIN_SRC python
  >>> a = ['0', 9999, {}, [], False, ()]
  >>> a.sort()
  >>> a
  [False, 9999, {}, [], '0', ()]
#+END_SRC

#+BEGIN_QUOTE
CPython implementation detail: Objects of different types except numbers are ordered by their type names;
objects of the same types that don't support proper comparison are ordered by their address.
#+END_QUOTE

** Double underscores
- https://docs.python.org/2/reference/datamodel.html
- https://docs.python.org/2/library/stdtypes.html#special-attributes
- Also called ~dunder~, ~special methods~, ~magic methods~
- [[https://www.python.org/dev/peps/pep-0008/#id36][PEP8]] guides to never use these style names for custom uses.

#+BEGIN_SRC python
  # Callables
  callable.__doc__
  callable.__name__
  callable.__module__
  callable.__defaults__
  callable.__code__
  callable.__globals__
  callable.__dict__
  callable.__closure__

  # Basic
  object.__new__(cls[, ...])
  object.__init__(self[, ...])
  object.__del__(self)
  object.__repr__(self)
  object.__str__(self)
  object.__lt__(self, other)
  object.__le__(self, other)
  object.__eq__(self, other)
  object.__ne__(self, other)
  object.__gt__(self, other)
  object.__ge__(self, other)
  object.__cmp__(self, other)
  object.__rcmp__(self, other)
  object.__hash__(self)
  object.__nonzero__(self)
  object.__unicode__(self)

  # Attribute access
  object.__getattr__(self, name)
  object.__setattr__(self, name, value)
  object.__delattr__(self, name)¶
  object.__getattribute__(self, name)

  # Descriptors
  object.__get__(self, instance, owner)
  object.__set__(self, instance, value)
  object.__delete__(self, instance)

  # Class
  __slots__
  __metaclass__
  class.__instancecheck__(self, instance)
  class.__subclasscheck__(self, subclass)

  # Callable
  object.__call__(self[, args...])

  # Container
  object.__len__(self)
  object.__getitem__(self, key)
  object.__missing__(self, key)
  object.__setitem__(self, key, value)
  object.__delitem__(self, key)
  object.__iter__(self)
  object.__reversed__(self)
  object.__contains__(self, item)

  # Sequence
  object.__getslice__(self, i, j)
  object.__setslice__(self, i, j, sequence)
  object.__delslice__(self, i, j)

  # Numeric
  object.__add__(self, other)
  object.__sub__(self, other)
  object.__mul__(self, other)
  object.__floordiv__(self, other)
  object.__mod__(self, other)
  object.__divmod__(self, other)
  object.__pow__(self, other[, modulo])
  object.__lshift__(self, other)
  object.__rshift__(self, other)
  object.__and__(self, other)
  object.__xor__(self, other)
  object.__or__(self, other)
  object.__div__(self, other)
  object.__truediv__(self, other)

  # Numeric, swapped operands
  # For instance, to evaluate the expression x - y,
  # where y is an instance of a class that has an __rsub__() method,
  # y.__rsub__(x) is called if x.__sub__(y) returns NotImplemented.
  object.__radd__(self, other)
  object.__rsub__(self, other)
  object.__rmul__(self, other)
  object.__rdiv__(self, other)
  object.__rtruediv__(self, other)
  object.__rfloordiv__(self, other)
  object.__rmod__(self, other)
  object.__rdivmod__(self, other)
  object.__rpow__(self, other)
  object.__rlshift__(self, other)
  object.__rrshift__(self, other)
  object.__rand__(self, other)
  object.__rxor__(self, other)
  object.__ror__(self, other)

  # Numeric, inplace (like +=)
  object.__iadd__(self, other)
  object.__isub__(self, other)
  object.__imul__(self, other)
  object.__idiv__(self, other)
  object.__itruediv__(self, other)
  object.__ifloordiv__(self, other)
  object.__imod__(self, other)
  object.__ipow__(self, other[, modulo])
  object.__ilshift__(self, other)
  object.__irshift__(self, other)
  object.__iand__(self, other)
  object.__ixor__(self, other)
  object.__ior__(self, other)
  object.__neg__(self)
  object.__pos__(self)
  object.__abs__(self)
  object.__invert__(self)
  object.__complex__(self)
  object.__int__(self)
  object.__long__(self)
  object.__float__(self)
  object.__oct__(self)
  object.__hex__(self)
  object.__index__(self)
  object.__coerce__(self, other)

  # with statement
  object.__enter__(self)
  object.__exit__(self, exc_type, exc_value, traceback)
#+END_SRC

- Others search within python library directorin
- ~egrep -oh '__[A-Za-z_][A-Za-z_0-9]*__' *.py | sort | uniq~

#+BEGIN_SRC python
  __all__
  __args__
  __author__
  __bases__
  __builtin__
  __builtins__
  __cached__
  __class__
  __copy__
  __credits__
  __date__
  __decimal_context__
  __deepcopy__
  __exception__
  __file__
  __flags__
  __getinitargs__
  __getstate__
  __import__
  __importer__
  __ispkg__
  __loader__
  __main__
  __mro__
  __package__
  __path__
  __pkgdir__
  __return__
  __safe_for_unpickling__
  __setstate__
  __temp__
  __test__
  __version__
#+END_SRC

** EAFP, LBYL
- https://docs.python.org/3/glossary.html#term-eafp
- https://docs.python.org/3/glossary.html#term-lbyl

#+BEGIN_SRC python
  # EAFP (Easier to ask for forgiveness than permission)
  try:
      return mapping[key]
  except KeyError:
      pass


  # LBYL (Look Before you leap)
  if key in mapping:
      return mapping[key]
#+END_SRC

#+BEGIN_QUOTE
*LBYL* can fail if another thread removes the key after the test, but before the lookup.
This issue can be solved with locks or by using the *EAFP* approach.
#+END_QUOTE

** Final class
- http://stackoverflow.com/questions/2825364/final-classes-in-python-3-x-something-guido-isnt-telling-me

#+BEGIN_SRC python
  class Final(type):
      def __new__(cls, name, bases, classdict):
          for b in bases:
              if isinstance(b, Final):
                  raise TypeError("type '{0}' is not an acceptable base type"
                                  .format(b.__name__))
          return type.__new__(cls, name, bases, classdict)


  class C(object):
      __metaclass__ = Final
#+END_SRC

** Meta Class
- https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/
- http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example
- https://stackoverflow.com/questions/6966772/using-the-call-method-of-a-metaclass-instead-of-new
- https://docs.python.org/2/library/functions.html#type
- Subclasses inherit the metaclass

#+BEGIN_SRC python :results output
  class Meta(type):
      def __new__(meta, name, bases, class_dict):
          print 'Meta.__new__'
          print 1, meta
          print 2, name
          print 3, bases
          print 4, class_dict
          return type.__new__(meta, name, bases, class_dict)

      def __init__(cls, name, bases, class_dict):
          print 'Meta.__init__'

      def __call__(cls, *args, **kwargs):
          print 'Meta.__call__'
          return type.__call__(cls, *args, **kwargs)


  print 'Before class Foo'


  class Foo(object):
      __metaclass__ = Meta

      print 'Defining class Foo (1)'

      def __new__(cls):
          print 'Foo.__new__'
          return super(Foo, cls).__new__(cls)

      print 'Defining class Foo (2)'

      def __init__(self):
          print 'Foo.__init__'

      print 'Defining class Foo (3)'

  print 'After class Foo'

  print '--------------------------------------------------------------------------------'

  print 'Before instance foo'
  foo = Foo()
  print 'After instance foo'
#+END_SRC

#+BEGIN_EXAMPLE
  Before class Foo
  Defining class Foo (1)
  Defining class Foo (2)
  Defining class Foo (3)
  Meta.__new__
  1 <class '__main__.Meta'>
  2 Foo
  3 (<type 'object'>,)
  4 {'__module__': '__main__', '__metaclass__': <class '__main__.Meta'>, '__new__': <function __new__ at 0x7f697432a050>, '__init__': <function __init__ at 0x7f697432a0c8>}
  Meta.__init__
  After class Foo
  --------------------------------------------------------------------------------
  Before instance foo
  Meta.__call__
  Foo.__new__
  Foo.__init__
  After instance foo
#+END_EXAMPLE

#+BEGIN_SRC python
  # 'type' is implemented like following:
  class type:
      def __call__(cls, *args, **kwarg):

          # A few things could possibly be done to cls here... maybe... or maybe not...
          # then we call cls.__new__() to get a new object
          obj = cls.__new__(cls, *args, **kwargs)

          # A few things done to obj here... maybe... or not...
          # then we call obj.__init__()
          obj.__init__(*args, **kwargs)

          # maybe a few more things done to obj here
          # then we return obj
          return obj
#+END_SRC

[[file:img/screenshot_2017-06-30_22-02-51.png]]

[[file:img/screenshot_2017-06-30_22-02-40.png]]

** Descriptor
- https://docs.python.org/2/howto/descriptor.html

#+BEGIN_SRC python
  descr.__get__(self, obj, type=None) -> value
  descr.__set__(self, obj, value) -> None
  descr.__delete__(self, obj) -> None
#+END_SRC

#+BEGIN_SRC python
  from weakref import WeakKeyDictionary

  class Grade(object):
      def __init__(self):
          self._values = WeakKeyDictionary()

      def __get__(self, instance, instance_type):
          if instance is None:
              return self
          else:
              return self._values.get(instance, 0)

      def __set__(self, instance, value):
          # Do something special
          self._values[instance] = value
#+END_SRC

#+BEGIN_SRC python
  class Exam(object):
      a = Grade()
      b = Grade()
#+END_SRC

- Descriptors are invoked by the ~__getattribute__()~ method
- Overriding ~__getattribute__()~ prevents automatic descriptor calls
- ~__getattribute__()~ is only available with new style classes and objects
- ~object.__getattribute__()~ and ~type.__getattribute__()~ make different calls to ~__get__()~.

*** Data descriptors vs. non-data descriptors
- https://stackoverflow.com/questions/13007179/python-data-and-non-data-descriptors
- Data descriptor: defines both ~__get__()~ and ~__set__()~
- Non-data descriptor: defines only ~__get__()~
- Data descriptors always override instance dictionaries.
- Non-data descriptors may be overridden by instance dictionaries.
- Following example shows that data descriptor(~@property~) takes precedence over non-data descriptor(~Descriptor~)

#+BEGIN_SRC python
  >>> class Descriptor(object):
  ...     def __init__(self, name):
  ...         self.name = name
  ...     def __get__(self, instance, cls):
  ...         print 'Getting %s, with instance %r, class %r' % (self.name, instance, cls)
  ...
  >>> class Foo(object):
  ...     _spam = 'eggs'
  ...     @property
  ...     def spam(self):
  ...         return self._spam
  ...     @spam.setter
  ...     def spam(self, val):
  ...         self._spam = val
  ...
  >>> Foo().spam
  'eggs'
  >>> foo = Foo()
  >>> foo.__dict__['spam'] = Descriptor('Override')
  >>> foo.spam
  'eggs'
#+END_SRC

** __getattr__ vs. __getattribute__
- https://stackoverflow.com/questions/3278077/difference-between-getattr-vs-getattribute

#+BEGIN_SRC python
  class Foo(object):
      def __getattr__(self, name):
          print '__getattr_: %s' % name
  foo = Foo()
  foo.bar
  foo.bar = 0
  foo.bar  # __getattr__ won't be invoked, because 'foo.bar' is now existing

  # Output:
  # __getattr_: bar
#+END_SRC

#+BEGIN_SRC python
  class Foo(object):
      def __getattribute__(self, name):
          print '__getattribute_: %s' % name
  foo = Foo()
  foo.bar
  foo.bar = 0
  foo.bar  # __getattribute__ will always be invoked, whether 'foo.bar' is existing or not.

  # Output:
  # __getattribute_: bar
  # __getattribute_: bar
#+END_SRC

- Always ~__getattribute__~ is called first
- ~Descriptor~ handling is done in the default ~__getattribute__~ implementation
- ~__getattr__~ is good for fallback implementation for missing attributes.

** getattr, setattr, Why need them?
- https://stackoverflow.com/questions/19123707/why-use-setattr-and-getattr-built-ins

#+BEGIN_SRC python
  somevar = 'foo'
  getattr(x, somevar)
  getattr(x, somevar, 0)  # also can specify default value
#+END_SRC

** Source Code Encodings
- [[https://www.python.org/dev/peps/pep-0263/][PEP 263]]

#+BEGIN_SRC python
  #!/usr/bin/python
  # -*- coding: utf-8 -*-
#+END_SRC

* How-to
** Read a file except the first line
- https://stackoverflow.com/questions/4796764/read-file-from-line-2-or-skip-header-row

#+BEGIN_SRC python
  with open(fname) as f:
      next(f)
      for line in f:
          #do something
#+END_SRC

* Terminology
* Staging
** TODO <2017-03-24 Fri> Python, defining bound method
** TODO <2017-02-13 Mon> isinstance vs issubclass?
- https://bugs.python.org/issue25537
** TODO <2017-03-21 Tue> generator and throw
+ http://git.k.nexon.com/k/bronto/merge_requests/222/diffs
** TODO <2017-05-18 Thu> python int, long, int64
** TODO <2017-06-09 Fri> python textwrap
** TODO <2017-07-11 Tue> python2.7 re-raise, NoneType 
- https://stackoverflow.com/questions/25189545/why-doesnt-python-2-7-let-me-implicitly-re-raise-an-exception-after-yield
