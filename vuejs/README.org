#+TITLE: Vue.js

* Table of Contents :TOC_3_gh:
- [[#lifecycle][Lifecycle]]
- [[#api][API]]
  - [[#new-vueoptions][new Vue(options)]]
- [[#components][Components]]
  - [[#global-components][Global Components]]
  - [[#local-components][Local Components]]
  - [[#composing-components][Composing Components]]
- [[#single-file-components-vue][Single File Components (.vue)]]
- [[#router][Router]]
  - [[#router-link][<router-link>]]
  - [[#router-view][<router-view>]]
  - [[#history-mode][history mode]]
- [[#links][Links]]

* Lifecycle
- https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram

[[file:_img/screenshot_2018-03-07_11-48-43.png]]
[[file:_img/screenshot_2018-03-07_11-04-42.png]]

* API
** new Vue(options)
- https://vuejs.org/v2/api/#Options-Data

* Components
- https://vuejs.org/v2/guide/components.html

** Global Components
#+BEGIN_SRC html
  <div id="example">
    <my-component></my-component>
  </div>
#+END_SRC

#+BEGIN_SRC javascript
  // register
  Vue.component('my-component', {
    template: '<div>A custom component!</div>'
  })

  // create a root instance
  new Vue({
    el: '#example'
  })
#+END_SRC

** Local Components
#+BEGIN_SRC javascript
  var Child = {
    template: '<div>A custom component!</div>'
  }

  new Vue({
    // ...
    components: {
      // <my-component> will only be available in parent's template
      'my-component': Child
    }
  })
#+END_SRC

** Composing Components
[[file:_img/screenshot_2018-03-07_14-04-10.png]]

The API for a Vue component comes in three parts - ~props~, ~events~, and ~slots~:
- Props allow the external environment to pass data into the component
- Events allow the component to trigger side effects in the external environment
- Slots allow the external environment to compose the component with extra content.

#+BEGIN_SRC html
  <my-component
    :foo="baz"
    :bar="qux"
    @event-a="doThis"
    @event-b="doThat"
  >
    <img slot="icon" src="...">
    <p slot="main-text">Hello!</p>
  </my-component>
#+END_SRC

* Single File Components (.vue)
- https://vuejs.org/v2/guide/single-file-components.html
* Router
- https://router.vuejs.org/en/

** <router-link>
- https://router.vuejs.org/en/api/router-link.html

Is preferred over ~<a href="...">~

#+BEGIN_SRC html
    <!-- literal string -->
    <router-link to="home">Home</router-link>
    <!-- renders to -->
    <a href="home">Home</a>

    <!-- javascript expression using `v-bind` -->
    <router-link v-bind:to="'home'">Home</router-link>

    <!-- Omitting `v-bind` is fine, just as binding any other prop -->
    <router-link :to="'home'">Home</router-link>

    <!-- same as above -->
    <router-link :to="{ path: 'home' }">Home</router-link>

    <!-- named route -->
    <router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>

    <!-- with query, resulting in `/register?plan=private` -->
    <router-link :to="{ path: 'register', query: { plan: 'private' }}">Register</router-link>
#+END_SRC

** <router-view>
** history mode
- https://router.vuejs.org/en/essentials/history-mode.html

#+BEGIN_SRC javascript
  const router = new VueRouter({
    mode: 'history',
    routes: [...]
  })
#+END_SRC

#+BEGIN_QUOTE
Since our app is a single page client side app, without a proper server configuration,
the users will get a 404 error if they access http://oursite.com/user/id directly in their browser.
#+END_QUOTE

* Links
- [[https://codesandbox.io/s/o29j95wx9][Simple Todo App]]
